
module.exports = {
  contracts: { 'Action': { 'contractName': 'Action', 'abi': [], 'bytecode': '0x604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f30073000000000000000000000000000000000000000030146080604052600080fd00a165627a7a7230582088a5281e14a51c5e5e2a6eda66af502cedb7983bce2c04fe2ff8b80bdc3eedb20029', 'deployedBytecode': '0x73000000000000000000000000000000000000000030146080604052600080fd00a165627a7a7230582088a5281e14a51c5e5e2a6eda66af502cedb7983bce2c04fe2ff8b80bdc3eedb20029', 'sourceMap': '3211:786:9:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24', 'deployedSourceMap': '3211:786:9:-;;;;;;;;', 'source': 'pragma solidity ^0.4.24;\n\nimport "openzeppelin-solidity/contracts/cryptography/ECDSA.sol";\nimport "openzeppelin-solidity/contracts/math/SafeMath.sol";\n\nlibrary Block {\n    using SafeMath for uint256;\n    using ECDSA for bytes32;\n    using Action for Action.Object;\n\n    struct Object {\n        bytes32 previousBlock;\n        uint256 actionNum;\n        bytes32 state;\n        bytes32 references;\n        bytes32 actions;\n        address sealer;\n        bytes signature;\n        // address[] validators; TODO use modified Casper\n        // bytes32[] crosslinks; TODO\n    }\n\n    function isSealed(Object memory _block) internal pure returns (bool) {\n        if (_block.sealer == address(0)) {\n            //check genesis block\n            Object memory genesisBlock;\n            return getBlockHash(_block) == getBlockHash(genesisBlock);\n        } else {\n            return _block.sealer == getBlockHash(_block).toEthSignedMessageHash().recover(_block.signature);\n        }\n\n    }\n\n    function getBlockHash(Object memory _block) internal pure returns (bytes32) {\n        return keccak256(\n            abi.encodePacked(\n                _block.previousBlock,\n                _block.actionNum,\n                _block.state,\n                _block.references,\n                _block.actions,\n                _block.sealer\n            )\n        );\n    }\n}\n\nlibrary Chain {\n    using SafeMath for uint256;\n    struct Object {\n        bytes32[] chain;\n        mapping(bytes32 => Block.Object) blocks;\n    }\n\n    function addBlock(Object storage _obj, Block.Object memory _candidate) internal {\n        bytes32 blockHash = Block.getBlockHash(_candidate);\n        if (_obj.chain.length > 0) {\n            require(\n                _obj.blocks[_candidate.previousBlock].actionNum < _candidate.actionNum,\n                "Submitted block starts with invalid action number "\n            );\n        }\n        _obj.chain.push(blockHash);\n        _obj.blocks[blockHash] = _candidate;\n    }\n\n    function getLastBlockHash(Object storage _obj) internal view returns (bytes32) {\n        return _obj.chain[_obj.chain.length - 1];\n    }\n\n    function getBlockWithHash(Object storage _obj, bytes32 _hash) internal view returns (\n        bytes32 _previousBlock,\n        uint256 _actionNum,\n        bytes32 _state,\n        bytes32 _references,\n        bytes32 _actions,\n        address _sealer,\n        bytes memory _signature\n    ) {\n        Block.Object storage blockObj = _obj.blocks[_hash];\n        return (\n        blockObj.previousBlock,\n        blockObj.actionNum,\n        blockObj.state,\n        blockObj.references,\n        blockObj.actions,\n        blockObj.sealer,\n        blockObj.signature\n        );\n    }\n\n    function getBlockWithHeight(Object storage _obj, uint _height) internal view returns (\n        bytes32 _previousBlock,\n        uint256 _actionNum,\n        bytes32 _state,\n        bytes32 _references,\n        bytes32 _actions,\n        address _sealer,\n        bytes memory _signature\n    ) {\n        bytes32 hash = _obj.chain[_height - 1];\n        return getBlockWithHash(_obj, hash);\n    }\n\n    function getHeight(Object storage _obj) internal view returns (uint256) {\n        return _obj.chain.length;\n    }\n}\n\nlibrary Action {\n    using ECDSA for bytes32;\n    struct Object {\n        bytes32 base;\n        address from;\n        uint256 actionNum;\n        uint256 nonce;\n        string action;\n        bool deployReducer;\n        bytes data;\n        bytes signature;\n    }\n\n    function getActionHash(Object memory _action) internal pure returns (bytes32) {\n        return keccak256(\n            abi.encodePacked(\n                _action.action,\n                _action.data,\n                _action.base,\n                _action.nonce,\n                _action.deployReducer\n            )\n        );\n    }\n\n    function isSigned(Object memory _action) internal pure returns (bool) {\n        return _action.from == getActionHash(_action).toEthSignedMessageHash().recover(_action.signature);\n    }\n}\n' }, 'BalanceIncrease': { 'contractName': 'BalanceIncrease', 'abi': [{ 'constant': false, 'inputs': [{ 'name': '_tree', 'type': 'address' }, { 'name': '_from', 'type': 'address' }, { 'name': '_encodedParams', 'type': 'bytes' }], 'name': 'reduce', 'outputs': [{ 'name': '_encodedPairs', 'type': 'bytes' }], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }], 'bytecode': '0x608060405234801561001057600080fd5b50610a79806100206000396000f3006080604052600436106100405763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166315be20858114610045575b600080fd5b34801561005157600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526100c194823573ffffffffffffffffffffffffffffffffffffffff908116956024803590921695369594606494929301919081908401838280828437509497506101369650505050505050565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100fb5781810151838201526020016100e3565b50505050905090810190601f1680156101285780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6060600060606000610146610a24565b61015761015287610348565b610399565b935086604051602001808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051602081830303815290604052925061031c6101528973ffffffffffffffffffffffffffffffffffffffff16638bf4515c866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610241578181015183820152602001610229565b50505050905090810190601f16801561026e5780820380516001836020036101000a031916815260200191505b5092505050600060405180830381600087803b15801561028d57600080fd5b505af11580156102a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156102ca57600080fd5b8101908080516401000000008111156102e257600080fd5b820160208101848111156102f557600080fd5b815164010000000081118282018710171561030f57600080fd5b5050929190505050610348565b9150610331818486850163ffffffff6103cf16565b905061033c81610435565b98975050505050505050565b610350610a36565b60008251600014156103775760408051808201909152600080825260208201529150610393565b5050604080518082019091528151815260208281019082018190525b50919050565b60008060008060006103ae866020015161044a565b86516020978801518201519190039096036101000a90950495945050505050565b6103d7610a24565b83516103e2906104ad565b81526103ed83610535565b8151805160011981019081106103ff57fe5b6020908102909101015261041282610591565b81518051600019810190811061042457fe5b602090810290910101529392505050565b606061044482600001516105a4565b92915050565b8051600090811a60808110156104635760009150610393565b60b881108061047e575060c0811080159061047e575060f881105b1561048c5760019150610393565b60c08110156104a15760b51981019150610393565b60f51981019150610393565b6060600082516002016040519080825280602002602001820160405280156104e957816020015b60608152602001906001900390816104d45790505b509150600090505b600282510381101561039357828181518110151561050b57fe5b90602001906020020151828281518110151561052357fe5b602090810290910101526001016104f1565b606080825160011480156105695750608083600081518110151561055557fe5b016020015160f860020a9081900481020411155b15610575575081610444565b61058a610584845160806105c7565b8461071f565b9392505050565b606061044461059f8361079a565b610535565b6060806105b0836108cb565b905061058a6105c1825160c06105c7565b8261071f565b606080600080603886101561062b57604080516001808252818301909252906020808301908038833901905050925084860160f860020a0283600081518110151561060e57fe5b906020010190600160f860020a031916908160001a905350610715565b5060015b808681151561063a57fe5b041561064f576001909101906101000261062f565b816001016040519080825280601f01601f191660200182016040528015610680578160200160208202803883390190505b50925084820160370160f860020a0283600081518110151561069e57fe5b906020010190600160f860020a031916908160001a905350600190505b818111610715576101008183036101000a878115156106d657fe5b048115156106e057fe5b0660f860020a0283828151811015156106f557fe5b906020010190600160f860020a031916908160001a9053506001016106bb565b5090949350505050565b6060806040519050835180825260208201818101602087015b81831015610750578051835260209283019201610738565b50855184518101855292509050808201602086015b8183101561077d578051835260209283019201610765565b509551919091011594909401601f01601f19166040529392505050565b60408051602080825281830190925260609182916000918391839180820161040080388339019050509350856020850152600092505b602083101561082e5783838151811015156107e757fe5b60209101015160f860020a90819004027fff0000000000000000000000000000000000000000000000000000000000000016156108235761082e565b6001909201916107d0565b826020036040519080825280601f01601f19166020018201604052801561085f578160200160208202803883390190505b509150600090505b81518110156108c257835160018401938591811061088157fe5b90602001015160f860020a900460f860020a0282828151811015156108a257fe5b906020010190600160f860020a031916908160001a905350600101610867565b50949350505050565b606060008060606000606060008751600014156108f85760408051600081526020810190915296506109cf565b600094505b875185101561093057878581518110151561091457fe5b90602001906020020151518601955084806001019550506108fd565b856040519080825280601f01601f19166020018201604052801561095e578160200160208202803883390190505b509350602084019250600094505b87518510156109cb57878581518110151561098357fe5b9060200190602002015191506020820190506109a1838284516109da565b87858151811015156109af57fe5b906020019060200201515183019250848060010195505061096c565b8396505b505050505050919050565b82828260005b60208210610a02578251845260209384019390920191601f19909101906109e0565b50905182516020929092036101000a6000190180199091169116179052505050565b60408051602081019091526060815290565b6040805180820190915260008082526020820152905600a165627a7a72305820d9297e32242a457e03d49791abc2a01e3e787201fdc3dee7ce286417be6834730029', 'deployedBytecode': '0x6080604052600436106100405763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166315be20858114610045575b600080fd5b34801561005157600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526100c194823573ffffffffffffffffffffffffffffffffffffffff908116956024803590921695369594606494929301919081908401838280828437509497506101369650505050505050565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100fb5781810151838201526020016100e3565b50505050905090810190601f1680156101285780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6060600060606000610146610a24565b61015761015287610348565b610399565b935086604051602001808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051602081830303815290604052925061031c6101528973ffffffffffffffffffffffffffffffffffffffff16638bf4515c866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610241578181015183820152602001610229565b50505050905090810190601f16801561026e5780820380516001836020036101000a031916815260200191505b5092505050600060405180830381600087803b15801561028d57600080fd5b505af11580156102a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156102ca57600080fd5b8101908080516401000000008111156102e257600080fd5b820160208101848111156102f557600080fd5b815164010000000081118282018710171561030f57600080fd5b5050929190505050610348565b9150610331818486850163ffffffff6103cf16565b905061033c81610435565b98975050505050505050565b610350610a36565b60008251600014156103775760408051808201909152600080825260208201529150610393565b5050604080518082019091528151815260208281019082018190525b50919050565b60008060008060006103ae866020015161044a565b86516020978801518201519190039096036101000a90950495945050505050565b6103d7610a24565b83516103e2906104ad565b81526103ed83610535565b8151805160011981019081106103ff57fe5b6020908102909101015261041282610591565b81518051600019810190811061042457fe5b602090810290910101529392505050565b606061044482600001516105a4565b92915050565b8051600090811a60808110156104635760009150610393565b60b881108061047e575060c0811080159061047e575060f881105b1561048c5760019150610393565b60c08110156104a15760b51981019150610393565b60f51981019150610393565b6060600082516002016040519080825280602002602001820160405280156104e957816020015b60608152602001906001900390816104d45790505b509150600090505b600282510381101561039357828181518110151561050b57fe5b90602001906020020151828281518110151561052357fe5b602090810290910101526001016104f1565b606080825160011480156105695750608083600081518110151561055557fe5b016020015160f860020a9081900481020411155b15610575575081610444565b61058a610584845160806105c7565b8461071f565b9392505050565b606061044461059f8361079a565b610535565b6060806105b0836108cb565b905061058a6105c1825160c06105c7565b8261071f565b606080600080603886101561062b57604080516001808252818301909252906020808301908038833901905050925084860160f860020a0283600081518110151561060e57fe5b906020010190600160f860020a031916908160001a905350610715565b5060015b808681151561063a57fe5b041561064f576001909101906101000261062f565b816001016040519080825280601f01601f191660200182016040528015610680578160200160208202803883390190505b50925084820160370160f860020a0283600081518110151561069e57fe5b906020010190600160f860020a031916908160001a905350600190505b818111610715576101008183036101000a878115156106d657fe5b048115156106e057fe5b0660f860020a0283828151811015156106f557fe5b906020010190600160f860020a031916908160001a9053506001016106bb565b5090949350505050565b6060806040519050835180825260208201818101602087015b81831015610750578051835260209283019201610738565b50855184518101855292509050808201602086015b8183101561077d578051835260209283019201610765565b509551919091011594909401601f01601f19166040529392505050565b60408051602080825281830190925260609182916000918391839180820161040080388339019050509350856020850152600092505b602083101561082e5783838151811015156107e757fe5b60209101015160f860020a90819004027fff0000000000000000000000000000000000000000000000000000000000000016156108235761082e565b6001909201916107d0565b826020036040519080825280601f01601f19166020018201604052801561085f578160200160208202803883390190505b509150600090505b81518110156108c257835160018401938591811061088157fe5b90602001015160f860020a900460f860020a0282828151811015156108a257fe5b906020010190600160f860020a031916908160001a905350600101610867565b50949350505050565b606060008060606000606060008751600014156108f85760408051600081526020810190915296506109cf565b600094505b875185101561093057878581518110151561091457fe5b90602001906020020151518601955084806001019550506108fd565b856040519080825280601f01601f19166020018201604052801561095e578160200160208202803883390190505b509350602084019250600094505b87518510156109cb57878581518110151561098357fe5b9060200190602002015191506020820190506109a1838284516109da565b87858151811015156109af57fe5b906020019060200201515183019250848060010195505061096c565b8396505b505050505050919050565b82828260005b60208210610a02578251845260209384019390920191601f19909101906109e0565b50905182516020929092036101000a6000190180199091169116179052505050565b60408051602081019091526060815290565b6040805180820190915260008082526020820152905600a165627a7a72305820d9297e32242a457e03d49791abc2a01e3e787201fdc3dee7ce286417be6834730029', 'sourceMap': '59:737:10:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;59:737:10;;;;;;;', 'deployedSourceMap': '59:737:10:-;;;;;;;;;;;;;;;;;;;;;;;108:686;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;108:686:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;108:686:10;;-1:-1:-1;108:686:10;;-1:-1:-1;;;;;;;108:686:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;108:686:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;263:26;380:11;464:23;523:18;625:40;;:::i;:::-;394:35;:26;:14;:24;:26::i;:::-;:33;:35::i;:::-;380:49;;507:5;490:23;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;490:23:10;;;464:49;;544:43;:34;:5;:10;;;555;544:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;544:22:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;544:22:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;544:22:10;;;;;;39:16:-1;36:1;17:17;2:54;101:4;544:22:10;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;13:2;5:11;;2:2;;;29:1;26;19:12;2:2;544:22:10;;;;;;20:11:-1;15:3;12:20;9:2;;;45:1;42;35:12;9:2;64:21;;126:4;117:14;;142:31;;;139:2;;;186:1;183;176:12;139:2;218:10;;268:11;251:29;;293:43;;;290:58;-1:-1;239:118;236:2;;;370:1;367;360:12;236:2;0:382;;544:22:10;;;;;;:32;:34::i;:43::-;523:64;-1:-1:-1;691:57:10;:13;713:10;725:22;;;691:57;:21;:57;:::i;:::-;675:73;;765:22;:13;:20;:22::i;:::-;758:29;108:686;-1:-1:-1;;;;;;;;108:686:10:o;490:284:30:-;551:7;;:::i;:::-;643:11;581:4;:11;596:1;581:16;577:55;;;619:13;;;;;;;;;-1:-1:-1;619:13:30;;;;;;;;-1:-1:-1;612:20:30;;577:55;-1:-1:-1;;739:28:30;;;;;;;;;747:11;;739:28;;707:4;697:15;;;739:28;;;;;;490:284;;;;;:::o;5055:379::-;5115:4;5131:11;5182:8;5220:11;5265;5145:27;5160:4;:11;;;5145:14;:27::i;:::-;5193:8;;5234:11;;;;;:20;;5323:13;5193:17;;;5347:12;;;5342:3;5338:22;5319:42;;;;5055:379;-1:-1:-1;;;;;5055:379:30:o;1168:309:18:-;1251:21;;:::i;:::-;1307:9;;1299:18;;:7;:18::i;:::-;1284:33;;1367:26;1389:3;1367:21;:26::i;:::-;1327:12;;1340:19;;-1:-1:-1;;1340:23:18;;;1327:37;;;;;;;;;;;;;;:66;1443:27;1464:5;1443:20;:27::i;:::-;1403:12;;1416:19;;-1:-1:-1;;1416:23:18;;;1403:37;;;;;;;;;;;;;;:67;1168:309;;-1:-1:-1;;;1168:309:18:o;2362:112::-;2421:5;2445:22;:3;:9;;;:20;:22::i;:::-;2438:29;2362:112;-1:-1:-1;;2362:112:18:o;3505:539:30:-;3641:13;;3565:4;;3633:22;;188:4;3679:26;;3675:362;;;3727:1;3720:8;;;;3675:362;234:4;3747:25;;;:83;;-1:-1:-1;280:4:30;3777:25;;;;;:52;;-1:-1:-1;326:4:30;3806:23;;3777:52;3743:294;;;3851:1;3844:8;;;;3743:294;280:4;3871:24;;3867:170;;;-1:-1:-1;;3935:35:30;;;-1:-1:-1;3928:42:30;;3867:170;-1:-1:-1;;4004:33:30;;;-1:-1:-1;3997:40:30;;2110:246:18;2171:23;2261:6;2229:5;:12;2244:1;2229:16;2217:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2206:40;;2270:1;2261:10;;2256:94;2295:1;2277:8;:15;:19;2273:1;:23;2256:94;;;2331:5;2337:1;2331:8;;;;;;;;;;;;;;;;;;2317;2326:1;2317:11;;;;;;;;;;;;;;;;;;:22;2298:3;;2256:94;;326:310:16;389:5;406:20;440:4;:11;455:1;440:16;:40;;;;;477:3;465:4;470:1;465:7;;;;;;;;;;;;;;-1:-1:-1;;;465:7:16;;;;;;460:13;:20;;440:40;436:170;;;-1:-1:-1;506:4:16;436:170;;;551:44;558:30;571:4;:11;584:3;558:12;:30::i;:::-;590:4;551:6;:44::i;:::-;541:54;622:7;-1:-1:-1;;;326:310:16:o;1934:112::-;1988:5;2012:27;2024:14;2033:4;2024:8;:14::i;:::-;2012:11;:27::i;835:182::-;899:5;916:17;936:13;944:4;936:7;:13::i;:::-;916:33;;966:44;973:30;986:4;:11;999:3;973:12;:30::i;:::-;1005:4;966:6;:44::i;2948:641::-;3015:5;3032:20;3188:11;3213:6;3072:2;3066:3;:8;3062:497;;;3100:12;;;3110:1;3100:12;;;;;;;;;;;;;;;;105:10:-1;3100:12:16;88:34:-1;136:17;;-1:-1;3100:12:16;3090:22;;3150:6;3144:3;:12;-1:-1:-1;;;3139:18:16;3126:7;3134:1;3126:10;;;;;;;;;;;;;;:31;-1:-1:-1;;;;;3126:31:16;;;;;;;;;3062:497;;;-1:-1:-1;3222:1:16;3237:88;3250:1;3244:3;:7;;;;;;;;:12;3237:88;;3276:8;;;;;3307:3;3302:8;3237:88;;;3359:6;3368:1;3359:10;3349:21;;;;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;3349:21:16;;3339:31;;3411:6;3402;:15;3420:2;3402:20;-1:-1:-1;;;3397:26:16;3384:7;3392:1;3384:10;;;;;;;;;;;;;;:39;-1:-1:-1;;;;;3384:39:16;;;;;;;;;3445:1;3441:5;;3437:112;3448:11;;;3437:112;;3530:3;3523:1;3516:6;:8;3510:3;:15;3503:3;:23;;;;;;;;3502:31;;;;;;;;-1:-1:-1;;;3497:37:16;3484:7;3492:1;3484:10;;;;;;;;;;;;;;:50;-1:-1:-1;;;;;3484:50:16;;;;;;;;-1:-1:-1;3461:3:16;;3437:112;;;-1:-1:-1;3575:7:16;;2948:641;-1:-1:-1;;;;2948:641:16:o;6415:1161::-;6502:5;6519:22;6594:4;6588:11;6575:24;;6633:9;6627:16;6674:6;6663:9;6656:25;6720:4;6709:9;6705:20;6757:6;6753:2;6749:15;6825:4;6814:9;6810:20;6778:220;6852:3;6848:2;6845:11;6778:220;;;6974:9;;6963:21;;6889:4;6881:13;;;;6917;6778:220;;;-1:-1:-1;7022:17:16;;7082:16;;7070:29;;7052:48;;7022:17;-1:-1:-1;7120:3:16;-1:-1:-1;7143:15:16;;;7220:4;7204:21;;7172:221;7247:3;7243:2;7240:11;7172:221;;;7369:9;;7358:21;;7284:4;7276:13;;;;7312;7172:221;;;-1:-1:-1;7471:16:16;;7459:29;;;;7452:37;7443:47;;;;7515:2;7439:56;-1:-1:-1;;7420:112:16;7414:4;7407:126;7560:9;6415:1161;-1:-1:-1;;;6415:1161:16:o;3841:438::-;3924:13;;;3934:2;3924:13;;;;;;;;;3890:5;;;;4018:6;;3890:5;;4018:6;;3924:13;;;17:15:-1;;105:10;3924:13:16;88:34:-1;136:17;;-1:-1;3924:13:16;3907:30;;3990:2;3985;3982:1;3978:10;3971:22;4027:1;4018:10;;4013:107;4034:2;4030:1;:6;4013:107;;;4061:1;4063;4061:4;;;;;;;;;;;;;;;-1:-1:-1;;;4061:4:16;;;;;:9;;;4057:53;;4090:5;;4057:53;4038:3;;;;;4013:107;;;4163:1;4158:2;:6;4148:17;;;;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;4148:17:16;;4129:36;;4189:1;4180:10;;4175:78;4196:3;:10;4192:1;:14;4175:78;;;4236:6;;4238:3;;;;4236:1;;:6;;;;;;;;;;;-1:-1:-1;;;4236:6:16;;-1:-1:-1;;;4236:6:16;4227:3;4231:1;4227:6;;;;;;;;;;;;;;:15;-1:-1:-1;;;;;4227:15:16;;;;;;;;-1:-1:-1;4208:3:16;;4175:78;;;-1:-1:-1;4269:3:16;3841:438;-1:-1:-1;;;;3841:438:16:o;5407:717::-;5468:5;5562:8;5585:6;5677:22;5726:17;5860;5915:12;5489:5;:12;5505:1;5489:17;5485:67;;;5529:12;;;5539:1;5529:12;;;;;;;;;-1:-1:-1;5522:19:16;;5485:67;5594:1;5585:10;;5580:87;5601:5;:12;5597:1;:16;5580:87;;;5641:5;5647:1;5641:8;;;;;;;;;;;;;;;;;;:15;5634:22;;;;5615:3;;;;;;;5580:87;;;5712:3;5702:14;;;;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;5702:14:16;;5677:39;;5795:4;5784:9;5780:20;5764:36;;5820:1;5816:5;;5812:279;5827:5;:12;5823:1;:16;5812:279;;;5880:5;5886:1;5880:8;;;;;;;;;;;;;;;;;;5860:28;;5973:4;5967;5963:15;5952:26;;5993:42;6000:12;6014:7;6023:4;:11;5993:6;:42::i;:::-;6065:5;6071:1;6065:8;;;;;;;;;;;;;;;;;;:15;6049:31;;;;5841:3;;;;;;;5812:279;;;6108:9;6101:16;;5407:717;;;;;;;;;;:::o;4581:547::-;4666:5;4692:4;4717;4654:9;4732:164;4745:2;4738:9;;4732:164;;4814:10;;4801:24;;4860:2;4852:10;;;;4876:9;;;;-1:-1:-1;;4749:9:16;;;;4732:164;;;-1:-1:-1;4991:10:16;;5046:11;;4926:2;:8;;;;4918:3;:17;-1:-1:-1;;4918:21:16;5003:9;;4987:26;;;5042:22;;5090:21;5077:35;;-1:-1:-1;;;4958:164:16:o;59:737:10:-;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;-1:-1:-1;59:737:10;;;;;;;;:::o', 'source': 'pragma solidity ^0.4.24;\n\nimport "../MerkluxReducer.sol";\n\ncontract BalanceIncrease is MerkluxReducer {\n    function reduce(\n        IStateTree _tree,\n        address _from,\n        bytes memory _encodedParams // rlp encoded params\n    ) public returns (\n        bytes memory _encodedPairs // rlp encoded key value pairs\n    ) {\n        // 1. Decode data with RLP decoder\n        uint amount = _encodedParams.toRlpItem().toUint();\n\n        // 2. Calculate\n        bytes memory _senderKey = abi.encodePacked(_from);\n        uint currentAmount = _tree.read(_senderKey).toRlpItem().toUint();\n\n        // 3. Return pairs\n        ReducerUtil.RlpData memory pairsToReturn;\n        pairsToReturn = pairsToReturn.addUint(_senderKey, amount + currentAmount);\n        return pairsToReturn.encode();\n    }\n}\n' }, 'Block': { 'contractName': 'Block', 'abi': [], 'bytecode': '0x604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f30073000000000000000000000000000000000000000030146080604052600080fd00a165627a7a7230582094961a3c20d57ac8b00ea88a46ef5ce5b52534d8c8c0fde28aa8157d7e4d46d40029', 'deployedBytecode': '0x73000000000000000000000000000000000000000030146080604052600080fd00a165627a7a7230582094961a3c20d57ac8b00ea88a46ef5ce5b52534d8c8c0fde28aa8157d7e4d46d40029', 'sourceMap': '152:1196:9:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24', 'deployedSourceMap': '152:1196:9:-;;;;;;;;', 'source': 'pragma solidity ^0.4.24;\n\nimport "openzeppelin-solidity/contracts/cryptography/ECDSA.sol";\nimport "openzeppelin-solidity/contracts/math/SafeMath.sol";\n\nlibrary Block {\n    using SafeMath for uint256;\n    using ECDSA for bytes32;\n    using Action for Action.Object;\n\n    struct Object {\n        bytes32 previousBlock;\n        uint256 actionNum;\n        bytes32 state;\n        bytes32 references;\n        bytes32 actions;\n        address sealer;\n        bytes signature;\n        // address[] validators; TODO use modified Casper\n        // bytes32[] crosslinks; TODO\n    }\n\n    function isSealed(Object memory _block) internal pure returns (bool) {\n        if (_block.sealer == address(0)) {\n            //check genesis block\n            Object memory genesisBlock;\n            return getBlockHash(_block) == getBlockHash(genesisBlock);\n        } else {\n            return _block.sealer == getBlockHash(_block).toEthSignedMessageHash().recover(_block.signature);\n        }\n\n    }\n\n    function getBlockHash(Object memory _block) internal pure returns (bytes32) {\n        return keccak256(\n            abi.encodePacked(\n                _block.previousBlock,\n                _block.actionNum,\n                _block.state,\n                _block.references,\n                _block.actions,\n                _block.sealer\n            )\n        );\n    }\n}\n\nlibrary Chain {\n    using SafeMath for uint256;\n    struct Object {\n        bytes32[] chain;\n        mapping(bytes32 => Block.Object) blocks;\n    }\n\n    function addBlock(Object storage _obj, Block.Object memory _candidate) internal {\n        bytes32 blockHash = Block.getBlockHash(_candidate);\n        if (_obj.chain.length > 0) {\n            require(\n                _obj.blocks[_candidate.previousBlock].actionNum < _candidate.actionNum,\n                "Submitted block starts with invalid action number "\n            );\n        }\n        _obj.chain.push(blockHash);\n        _obj.blocks[blockHash] = _candidate;\n    }\n\n    function getLastBlockHash(Object storage _obj) internal view returns (bytes32) {\n        return _obj.chain[_obj.chain.length - 1];\n    }\n\n    function getBlockWithHash(Object storage _obj, bytes32 _hash) internal view returns (\n        bytes32 _previousBlock,\n        uint256 _actionNum,\n        bytes32 _state,\n        bytes32 _references,\n        bytes32 _actions,\n        address _sealer,\n        bytes memory _signature\n    ) {\n        Block.Object storage blockObj = _obj.blocks[_hash];\n        return (\n        blockObj.previousBlock,\n        blockObj.actionNum,\n        blockObj.state,\n        blockObj.references,\n        blockObj.actions,\n        blockObj.sealer,\n        blockObj.signature\n        );\n    }\n\n    function getBlockWithHeight(Object storage _obj, uint _height) internal view returns (\n        bytes32 _previousBlock,\n        uint256 _actionNum,\n        bytes32 _state,\n        bytes32 _references,\n        bytes32 _actions,\n        address _sealer,\n        bytes memory _signature\n    ) {\n        bytes32 hash = _obj.chain[_height - 1];\n        return getBlockWithHash(_obj, hash);\n    }\n\n    function getHeight(Object storage _obj) internal view returns (uint256) {\n        return _obj.chain.length;\n    }\n}\n\nlibrary Action {\n    using ECDSA for bytes32;\n    struct Object {\n        bytes32 base;\n        address from;\n        uint256 actionNum;\n        uint256 nonce;\n        string action;\n        bool deployReducer;\n        bytes data;\n        bytes signature;\n    }\n\n    function getActionHash(Object memory _action) internal pure returns (bytes32) {\n        return keccak256(\n            abi.encodePacked(\n                _action.action,\n                _action.data,\n                _action.base,\n                _action.nonce,\n                _action.deployReducer\n            )\n        );\n    }\n\n    function isSigned(Object memory _action) internal pure returns (bool) {\n        return _action.from == getActionHash(_action).toEthSignedMessageHash().recover(_action.signature);\n    }\n}\n' }, 'Chain': { 'contractName': 'Chain', 'abi': [], 'bytecode': '0x604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f30073000000000000000000000000000000000000000030146080604052600080fd00a165627a7a72305820d983470370a7005dbf0529fda8c4ece80c07c4b1b8a566804ff4a2f9058d1e860029', 'deployedBytecode': '0x73000000000000000000000000000000000000000030146080604052600080fd00a165627a7a72305820d983470370a7005dbf0529fda8c4ece80c07c4b1b8a566804ff4a2f9058d1e860029', 'sourceMap': '1350:1859:9:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24', 'deployedSourceMap': '1350:1859:9:-;;;;;;;;', 'source': 'pragma solidity ^0.4.24;\n\nimport "openzeppelin-solidity/contracts/cryptography/ECDSA.sol";\nimport "openzeppelin-solidity/contracts/math/SafeMath.sol";\n\nlibrary Block {\n    using SafeMath for uint256;\n    using ECDSA for bytes32;\n    using Action for Action.Object;\n\n    struct Object {\n        bytes32 previousBlock;\n        uint256 actionNum;\n        bytes32 state;\n        bytes32 references;\n        bytes32 actions;\n        address sealer;\n        bytes signature;\n        // address[] validators; TODO use modified Casper\n        // bytes32[] crosslinks; TODO\n    }\n\n    function isSealed(Object memory _block) internal pure returns (bool) {\n        if (_block.sealer == address(0)) {\n            //check genesis block\n            Object memory genesisBlock;\n            return getBlockHash(_block) == getBlockHash(genesisBlock);\n        } else {\n            return _block.sealer == getBlockHash(_block).toEthSignedMessageHash().recover(_block.signature);\n        }\n\n    }\n\n    function getBlockHash(Object memory _block) internal pure returns (bytes32) {\n        return keccak256(\n            abi.encodePacked(\n                _block.previousBlock,\n                _block.actionNum,\n                _block.state,\n                _block.references,\n                _block.actions,\n                _block.sealer\n            )\n        );\n    }\n}\n\nlibrary Chain {\n    using SafeMath for uint256;\n    struct Object {\n        bytes32[] chain;\n        mapping(bytes32 => Block.Object) blocks;\n    }\n\n    function addBlock(Object storage _obj, Block.Object memory _candidate) internal {\n        bytes32 blockHash = Block.getBlockHash(_candidate);\n        if (_obj.chain.length > 0) {\n            require(\n                _obj.blocks[_candidate.previousBlock].actionNum < _candidate.actionNum,\n                "Submitted block starts with invalid action number "\n            );\n        }\n        _obj.chain.push(blockHash);\n        _obj.blocks[blockHash] = _candidate;\n    }\n\n    function getLastBlockHash(Object storage _obj) internal view returns (bytes32) {\n        return _obj.chain[_obj.chain.length - 1];\n    }\n\n    function getBlockWithHash(Object storage _obj, bytes32 _hash) internal view returns (\n        bytes32 _previousBlock,\n        uint256 _actionNum,\n        bytes32 _state,\n        bytes32 _references,\n        bytes32 _actions,\n        address _sealer,\n        bytes memory _signature\n    ) {\n        Block.Object storage blockObj = _obj.blocks[_hash];\n        return (\n        blockObj.previousBlock,\n        blockObj.actionNum,\n        blockObj.state,\n        blockObj.references,\n        blockObj.actions,\n        blockObj.sealer,\n        blockObj.signature\n        );\n    }\n\n    function getBlockWithHeight(Object storage _obj, uint _height) internal view returns (\n        bytes32 _previousBlock,\n        uint256 _actionNum,\n        bytes32 _state,\n        bytes32 _references,\n        bytes32 _actions,\n        address _sealer,\n        bytes memory _signature\n    ) {\n        bytes32 hash = _obj.chain[_height - 1];\n        return getBlockWithHash(_obj, hash);\n    }\n\n    function getHeight(Object storage _obj) internal view returns (uint256) {\n        return _obj.chain.length;\n    }\n}\n\nlibrary Action {\n    using ECDSA for bytes32;\n    struct Object {\n        bytes32 base;\n        address from;\n        uint256 actionNum;\n        uint256 nonce;\n        string action;\n        bool deployReducer;\n        bytes data;\n        bytes signature;\n    }\n\n    function getActionHash(Object memory _action) internal pure returns (bytes32) {\n        return keccak256(\n            abi.encodePacked(\n                _action.action,\n                _action.data,\n                _action.base,\n                _action.nonce,\n                _action.deployReducer\n            )\n        );\n    }\n\n    function isSigned(Object memory _action) internal pure returns (bool) {\n        return _action.from == getActionHash(_action).toEthSignedMessageHash().recover(_action.signature);\n    }\n}\n' }, 'D': { 'contractName': 'D', 'abi': [], 'bytecode': '0x604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f30073000000000000000000000000000000000000000030146080604052600080fd00a165627a7a723058209b5a991c17fa4fd30dd1901aa4fc1ade797f2756c42101f18d4e69ef741b77e30029', 'deployedBytecode': '0x73000000000000000000000000000000000000000030146080604052600080fd00a165627a7a723058209b5a991c17fa4fd30dd1901aa4fc1ade797f2756c42101f18d4e69ef741b77e30029', 'sourceMap': '76:200:27:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24', 'deployedSourceMap': '76:200:27:-;;;;;;;;', 'source': 'pragma solidity ^0.4.0;\n\n/**\n MIT License\n Copyright (c) 2017 chriseth\n */\n\nlibrary D {\n    struct Label {\n        bytes32 data;\n        uint length;\n    }\n\n    struct Edge {\n        bytes32 node;\n        Label label;\n    }\n\n    struct Node {\n        Edge[2] children;\n    }\n}' }, 'ECDSA': { 'contractName': 'ECDSA', 'abi': [], 'bytecode': '0x604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f30073000000000000000000000000000000000000000030146080604052600080fd00a165627a7a72305820cfe1f0bba5914bfba0e71c20f0ed4bfa1d933ee40c448fc30c6a23c32b4ce5580029', 'deployedBytecode': '0x73000000000000000000000000000000000000000030146080604052600080fd00a165627a7a72305820cfe1f0bba5914bfba0e71c20f0ed4bfa1d933ee40c448fc30c6a23c32b4ce5580029', 'sourceMap': '300:1684:21:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24', 'deployedSourceMap': '300:1684:21:-;;;;;;;;', 'source': 'pragma solidity ^0.4.24;\n\n/**\n * @title Elliptic curve signature operations\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\n * TODO Remove this library once solidity supports passing a signature to ecrecover.\n * See https://github.com/ethereum/solidity/issues/864\n */\n\nlibrary ECDSA {\n\n  /**\n   * @dev Recover signer address from a message by using their signature\n   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n   * @param signature bytes signature, the signature is generated using web3.eth.sign()\n   */\n  function recover(bytes32 hash, bytes signature)\n    internal\n    pure\n    returns (address)\n  {\n    bytes32 r;\n    bytes32 s;\n    uint8 v;\n\n    // Check the signature length\n    if (signature.length != 65) {\n      return (address(0));\n    }\n\n    // Divide the signature in r, s and v variables\n    // ecrecover takes the signature parameters, and the only way to get them\n    // currently is to use assembly.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly {\n      r := mload(add(signature, 0x20))\n      s := mload(add(signature, 0x40))\n      v := byte(0, mload(add(signature, 0x60)))\n    }\n\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n    if (v < 27) {\n      v += 27;\n    }\n\n    // If the version is correct return the signer address\n    if (v != 27 && v != 28) {\n      return (address(0));\n    } else {\n      // solium-disable-next-line arg-overflow\n      return ecrecover(hash, v, r, s);\n    }\n  }\n\n  /**\n   * toEthSignedMessageHash\n   * @dev prefix a bytes32 value with "\\x19Ethereum Signed Message:"\n   * and hash the result\n   */\n  function toEthSignedMessageHash(bytes32 hash)\n    internal\n    pure\n    returns (bytes32)\n  {\n    // 32 is the length in bytes of hash,\n    // enforced by the type signature above\n    return keccak256(\n      abi.encodePacked("\\x19Ethereum Signed Message:\\n32", hash)\n    );\n  }\n}\n' }, 'IMerkluxProvider': { 'contractName': 'IMerkluxProvider', 'abi': [], 'bytecode': '0x', 'deployedBytecode': '0x', 'sourceMap': '', 'deployedSourceMap': '', 'source': 'pragma solidity ^0.4.0;\n\nimport {Block, Chain} from "../Types.sol";\nimport "./IMerkluxReducerRegistry.sol";\nimport "./IMerkluxStoreForVM.sol";\n\ncontract IMerkluxProvider {\n    function getChain() internal view returns (Chain.Object storage);\n\n    function getStore() internal view returns (IMerkluxStoreForVM);\n\n    function getRegistry() internal view returns (IMerkluxReducerRegistry);\n}\n' }, 'IMerkluxReducerRegistry': { 'contractName': 'IMerkluxReducerRegistry', 'abi': [{ 'constant': false, 'inputs': [{ 'name': '_code', 'type': 'bytes' }], 'name': 'registerReducer', 'outputs': [{ 'name': 'reducerKey', 'type': 'bytes32' }, { 'name': 'reducerAddress', 'type': 'address' }], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': true, 'inputs': [{ 'name': '_reducerKey', 'type': 'bytes32' }], 'name': 'getReducer', 'outputs': [{ 'name': '', 'type': 'address' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [{ 'name': '_reducerKey', 'type': 'bytes32' }], 'name': 'isDeployed', 'outputs': [{ 'name': '', 'type': 'bool' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }], 'bytecode': '0x', 'deployedBytecode': '0x', 'sourceMap': '', 'deployedSourceMap': '', 'source': 'pragma solidity ^0.4.24;\n\nimport "../MerkluxReducer.sol";\n\ncontract IMerkluxReducerRegistry {\n    function registerReducer(bytes _code) public returns (bytes32 reducerKey, address reducerAddress);\n\n    function getReducer(bytes32 _reducerKey) public view returns (MerkluxReducer);\n\n    function isDeployed(bytes32 _reducerKey) public view returns (bool);\n}\n' }, 'IMerkluxStoreForVM': { 'contractName': 'IMerkluxStoreForVM', 'abi': [{ 'constant': false, 'inputs': [{ 'name': '_registry', 'type': 'address' }, { 'name': '_action', 'type': 'string' }, { 'name': '_data', 'type': 'bytes' }], 'name': 'deployReducer', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': '_registry', 'type': 'address' }, { 'name': '_sender', 'type': 'address' }, { 'name': '_action', 'type': 'string' }, { 'name': '_data', 'type': 'bytes' }], 'name': 'runReducer', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': '_user', 'type': 'address' }, { 'name': '_nonce', 'type': 'uint256' }], 'name': 'increaseAccountActionNonce', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': '_prevBlockHash', 'type': 'bytes32' }, { 'name': '_from', 'type': 'address' }, { 'name': '_nonce', 'type': 'uint256' }, { 'name': '_action', 'type': 'string' }, { 'name': '_deployoReducer', 'type': 'bool' }, { 'name': '_data', 'type': 'bytes' }, { 'name': '_sig', 'type': 'bytes' }], 'name': 'putAction', 'outputs': [{ 'name': '', 'type': 'bytes32' }], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [], 'name': 'resetCurrentData', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'getActionNum', 'outputs': [{ 'name': '', 'type': 'uint256' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'getStateRoot', 'outputs': [{ 'name': '', 'type': 'bytes32' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'getReferenceRoot', 'outputs': [{ 'name': '', 'type': 'bytes32' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'getActionRoot', 'outputs': [{ 'name': '', 'type': 'bytes32' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [{ 'name': '_sender', 'type': 'address' }], 'name': 'getAccountActionNonce', 'outputs': [{ 'name': '', 'type': 'uint256' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }], 'bytecode': '0x', 'deployedBytecode': '0x', 'sourceMap': '', 'deployedSourceMap': '', 'source': 'pragma solidity ^0.4.24;\n\nimport "./IMerkluxReducerRegistry.sol";\n\n/**\n * @title MerkluxTree data structure for\n *\n */\ncontract IMerkluxStoreForVM {\n    function deployReducer(IMerkluxReducerRegistry _registry, string _action, bytes _data) public;\n\n    function runReducer(IMerkluxReducerRegistry _registry, address _sender, string _action, bytes _data) public;\n\n    function increaseAccountActionNonce(address _user, uint256 _nonce) public;\n\n    function putAction(\n        bytes32 _prevBlockHash,\n        address _from,\n        uint256 _nonce,\n        string _action,\n        bool _deployoReducer,\n        bytes _data,\n        bytes _sig\n    ) public returns (bytes32) {}\n\n    function resetCurrentData() public;\n\n    function getActionNum() public view returns (uint256);\n\n    function getStateRoot() public view returns (bytes32);\n\n    function getReferenceRoot() public view returns (bytes32);\n\n    function getActionRoot() public view returns (bytes32);\n\n    function getAccountActionNonce(address _sender) public view returns (uint256);\n}\n' }, 'IStateTree': { 'contractName': 'IStateTree', 'abi': [{ 'constant': false, 'inputs': [{ 'name': 'key', 'type': 'bytes' }], 'name': 'read', 'outputs': [{ 'name': '', 'type': 'bytes' }], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }], 'bytecode': '0x', 'deployedBytecode': '0x', 'sourceMap': '', 'deployedSourceMap': '', 'source': 'pragma solidity ^0.4.24;\n\n\n/**\n * @title IMerkluxTree data structure for\n *\n */\ncontract IStateTree {\n    function read(bytes key) public returns (bytes);\n}\n' }, 'MerkluxCase': { 'contractName': 'MerkluxCase', 'abi': [{ 'constant': true, 'inputs': [], 'name': 'getBlockHashToSeal', 'outputs': [{ 'name': '', 'type': 'bytes32' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'hasResult', 'outputs': [{ 'name': '', 'type': 'bool' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': 'recipient', 'type': 'address' }], 'name': 'transferPrimary', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'deadline', 'outputs': [{ 'name': '', 'type': 'uint256' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'getDataForNewAction', 'outputs': [{ 'name': 'prevBlockHash', 'type': 'bytes32' }, { 'name': 'nonce', 'type': 'uint256' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'original', 'outputs': [{ 'name': '', 'type': 'bytes32' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'result', 'outputs': [{ 'name': '', 'type': 'bool' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [{ 'name': '_blockHash', 'type': 'bytes32' }], 'name': 'getBlock', 'outputs': [{ 'name': '_previousBlock', 'type': 'bytes32' }, { 'name': '_actionNum', 'type': 'uint256' }, { 'name': '_state', 'type': 'bytes32' }, { 'name': '_references', 'type': 'bytes32' }, { 'name': '_actions', 'type': 'bytes32' }, { 'name': '_sealer', 'type': 'address' }, { 'name': '_signature', 'type': 'bytes' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'registry', 'outputs': [{ 'name': '', 'type': 'address' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'currentActionNum', 'outputs': [{ 'name': '', 'type': 'uint256' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'accuser', 'outputs': [{ 'name': '', 'type': 'address' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'store', 'outputs': [{ 'name': '', 'type': 'address' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'defendant', 'outputs': [{ 'name': '', 'type': 'address' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'primary', 'outputs': [{ 'name': '', 'type': 'address' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'target', 'outputs': [{ 'name': '', 'type': 'bytes32' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': '_signature', 'type': 'bytes' }], 'name': 'seal', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'inputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'constructor' }, { 'anonymous': false, 'inputs': [{ 'indexed': false, 'name': '_task', 'type': 'uint8' }], 'name': 'TaskDone', 'type': 'event' }, { 'anonymous': false, 'inputs': [{ 'indexed': false, 'name': '_original', 'type': 'bytes32' }, { 'indexed': false, 'name': '_target', 'type': 'bytes32' }, { 'indexed': false, 'name': '_result', 'type': 'bool' }], 'name': 'OnResult', 'type': 'event' }, { 'anonymous': false, 'inputs': [{ 'indexed': false, 'name': '_actionHash', 'type': 'bytes32' }], 'name': 'Dispatched', 'type': 'event' }, { 'anonymous': false, 'inputs': [{ 'indexed': false, 'name': '_blockHash', 'type': 'bytes32' }, { 'indexed': false, 'name': '_signature', 'type': 'bytes' }], 'name': 'Sealed', 'type': 'event' }, { 'anonymous': false, 'inputs': [{ 'indexed': false, 'name': 'recipient', 'type': 'address' }], 'name': 'PrimaryTransferred', 'type': 'event' }, { 'constant': false, 'inputs': [{ 'name': '_store', 'type': 'address' }, { 'name': '_registry', 'type': 'address' }, { 'name': '_duration', 'type': 'uint256' }, { 'name': '_original', 'type': 'bytes32' }, { 'name': '_target', 'type': 'bytes32' }, { 'name': '_defendant', 'type': 'address' }, { 'name': '_onResult', 'type': 'function' }], 'name': 'init', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': '_attorney', 'type': 'address' }], 'name': 'appoint', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': '_attorney', 'type': 'address' }], 'name': 'cancel', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [], 'name': 'destroy', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': '_previousBlock', 'type': 'bytes32' }, { 'name': '_actionNum', 'type': 'uint256' }, { 'name': '_state', 'type': 'bytes32' }, { 'name': '_references', 'type': 'bytes32' }, { 'name': '_actions', 'type': 'bytes32' }, { 'name': '_sealer', 'type': 'address' }, { 'name': '_signature', 'type': 'bytes' }], 'name': 'submitOriginalBlock', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': '_previousBlock', 'type': 'bytes32' }, { 'name': '_actionNum', 'type': 'uint256' }, { 'name': '_state', 'type': 'bytes32' }, { 'name': '_references', 'type': 'bytes32' }, { 'name': '_actions', 'type': 'bytes32' }, { 'name': '_sealer', 'type': 'address' }, { 'name': '_signature', 'type': 'bytes' }], 'name': 'submitTargetBlock', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': '_key', 'type': 'bytes' }, { 'name': '_value', 'type': 'bytes' }, { 'name': '_branchMask', 'type': 'uint256' }, { 'name': '_siblings', 'type': 'bytes32[]' }], 'name': 'submitReference', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': '_prevBlock', 'type': 'bytes32' }, { 'name': '_from', 'type': 'address' }, { 'name': '_actionNum', 'type': 'uint256' }, { 'name': '_nonce', 'type': 'uint256' }, { 'name': '_action', 'type': 'string' }, { 'name': '_deployReducer', 'type': 'bool' }, { 'name': '_data', 'type': 'bytes' }, { 'name': '_signature', 'type': 'bytes' }], 'name': 'submitAction', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [], 'name': 'runAction', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': true, 'inputs': [{ 'name': '_actionNum', 'type': 'uint256' }], 'name': 'isSubmitted', 'outputs': [{ 'name': '', 'type': 'bool' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': false, 'inputs': [], 'name': 'close', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }], 'bytecode': '0x608060405234801561001057600080fd5b5060008054600160a060020a03191633179081905560408051600160a060020a03929092168252517f4101e71e974f68df5e9730cc223280b41654676bbb052cdcc735c3337e64d2d99181900360200190a16137d8806100716000396000f3006080604052600436106101455763ffffffff60e060020a60003504166305d1e4c0811461014a5780631053eaa314610171578063216b17171461019a5780632348238c146102945780632421a321146102b557806329dcb0cf146103325780632be336eb1461034757806337f1a4701461037557806343d726d61461039657806346c715fa146103ab5780634c33fe94146103c05780635810ddb7146103e157806360668333146104425780636537214714610519578063664a4a051461052e5780637b103999146105f85780637ff914221461062957806383197ef01461063e578063886f35d714610653578063975057e7146106685780639d8e41601461067d578063c401882b14610692578063c6dbdf61146106a7578063d4b83992146106bc578063e3d8162f146106d1578063e787418a1461074e578063e9a8310114610766575b600080fd5b34801561015657600080fd5b5061015f610786565b60408051918252519081900360200190f35b34801561017d57600080fd5b5061018661079f565b604080519115158252519081900360200190f35b3480156101a657600080fd5b50604080516020600460843581810135601f81018490048402850184019095528484526102929482359460248035600160a060020a03169560443595606435953695919460a494909391019190819084018382808284375050604080516020601f818a01358b0180359182018390048302840183018552818452989b8a3515159b909a90999401975091955091820193509150819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506107a89650505050505050565b005b3480156102a057600080fd5b50610292600160a060020a0360043516610ada565b3480156102c157600080fd5b50604080516020601f60c435600481810135928301849004840285018401909552818452610292948035946024803595604435956064359560843595600160a060020a0360a43516953695919460e4949193909201918190840183828082843750949750610b609650505050505050565b34801561033e57600080fd5b5061015f610f47565b34801561035357600080fd5b5061035c610f4d565b6040805192835260208301919091528051918290030190f35b34801561038157600080fd5b50610292600160a060020a036004351661101a565b3480156103a257600080fd5b506102926110ab565b3480156103b757600080fd5b5061015f6110bf565b3480156103cc57600080fd5b50610292600160a060020a03600435166110c5565b3480156103ed57600080fd5b50610292600160a060020a0360043581169060243581169060443590606435906084359060a435166c0100000000000000000000000060c4359081049063ffffffff6801000000000000000090910416611153565b34801561044e57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261029294369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020808901358a01803580830284810184018652818552999c8b359c909b909a9501985092965081019450909250829190850190849080828437509497506112e79650505050505050565b34801561052557600080fd5b50610186611893565b34801561053a57600080fd5b506105466004356118a1565b6040805188815260208082018990529181018790526060810186905260808101859052600160a060020a03841660a082015260e060c0820181815284519183019190915283519192909161010084019185019080838360005b838110156105b757818101518382015260200161059f565b50505050905090810190601f1680156105e45780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b34801561060457600080fd5b5061060d6118e0565b60408051600160a060020a039092168252519081900360200190f35b34801561063557600080fd5b5061015f6118ef565b34801561064a57600080fd5b506102926118f5565b34801561065f57600080fd5b5061060d61198b565b34801561067457600080fd5b5061060d61199a565b34801561068957600080fd5b506102926119a9565b34801561069e57600080fd5b5061060d611d3e565b3480156106b357600080fd5b5061060d611d4d565b3480156106c857600080fd5b5061015f611d5c565b3480156106dd57600080fd5b50604080516020601f60c435600481810135928301849004840285018401909552818452610292948035946024803595604435956064359560843595600160a060020a0360a43516953695919460e4949193909201918190840183828082843750949750611d629650505050505050565b34801561075a57600080fd5b5061018660043561202b565b34801561077257600080fd5b506102926004803560248101910135612055565b6000610799610794336121de565b612450565b90505b90565b60095460ff1681565b6107b0613622565b600554600160a060020a03163314806107d557506107d560183363ffffffff61252016565b151561082d576040805160e560020a62461bcd028152602060048201526034602482015260008051602061378d833981519152604482015260008051602061376d833981519152606482015290519081900360840190fd5b60036000819052601c6020527fb0deb225ecd3a242ef7d55f0f81ae3b924e0b6f9da8bc33b306fb32ca5f287f75460ff1615156108af576040805160e560020a62461bcd028152602060048201526021602482015260008051602061374d833981519152604482015260fa60020a601902606482015290519081900360840190fd5b610100604051908101604052808b6000191681526020018a600160a060020a03168152602001898152602001888152602001878152602001861515815260200185815260200184815250915087600a6001015411158015610911575060125488105b151561098d576040805160e560020a62461bcd02815260206004820152602160248201527f416374696f6e206e756d626572206973206e6f7420696e207468652072616e6760448201527f6500000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b61099682612557565b1515610a12576040805160e560020a62461bcd02815260206004820152602360248201527f5369676e617475726520666f722074686520616374696f6e20697320696e766160448201527f6c69640000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6000888152601d60209081526040918290208451815584820151600182018054600160a060020a031916600160a060020a039092169190911790559184015160028301556060840151600383015560808401518051859392610a7b926004850192910190613676565b5060a082015160058201805460ff191691151591909117905560c08201518051610aaf916006840191602090910190613676565b5060e08201518051610acb916007840191602090910190613676565b50505050505050505050505050565b600054600160a060020a03163314610af157600080fd5b600160a060020a0381161515610b0657600080fd5b60008054600160a060020a031916600160a060020a03838116919091179182905560408051929091168252517f4101e71e974f68df5e9730cc223280b41654676bbb052cdcc735c3337e64d2d9916020908290030190a150565b610b686136f4565b600554600160a060020a0316331480610b8d5750610b8d60183363ffffffff61252016565b1515610be5576040805160e560020a62461bcd028152602060048201526034602482015260008051602061378d833981519152604482015260008051602061376d833981519152606482015290519081900360840190fd5b6000808052601c6020527fb9c6de81004e18dedadca3e5eabaab449ca91dff6f58efc9461da635fe77f8495460ff161515610c65576040805160e560020a62461bcd028152602060048201526021602482015260008051602061374d833981519152604482015260fa60020a601902606482015290519081900360840190fd5b6040805160e0810182528a8152602081018a90529081018890526060810187905260808101869052600160a060020a03851660a082015260c08101849052600654909250600190610cb584612450565b14610d30576040805160e560020a62461bcd02815260206004820152603a60248201527f5375626d697474656420626c6f636b2068617320646966666572656e7420686160448201527f7368207769746820746865206f726967696e616c20626c6f636b000000000000606482015290519081900360840190fd5b610d398361259d565b1515610db5576040805160e560020a62461bcd02815260206004820152602b60248201527f5369676e617475726520666f7220746865206f726967696e616c20626c6f636b60448201527f20697320696e76616c6964000000000000000000000000000000000000000000606482015290519081900360840190fd5b8251600a908155602080850151600b556040850151600c556060850151600d556080850151600e5560a0850151600f8054600160a060020a031916600160a060020a0390921691909117905560c08501518051869392610e1a92601092910190613676565b5050506003899055600154604080517fe49aa48e000000000000000000000000000000000000000000000000000000008152600481018c90529051600160a060020a039092169163e49aa48e9160248082019260009290919082900301818387803b158015610e8857600080fd5b505af1158015610e9c573d6000803e3d6000fd5b5050600154604080517f9498bd71000000000000000000000000000000000000000000000000000000008152600481018d90529051600160a060020a039092169350639498bd71925060248082019260009290919082900301818387803b158015610f0657600080fd5b505af1158015610f1a573d6000803e3d6000fd5b50505050610f3283601961260a90919063ffffffff16565b610f3b81612754565b50505050505050505050565b60085481565b600080600080610f5b61284c565b9150610f65612851565b9050610f7082612860565b604080517fc0ec112f000000000000000000000000000000000000000000000000000000008152336004820152905161101091600191600160a060020a0386169163c0ec112f9160248083019260209291908290030181600087803b158015610fd857600080fd5b505af1158015610fec573d6000803e3d6000fd5b505050506040513d602081101561100257600080fd5b50519063ffffffff61288716565b9350935050509091565b600554600160a060020a031633148061103f575061103f60183363ffffffff61252016565b1515611097576040805160e560020a62461bcd028152602060048201526034602482015260008051602061378d833981519152604482015260008051602061376d833981519152606482015290519081900360840190fd5b6110a860188263ffffffff6128a016565b50565b6008544211156110bd576110bd6128ee565b565b60065481565b600554600160a060020a03163314806110ea57506110ea60183363ffffffff61252016565b1515611142576040805160e560020a62461bcd028152602060048201526034602482015260008051602061378d833981519152604482015260008051602061376d833981519152606482015290519081900360840190fd5b6110a860188263ffffffff612b2c16565b600054600160a060020a0316331461116a57600080fd5b6000600160a060020a03891615156111cc576040805160e560020a62461bcd02815260206004820152601960248201527f4e6f7420612076616c69642073746f7265206164647265737300000000000000604482015290519081900360640190fd5b600160a060020a038816151561122c576040805160e560020a62461bcd02815260206004820152601c60248201527f4e6f7420612076616c6964207265676973747279206164647265737300000000604482015290519081900360640190fd5b60018054600160a060020a03808c16600160a060020a03199283161790925560028054928b169290911691909117905561126c874263ffffffff61288716565b6008556006869055600785905560058054600160a060020a031916600160a060020a0386811691909117909155601b805477ffffffffffffffffffffffffffffffffffffffffffffffff191663ffffffff851692861664010000000002929092179190911790556112dc81612754565b505050505050505050565b60055460009081908190600160a060020a0316331480611313575061131360183363ffffffff61252016565b151561136b576040805160e560020a62461bcd028152602060048201526034602482015260008051602061378d833981519152604482015260008051602061376d833981519152606482015290519081900360840190fd5b60026000819052601c6020527ff5b6e61a0c14f171ef1c86f003900ef0305e4159fff3317e4fb7c351f2050c875460ff1615156113ed576040805160e560020a62461bcd028152602060048201526021602482015260008051602061374d833981519152604482015260fa60020a601902606482015290519081900360840190fd5b60036000819052601c6020527fb0deb225ecd3a242ef7d55f0f81ae3b924e0b6f9da8bc33b306fb32ca5f287f75460ff1615611473576040805160e560020a62461bcd02815260206004820152601860248201527f5461736b20697320616c72656164792066696e69736865640000000000000000604482015290519081900360640190fd5b6001546040517fa6309dff000000000000000000000000000000000000000000000000000000008152604481018990526080600482019081528b5160848301528b51600160a060020a039093169263a6309dff928d928d928d928d929182916024810191606482019160a4019060208a019080838360005b838110156115035781810151838201526020016114eb565b50505050905090810190601f1680156115305780820380516001836020036101000a031916815260200191505b50848103835287518152875160209182019189019080838360005b8381101561156357818101518382015260200161154b565b50505050905090810190601f1680156115905780820380516001836020036101000a031916815260200191505b508481038252855181528551602091820191808801910280838360005b838110156115c55781810151838201526020016115ad565b50505050905001975050505050505050600060405180830381600087803b1580156115ef57600080fd5b505af1158015611603573d6000803e3d6000fd5b50508a517f260000000000000000000000000000000000000000000000000000000000000092508b9150600090811061163857fe5b90602001015160f860020a900460f860020a027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156117f457600093505b60208410156116df5783600802888581518110151561169357fe5b60209101015160029190910a60f860020a918290049091027fff000000000000000000000000000000000000000000000000000000000000001604949094179360019390930192611678565b600254604080517f907490aa000000000000000000000000000000000000000000000000000000008152600481018890529051600160a060020a039092169163907490aa916024808201926020929091908290030181600087803b15801561174657600080fd5b505af115801561175a573d6000803e3d6000fd5b505050506040513d602081101561177057600080fd5b5051600154604080517ff92e4591000000000000000000000000000000000000000000000000000000008152600160a060020a038085166004830152915193965091169163f92e45919160248082019260009290919082900301818387803b1580156117db57600080fd5b505af11580156117ef573d6000803e3d6000fd5b505050505b601454600154604080517f776908880000000000000000000000000000000000000000000000000000000081529051600160a060020a03909216916377690888916004808201926020929091908290030181600087803b15801561185757600080fd5b505af115801561186b573d6000803e3d6000fd5b505050506040513d602081101561188157600080fd5b505114156112dc576112dc6003612754565b600954610100900460ff1681565b600080600080600080606060006118b661284c565b90506118c8818a63ffffffff612b7816565b959f949e50929c50909a509850965090945092505050565b600254600160a060020a031681565b60035481565b600454600160a060020a0316331461197d576040805160e560020a62461bcd02815260206004820152602760248201527f4f6e6c792074686520616363757365722063616e20646573747275637420746860448201527f6973206361736500000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600454600160a060020a0316ff5b600454600160a060020a031681565b600154600160a060020a031681565b60036000818152601c6020527fb0deb225ecd3a242ef7d55f0f81ae3b924e0b6f9da8bc33b306fb32ca5f287f75490919060ff161515611a2e576040805160e560020a62461bcd028152602060048201526021602482015260008051602061374d833981519152604482015260fa60020a601902606482015290519081900360840190fd5b60125460035410611aaf576040805160e560020a62461bcd02815260206004820152603760248201527f416374696f6e206e756d6265722069732061626f76652074686520746172676560448201527f7420626c6f636b277320616374696f6e206e756d626572000000000000000000606482015290519081900360840190fd5b6003546000818152601d602052604090209250611acb9061202b565b1515611b47576040805160e560020a62461bcd02815260206004820152602660248201527f446174612061626f75742074686520616374696f6e206973206e6f742073756260448201527f6d69747465640000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600482018054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152611d109390929091830182828015611bd65780601f10611bab57610100808354040283529160200191611bd6565b820191906000526020600020905b815481529060010190602001808311611bb957829003601f168201915b5050505060068501805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152935090830182828015611c635780601f10611c3857610100808354040283529160200191611c63565b820191906000526020600020905b815481529060010190602001808311611c4657829003601f168201915b50508754600389015460058a015460078b018054604080516020601f6002600019600187161561010002019095169490940493840181900481028201810190925282815295985093965060ff909216945091830182828015611d065780601f10611cdb57610100808354040283529160200191611d06565b820191906000526020600020905b815481529060010190602001808311611ce957829003601f168201915b5050505050612c72565b600354611d2490600163ffffffff61288716565b60038190556012541415611d3a57611d3a6128ee565b5050565b600554600160a060020a031681565b600054600160a060020a031690565b60075481565b611d6a6136f4565b600554600160a060020a0316331480611d8f5750611d8f60183363ffffffff61252016565b1515611de7576040805160e560020a62461bcd028152602060048201526034602482015260008051602061378d833981519152604482015260008051602061376d833981519152606482015290519081900360840190fd5b60016000819052601c6020527f6de76108811faf2f94afbe5ac6c98e8393206cd093932de1fbfd61bbeec43a025460ff161515611e69576040805160e560020a62461bcd028152602060048201526021602482015260008051602061374d833981519152604482015260fa60020a601902606482015290519081900360840190fd5b6040805160e0810182528a8152602081018a90529081018890526060810187905260808101869052600160a060020a03851660a082015260c08101849052600754909250600290611eb984612450565b14611f34576040805160e560020a62461bcd02815260206004820152603860248201527f5375626d697474656420626c6f636b2068617320646966666572656e7420686160448201527f73682077697468207468652074617267657420626c6f636b0000000000000000606482015290519081900360840190fd5b611f3d8361259d565b1515611fb9576040805160e560020a62461bcd02815260206004820152602960248201527f5369676e617475726520666f72207468652074617267657420626c6f636b206960448201527f7320696e76616c69640000000000000000000000000000000000000000000000606482015290519081900360840190fd5b8251601190815560208085015160125560408501516013556060850151601455608085015160155560a085015160168054600160a060020a031916600160a060020a0390921691909117905560c0850151805186939261201e92601792910190613676565b50905050610f3b81612754565b6000908152601d602052604090206007015460026001821615610100026000190190911604151590565b61205d6136f4565b600080600061206b336121de565b935061207561284c565b925061207f612851565b915085858080601f016020809104026020016040519081016040528093929190818152602001838380828437505050505060c0860191909152506120c28461259d565b1515612118576040805160e560020a62461bcd02815260206004820152601f60248201527f4d65726b6c7578564d3a205369676e617475726520697320696e76616c696400604482015290519081900360640190fd5b61212184612450565b9050612133838563ffffffff61260a16565b60408051828152602081018281529181018790527f4c4d91ae66b6b3b4a290060e822c45bfb4a8704f7c676f1269bb1ae8b672de1b9183918991899190606082018484808284376040519201829003965090945050505050a181600160a060020a03166372c18fa56040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156121ca57600080fd5b505af1158015610f3b573d6000803e3d6000fd5b6121e66136f4565b6000806121f161284c565b91506121fb612851565b905061220682612860565b8352604080517f490ca34b0000000000000000000000000000000000000000000000000000000081529051600160a060020a0383169163490ca34b9160048083019260209291908290030181600087803b15801561226357600080fd5b505af1158015612277573d6000803e3d6000fd5b505050506040513d602081101561228d57600080fd5b5051602084810191909152604080517fcd605a1a0000000000000000000000000000000000000000000000000000000081529051600160a060020a0384169263cd605a1a92600480820193918290030181600087803b1580156122ef57600080fd5b505af1158015612303573d6000803e3d6000fd5b505050506040513d602081101561231957600080fd5b505160408085019190915280517f776908880000000000000000000000000000000000000000000000000000000081529051600160a060020a0383169163776908889160048083019260209291908290030181600087803b15801561237d57600080fd5b505af1158015612391573d6000803e3d6000fd5b505050506040513d60208110156123a757600080fd5b50516060840152604080517f267e87540000000000000000000000000000000000000000000000000000000081529051600160a060020a0383169163267e87549160048083019260209291908290030181600087803b15801561240957600080fd5b505af115801561241d573d6000803e3d6000fd5b505050506040513d602081101561243357600080fd5b50516080840152600160a060020a03841660a08401525050919050565b805160208083015160408085015160608087015160808089015160a0808b01518751808b019b909b528a88019890985293890194909452870152850152600160a060020a039091166c010000000000000000000000000260c0840152805180840360b401815260d4909301908190528251600093928291908401908083835b602083106124ee5780518252601f1990920191602091820191016124cf565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912095945050505050565b6000600160a060020a038216151561253757600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b600061257e8260e0015161257261256d85613397565b6134a8565b9063ffffffff61351f16565b600160a060020a03168260200151600160a060020a0316149050919050565b60006125a76136f4565b60a0830151600160a060020a031615156125d5576125c481612450565b6125cd84612450565b149150612604565b6125e98360c0015161257261256d86612450565b600160a060020a03168360a00151600160a060020a03161491505b50919050565b600061261582612450565b8354909150600010156126ba576020808301518351600090815260018087019093526040902090910154106126ba576040805160e560020a62461bcd02815260206004820152603260248201527f5375626d697474656420626c6f636b20737461727473207769746820696e766160448201527f6c696420616374696f6e206e756d626572200000000000000000000000000000606482015290519081900360840190fd5b8254600180820185556000858152602080822090930184905583815281860183526040908190208551815585840151928101929092558401516002820155606084015160038201556080840151600482015560a0840151600582018054600160a060020a031916600160a060020a0390921691909117905560c08401518051859361274c926006850192910190613676565b505050505050565b601c600082600581111561276457fe5b815260208101919091526040016000205460ff16156127cd576040805160e560020a62461bcd02815260206004820152601460248201527f5461736b20697320616c726561647920646f6e65000000000000000000000000604482015290519081900360640190fd5b6001601c60008360058111156127df57fe5b815260200190815260200160002060006101000a81548160ff0219169083151502179055507f5fb60f8f8a0bda2ee850b4d7022f27b59240c127a9c2bbe90ac7951c8bd1fe79816040518082600581111561283657fe5b60ff16815260200191505060405180910390a150565b601990565b600154600160a060020a031690565b80546000908290600019810190811061287557fe5b90600052602060002001549050919050565b60008282018381101561289957600080fd5b9392505050565b600160a060020a03811615156128b557600080fd5b6128bf8282612520565b156128c957600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b601354600154604080517fcd605a1a000000000000000000000000000000000000000000000000000000008152905160009384939092600160a060020a039091169163cd605a1a9160048082019260209290919082900301818887803b15801561295757600080fd5b505af115801561296b573d6000803e3d6000fd5b505050506040513d602081101561298157600080fd5b5051601554600154604080517f267e875400000000000000000000000000000000000000000000000000000000815290519490931495509092600160a060020a039091169163267e87549160048281019260209291908290030181600087803b1580156129ed57600080fd5b505af1158015612a01573d6000803e3d6000fd5b505050506040513d6020811015612a1757600080fd5b50516009805460ff19166001179055149050818015612a335750805b6009805461ff00191661010092151583021790819055601b546006546007546040805163ffffffff851660e060020a810282526004820194909452602481019290925260ff9590940494909416151560448501529151640100000000909104600160a060020a03169260648082019260009290919082900301818387803b158015612abd57600080fd5b505af1158015612ad1573d6000803e3d6000fd5b505060065460075460095460408051938452602084019290925260ff61010090910416151582820152517f6ab383523f1d732828fa7ad690d4ea1d6ffc17eafe737d59297dc9755d4846259350908190036060019150a15050565b600160a060020a0381161515612b4157600080fd5b612b4b8282612520565b1515612b5657600080fd5b600160a060020a0316600090815260209190915260409020805460ff19169055565b60008181526001808401602090815260408084208054818501546002808401546003850154600486015460058701546006880180548a51601f9d8216156101000260001901909116969096049b8c018b90048b0286018b019099528a85528b9a8b9a8b9a8b9a8b9a60609a919990989197919691959194600160a060020a039092169390918391830182828015612c505780601f10612c2557610100808354040283529160200191612c50565b820191906000526020600020905b815481529060010190602001808311612c3357829003601f168201915b5050505050905097509750975097509750975097505092959891949750929550565b600080600080612c806135f4565b9350612c8a612851565b9250612c9588613603565b1515612d11576040805160e560020a62461bcd02815260206004820152602d60248201527f4d65726b6c7578564d3a204e6f74206120726563656e742074782c207570646160448201527f7465207072657620626c6f636b00000000000000000000000000000000000000606482015290519081900360840190fd5b612e46856125728c8c8c8c8c6040516020018086805190602001908083835b60208310612d4f5780518252601f199092019160209182019101612d30565b51815160209384036101000a600019018019909216911617905288519190930192880191508083835b60208310612d975780518252601f199092019160209182019101612d78565b51815160209384036101000a60001901801990921691161790529201958652508481019390935250151560f860020a0260408084019190915280518084036021018152604190930190819052825192945092508291908401908083835b60208310612e135780518252601f199092019160209182019101612df4565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912092506134a8915050565b915082600160a060020a031663e354b0c683896040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050600060405180830381600087803b158015612eab57600080fd5b505af1158015612ebf573d6000803e3d6000fd5b5050505085156130125782600160a060020a0316638650a6c9858c8c6040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a031681526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015612f46578181015183820152602001612f2e565b50505050905090810190601f168015612f735780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015612fa6578181015183820152602001612f8e565b50505050905090810190601f168015612fd35780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015612ff557600080fd5b505af1158015613009573d6000803e3d6000fd5b50505050613171565b82600160a060020a03166378f0fc6485848d8d6040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184600160a060020a0316600160a060020a031681526020018060200180602001838103835285818151815260200191508051906020019080838360005b838110156130a8578181015183820152602001613090565b50505050905090810190601f1680156130d55780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156131085781810151838201526020016130f0565b50505050905090810190601f1680156131355780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b15801561315857600080fd5b505af115801561316c573d6000803e3d6000fd5b505050505b82600160a060020a031663a026809b89848a8e8b8f8c6040518863ffffffff1660e060020a02815260040180886000191660001916815260200187600160a060020a0316600160a060020a0316815260200186815260200180602001851515151581526020018060200180602001848103845288818151815260200191508051906020019080838360005b838110156132145781810151838201526020016131fc565b50505050905090810190601f1680156132415780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b8381101561327457818101518382015260200161325c565b50505050905090810190601f1680156132a15780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b838110156132d45781810151838201526020016132bc565b50505050905090810190601f1680156133015780820380516001836020036101000a031916815260200191505b509a5050505050505050505050602060405180830381600087803b15801561332857600080fd5b505af115801561333c573d6000803e3d6000fd5b505050506040513d602081101561335257600080fd5b50516040805182815290519192507f1ba3780df328ce15242010731cd232893a302f07893ea9beb7979e3a1b157c86919081900360200190a150505050505050505050565b600081608001518260c00151836000015184606001518560a001516040516020018086805190602001908083835b602083106133e45780518252601f1990920191602091820191016133c5565b51815160209384036101000a600019018019909216911617905288519190930192880191508083835b6020831061342c5780518252601f19909201916020918201910161340d565b51815160209384036101000a60001901801990921691161790529201958652508481019390935250151560f860020a02604080840191909152805180840360210181526041909301908190528251929450925082918482019181908490849083106124ee5780518252601f1990920191602091820191016124cf565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c80830185905283518084039091018152605c90920192839052815160009391829190840190808383602083106124ee5780518252601f1990920191602091820191016124cf565b6000806000808451604114151561353957600093506135eb565b50505060208201516040830151606084015160001a601b60ff8216101561355e57601b015b8060ff16601b1415801561357657508060ff16601c14155b1561358457600093506135eb565b60408051600080825260208083018085528a905260ff8516838501526060830187905260808301869052925160019360a0808501949193601f19840193928390039091019190865af11580156135de573d6000803e3d6000fd5b5050506020604051035193505b50505092915050565b600254600160a060020a031690565b60008061360e61284c565b90508261361a82612860565b149392505050565b61010060405190810160405280600080191681526020016000600160a060020a0316815260200160008152602001600081526020016060815260200160001515815260200160608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106136b757805160ff19168380011785556136e4565b828001600101855582156136e4579182015b828111156136e45782518255916020019190600101906136c9565b506136f0929150613732565b5090565b6040805160e08101825260008082526020820181905291810182905260608082018390526080820183905260a082019290925260c081019190915290565b61079c91905b808211156136f0576000815560010161373856005072656465636573736f72207461736b206973206e6f7420636f6d706c65746563616e2063616c6c2074686973206d6574686f640000000000000000000000004f6e6c792074686520646566656e64616e74206f72206174746f726e65797320a165627a7a7230582078dd657ad426cda755cc964d7725274d21d9886a0f685a03b5c7948688f4d0070029', 'deployedBytecode': '0x6080604052600436106101455763ffffffff60e060020a60003504166305d1e4c0811461014a5780631053eaa314610171578063216b17171461019a5780632348238c146102945780632421a321146102b557806329dcb0cf146103325780632be336eb1461034757806337f1a4701461037557806343d726d61461039657806346c715fa146103ab5780634c33fe94146103c05780635810ddb7146103e157806360668333146104425780636537214714610519578063664a4a051461052e5780637b103999146105f85780637ff914221461062957806383197ef01461063e578063886f35d714610653578063975057e7146106685780639d8e41601461067d578063c401882b14610692578063c6dbdf61146106a7578063d4b83992146106bc578063e3d8162f146106d1578063e787418a1461074e578063e9a8310114610766575b600080fd5b34801561015657600080fd5b5061015f610786565b60408051918252519081900360200190f35b34801561017d57600080fd5b5061018661079f565b604080519115158252519081900360200190f35b3480156101a657600080fd5b50604080516020600460843581810135601f81018490048402850184019095528484526102929482359460248035600160a060020a03169560443595606435953695919460a494909391019190819084018382808284375050604080516020601f818a01358b0180359182018390048302840183018552818452989b8a3515159b909a90999401975091955091820193509150819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506107a89650505050505050565b005b3480156102a057600080fd5b50610292600160a060020a0360043516610ada565b3480156102c157600080fd5b50604080516020601f60c435600481810135928301849004840285018401909552818452610292948035946024803595604435956064359560843595600160a060020a0360a43516953695919460e4949193909201918190840183828082843750949750610b609650505050505050565b34801561033e57600080fd5b5061015f610f47565b34801561035357600080fd5b5061035c610f4d565b6040805192835260208301919091528051918290030190f35b34801561038157600080fd5b50610292600160a060020a036004351661101a565b3480156103a257600080fd5b506102926110ab565b3480156103b757600080fd5b5061015f6110bf565b3480156103cc57600080fd5b50610292600160a060020a03600435166110c5565b3480156103ed57600080fd5b50610292600160a060020a0360043581169060243581169060443590606435906084359060a435166c0100000000000000000000000060c4359081049063ffffffff6801000000000000000090910416611153565b34801561044e57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261029294369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020808901358a01803580830284810184018652818552999c8b359c909b909a9501985092965081019450909250829190850190849080828437509497506112e79650505050505050565b34801561052557600080fd5b50610186611893565b34801561053a57600080fd5b506105466004356118a1565b6040805188815260208082018990529181018790526060810186905260808101859052600160a060020a03841660a082015260e060c0820181815284519183019190915283519192909161010084019185019080838360005b838110156105b757818101518382015260200161059f565b50505050905090810190601f1680156105e45780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b34801561060457600080fd5b5061060d6118e0565b60408051600160a060020a039092168252519081900360200190f35b34801561063557600080fd5b5061015f6118ef565b34801561064a57600080fd5b506102926118f5565b34801561065f57600080fd5b5061060d61198b565b34801561067457600080fd5b5061060d61199a565b34801561068957600080fd5b506102926119a9565b34801561069e57600080fd5b5061060d611d3e565b3480156106b357600080fd5b5061060d611d4d565b3480156106c857600080fd5b5061015f611d5c565b3480156106dd57600080fd5b50604080516020601f60c435600481810135928301849004840285018401909552818452610292948035946024803595604435956064359560843595600160a060020a0360a43516953695919460e4949193909201918190840183828082843750949750611d629650505050505050565b34801561075a57600080fd5b5061018660043561202b565b34801561077257600080fd5b506102926004803560248101910135612055565b6000610799610794336121de565b612450565b90505b90565b60095460ff1681565b6107b0613622565b600554600160a060020a03163314806107d557506107d560183363ffffffff61252016565b151561082d576040805160e560020a62461bcd028152602060048201526034602482015260008051602061378d833981519152604482015260008051602061376d833981519152606482015290519081900360840190fd5b60036000819052601c6020527fb0deb225ecd3a242ef7d55f0f81ae3b924e0b6f9da8bc33b306fb32ca5f287f75460ff1615156108af576040805160e560020a62461bcd028152602060048201526021602482015260008051602061374d833981519152604482015260fa60020a601902606482015290519081900360840190fd5b610100604051908101604052808b6000191681526020018a600160a060020a03168152602001898152602001888152602001878152602001861515815260200185815260200184815250915087600a6001015411158015610911575060125488105b151561098d576040805160e560020a62461bcd02815260206004820152602160248201527f416374696f6e206e756d626572206973206e6f7420696e207468652072616e6760448201527f6500000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b61099682612557565b1515610a12576040805160e560020a62461bcd02815260206004820152602360248201527f5369676e617475726520666f722074686520616374696f6e20697320696e766160448201527f6c69640000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6000888152601d60209081526040918290208451815584820151600182018054600160a060020a031916600160a060020a039092169190911790559184015160028301556060840151600383015560808401518051859392610a7b926004850192910190613676565b5060a082015160058201805460ff191691151591909117905560c08201518051610aaf916006840191602090910190613676565b5060e08201518051610acb916007840191602090910190613676565b50505050505050505050505050565b600054600160a060020a03163314610af157600080fd5b600160a060020a0381161515610b0657600080fd5b60008054600160a060020a031916600160a060020a03838116919091179182905560408051929091168252517f4101e71e974f68df5e9730cc223280b41654676bbb052cdcc735c3337e64d2d9916020908290030190a150565b610b686136f4565b600554600160a060020a0316331480610b8d5750610b8d60183363ffffffff61252016565b1515610be5576040805160e560020a62461bcd028152602060048201526034602482015260008051602061378d833981519152604482015260008051602061376d833981519152606482015290519081900360840190fd5b6000808052601c6020527fb9c6de81004e18dedadca3e5eabaab449ca91dff6f58efc9461da635fe77f8495460ff161515610c65576040805160e560020a62461bcd028152602060048201526021602482015260008051602061374d833981519152604482015260fa60020a601902606482015290519081900360840190fd5b6040805160e0810182528a8152602081018a90529081018890526060810187905260808101869052600160a060020a03851660a082015260c08101849052600654909250600190610cb584612450565b14610d30576040805160e560020a62461bcd02815260206004820152603a60248201527f5375626d697474656420626c6f636b2068617320646966666572656e7420686160448201527f7368207769746820746865206f726967696e616c20626c6f636b000000000000606482015290519081900360840190fd5b610d398361259d565b1515610db5576040805160e560020a62461bcd02815260206004820152602b60248201527f5369676e617475726520666f7220746865206f726967696e616c20626c6f636b60448201527f20697320696e76616c6964000000000000000000000000000000000000000000606482015290519081900360840190fd5b8251600a908155602080850151600b556040850151600c556060850151600d556080850151600e5560a0850151600f8054600160a060020a031916600160a060020a0390921691909117905560c08501518051869392610e1a92601092910190613676565b5050506003899055600154604080517fe49aa48e000000000000000000000000000000000000000000000000000000008152600481018c90529051600160a060020a039092169163e49aa48e9160248082019260009290919082900301818387803b158015610e8857600080fd5b505af1158015610e9c573d6000803e3d6000fd5b5050600154604080517f9498bd71000000000000000000000000000000000000000000000000000000008152600481018d90529051600160a060020a039092169350639498bd71925060248082019260009290919082900301818387803b158015610f0657600080fd5b505af1158015610f1a573d6000803e3d6000fd5b50505050610f3283601961260a90919063ffffffff16565b610f3b81612754565b50505050505050505050565b60085481565b600080600080610f5b61284c565b9150610f65612851565b9050610f7082612860565b604080517fc0ec112f000000000000000000000000000000000000000000000000000000008152336004820152905161101091600191600160a060020a0386169163c0ec112f9160248083019260209291908290030181600087803b158015610fd857600080fd5b505af1158015610fec573d6000803e3d6000fd5b505050506040513d602081101561100257600080fd5b50519063ffffffff61288716565b9350935050509091565b600554600160a060020a031633148061103f575061103f60183363ffffffff61252016565b1515611097576040805160e560020a62461bcd028152602060048201526034602482015260008051602061378d833981519152604482015260008051602061376d833981519152606482015290519081900360840190fd5b6110a860188263ffffffff6128a016565b50565b6008544211156110bd576110bd6128ee565b565b60065481565b600554600160a060020a03163314806110ea57506110ea60183363ffffffff61252016565b1515611142576040805160e560020a62461bcd028152602060048201526034602482015260008051602061378d833981519152604482015260008051602061376d833981519152606482015290519081900360840190fd5b6110a860188263ffffffff612b2c16565b600054600160a060020a0316331461116a57600080fd5b6000600160a060020a03891615156111cc576040805160e560020a62461bcd02815260206004820152601960248201527f4e6f7420612076616c69642073746f7265206164647265737300000000000000604482015290519081900360640190fd5b600160a060020a038816151561122c576040805160e560020a62461bcd02815260206004820152601c60248201527f4e6f7420612076616c6964207265676973747279206164647265737300000000604482015290519081900360640190fd5b60018054600160a060020a03808c16600160a060020a03199283161790925560028054928b169290911691909117905561126c874263ffffffff61288716565b6008556006869055600785905560058054600160a060020a031916600160a060020a0386811691909117909155601b805477ffffffffffffffffffffffffffffffffffffffffffffffff191663ffffffff851692861664010000000002929092179190911790556112dc81612754565b505050505050505050565b60055460009081908190600160a060020a0316331480611313575061131360183363ffffffff61252016565b151561136b576040805160e560020a62461bcd028152602060048201526034602482015260008051602061378d833981519152604482015260008051602061376d833981519152606482015290519081900360840190fd5b60026000819052601c6020527ff5b6e61a0c14f171ef1c86f003900ef0305e4159fff3317e4fb7c351f2050c875460ff1615156113ed576040805160e560020a62461bcd028152602060048201526021602482015260008051602061374d833981519152604482015260fa60020a601902606482015290519081900360840190fd5b60036000819052601c6020527fb0deb225ecd3a242ef7d55f0f81ae3b924e0b6f9da8bc33b306fb32ca5f287f75460ff1615611473576040805160e560020a62461bcd02815260206004820152601860248201527f5461736b20697320616c72656164792066696e69736865640000000000000000604482015290519081900360640190fd5b6001546040517fa6309dff000000000000000000000000000000000000000000000000000000008152604481018990526080600482019081528b5160848301528b51600160a060020a039093169263a6309dff928d928d928d928d929182916024810191606482019160a4019060208a019080838360005b838110156115035781810151838201526020016114eb565b50505050905090810190601f1680156115305780820380516001836020036101000a031916815260200191505b50848103835287518152875160209182019189019080838360005b8381101561156357818101518382015260200161154b565b50505050905090810190601f1680156115905780820380516001836020036101000a031916815260200191505b508481038252855181528551602091820191808801910280838360005b838110156115c55781810151838201526020016115ad565b50505050905001975050505050505050600060405180830381600087803b1580156115ef57600080fd5b505af1158015611603573d6000803e3d6000fd5b50508a517f260000000000000000000000000000000000000000000000000000000000000092508b9150600090811061163857fe5b90602001015160f860020a900460f860020a027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156117f457600093505b60208410156116df5783600802888581518110151561169357fe5b60209101015160029190910a60f860020a918290049091027fff000000000000000000000000000000000000000000000000000000000000001604949094179360019390930192611678565b600254604080517f907490aa000000000000000000000000000000000000000000000000000000008152600481018890529051600160a060020a039092169163907490aa916024808201926020929091908290030181600087803b15801561174657600080fd5b505af115801561175a573d6000803e3d6000fd5b505050506040513d602081101561177057600080fd5b5051600154604080517ff92e4591000000000000000000000000000000000000000000000000000000008152600160a060020a038085166004830152915193965091169163f92e45919160248082019260009290919082900301818387803b1580156117db57600080fd5b505af11580156117ef573d6000803e3d6000fd5b505050505b601454600154604080517f776908880000000000000000000000000000000000000000000000000000000081529051600160a060020a03909216916377690888916004808201926020929091908290030181600087803b15801561185757600080fd5b505af115801561186b573d6000803e3d6000fd5b505050506040513d602081101561188157600080fd5b505114156112dc576112dc6003612754565b600954610100900460ff1681565b600080600080600080606060006118b661284c565b90506118c8818a63ffffffff612b7816565b959f949e50929c50909a509850965090945092505050565b600254600160a060020a031681565b60035481565b600454600160a060020a0316331461197d576040805160e560020a62461bcd02815260206004820152602760248201527f4f6e6c792074686520616363757365722063616e20646573747275637420746860448201527f6973206361736500000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600454600160a060020a0316ff5b600454600160a060020a031681565b600154600160a060020a031681565b60036000818152601c6020527fb0deb225ecd3a242ef7d55f0f81ae3b924e0b6f9da8bc33b306fb32ca5f287f75490919060ff161515611a2e576040805160e560020a62461bcd028152602060048201526021602482015260008051602061374d833981519152604482015260fa60020a601902606482015290519081900360840190fd5b60125460035410611aaf576040805160e560020a62461bcd02815260206004820152603760248201527f416374696f6e206e756d6265722069732061626f76652074686520746172676560448201527f7420626c6f636b277320616374696f6e206e756d626572000000000000000000606482015290519081900360840190fd5b6003546000818152601d602052604090209250611acb9061202b565b1515611b47576040805160e560020a62461bcd02815260206004820152602660248201527f446174612061626f75742074686520616374696f6e206973206e6f742073756260448201527f6d69747465640000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600482018054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152611d109390929091830182828015611bd65780601f10611bab57610100808354040283529160200191611bd6565b820191906000526020600020905b815481529060010190602001808311611bb957829003601f168201915b5050505060068501805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152935090830182828015611c635780601f10611c3857610100808354040283529160200191611c63565b820191906000526020600020905b815481529060010190602001808311611c4657829003601f168201915b50508754600389015460058a015460078b018054604080516020601f6002600019600187161561010002019095169490940493840181900481028201810190925282815295985093965060ff909216945091830182828015611d065780601f10611cdb57610100808354040283529160200191611d06565b820191906000526020600020905b815481529060010190602001808311611ce957829003601f168201915b5050505050612c72565b600354611d2490600163ffffffff61288716565b60038190556012541415611d3a57611d3a6128ee565b5050565b600554600160a060020a031681565b600054600160a060020a031690565b60075481565b611d6a6136f4565b600554600160a060020a0316331480611d8f5750611d8f60183363ffffffff61252016565b1515611de7576040805160e560020a62461bcd028152602060048201526034602482015260008051602061378d833981519152604482015260008051602061376d833981519152606482015290519081900360840190fd5b60016000819052601c6020527f6de76108811faf2f94afbe5ac6c98e8393206cd093932de1fbfd61bbeec43a025460ff161515611e69576040805160e560020a62461bcd028152602060048201526021602482015260008051602061374d833981519152604482015260fa60020a601902606482015290519081900360840190fd5b6040805160e0810182528a8152602081018a90529081018890526060810187905260808101869052600160a060020a03851660a082015260c08101849052600754909250600290611eb984612450565b14611f34576040805160e560020a62461bcd02815260206004820152603860248201527f5375626d697474656420626c6f636b2068617320646966666572656e7420686160448201527f73682077697468207468652074617267657420626c6f636b0000000000000000606482015290519081900360840190fd5b611f3d8361259d565b1515611fb9576040805160e560020a62461bcd02815260206004820152602960248201527f5369676e617475726520666f72207468652074617267657420626c6f636b206960448201527f7320696e76616c69640000000000000000000000000000000000000000000000606482015290519081900360840190fd5b8251601190815560208085015160125560408501516013556060850151601455608085015160155560a085015160168054600160a060020a031916600160a060020a0390921691909117905560c0850151805186939261201e92601792910190613676565b50905050610f3b81612754565b6000908152601d602052604090206007015460026001821615610100026000190190911604151590565b61205d6136f4565b600080600061206b336121de565b935061207561284c565b925061207f612851565b915085858080601f016020809104026020016040519081016040528093929190818152602001838380828437505050505060c0860191909152506120c28461259d565b1515612118576040805160e560020a62461bcd02815260206004820152601f60248201527f4d65726b6c7578564d3a205369676e617475726520697320696e76616c696400604482015290519081900360640190fd5b61212184612450565b9050612133838563ffffffff61260a16565b60408051828152602081018281529181018790527f4c4d91ae66b6b3b4a290060e822c45bfb4a8704f7c676f1269bb1ae8b672de1b9183918991899190606082018484808284376040519201829003965090945050505050a181600160a060020a03166372c18fa56040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156121ca57600080fd5b505af1158015610f3b573d6000803e3d6000fd5b6121e66136f4565b6000806121f161284c565b91506121fb612851565b905061220682612860565b8352604080517f490ca34b0000000000000000000000000000000000000000000000000000000081529051600160a060020a0383169163490ca34b9160048083019260209291908290030181600087803b15801561226357600080fd5b505af1158015612277573d6000803e3d6000fd5b505050506040513d602081101561228d57600080fd5b5051602084810191909152604080517fcd605a1a0000000000000000000000000000000000000000000000000000000081529051600160a060020a0384169263cd605a1a92600480820193918290030181600087803b1580156122ef57600080fd5b505af1158015612303573d6000803e3d6000fd5b505050506040513d602081101561231957600080fd5b505160408085019190915280517f776908880000000000000000000000000000000000000000000000000000000081529051600160a060020a0383169163776908889160048083019260209291908290030181600087803b15801561237d57600080fd5b505af1158015612391573d6000803e3d6000fd5b505050506040513d60208110156123a757600080fd5b50516060840152604080517f267e87540000000000000000000000000000000000000000000000000000000081529051600160a060020a0383169163267e87549160048083019260209291908290030181600087803b15801561240957600080fd5b505af115801561241d573d6000803e3d6000fd5b505050506040513d602081101561243357600080fd5b50516080840152600160a060020a03841660a08401525050919050565b805160208083015160408085015160608087015160808089015160a0808b01518751808b019b909b528a88019890985293890194909452870152850152600160a060020a039091166c010000000000000000000000000260c0840152805180840360b401815260d4909301908190528251600093928291908401908083835b602083106124ee5780518252601f1990920191602091820191016124cf565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912095945050505050565b6000600160a060020a038216151561253757600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b600061257e8260e0015161257261256d85613397565b6134a8565b9063ffffffff61351f16565b600160a060020a03168260200151600160a060020a0316149050919050565b60006125a76136f4565b60a0830151600160a060020a031615156125d5576125c481612450565b6125cd84612450565b149150612604565b6125e98360c0015161257261256d86612450565b600160a060020a03168360a00151600160a060020a03161491505b50919050565b600061261582612450565b8354909150600010156126ba576020808301518351600090815260018087019093526040902090910154106126ba576040805160e560020a62461bcd02815260206004820152603260248201527f5375626d697474656420626c6f636b20737461727473207769746820696e766160448201527f6c696420616374696f6e206e756d626572200000000000000000000000000000606482015290519081900360840190fd5b8254600180820185556000858152602080822090930184905583815281860183526040908190208551815585840151928101929092558401516002820155606084015160038201556080840151600482015560a0840151600582018054600160a060020a031916600160a060020a0390921691909117905560c08401518051859361274c926006850192910190613676565b505050505050565b601c600082600581111561276457fe5b815260208101919091526040016000205460ff16156127cd576040805160e560020a62461bcd02815260206004820152601460248201527f5461736b20697320616c726561647920646f6e65000000000000000000000000604482015290519081900360640190fd5b6001601c60008360058111156127df57fe5b815260200190815260200160002060006101000a81548160ff0219169083151502179055507f5fb60f8f8a0bda2ee850b4d7022f27b59240c127a9c2bbe90ac7951c8bd1fe79816040518082600581111561283657fe5b60ff16815260200191505060405180910390a150565b601990565b600154600160a060020a031690565b80546000908290600019810190811061287557fe5b90600052602060002001549050919050565b60008282018381101561289957600080fd5b9392505050565b600160a060020a03811615156128b557600080fd5b6128bf8282612520565b156128c957600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b601354600154604080517fcd605a1a000000000000000000000000000000000000000000000000000000008152905160009384939092600160a060020a039091169163cd605a1a9160048082019260209290919082900301818887803b15801561295757600080fd5b505af115801561296b573d6000803e3d6000fd5b505050506040513d602081101561298157600080fd5b5051601554600154604080517f267e875400000000000000000000000000000000000000000000000000000000815290519490931495509092600160a060020a039091169163267e87549160048281019260209291908290030181600087803b1580156129ed57600080fd5b505af1158015612a01573d6000803e3d6000fd5b505050506040513d6020811015612a1757600080fd5b50516009805460ff19166001179055149050818015612a335750805b6009805461ff00191661010092151583021790819055601b546006546007546040805163ffffffff851660e060020a810282526004820194909452602481019290925260ff9590940494909416151560448501529151640100000000909104600160a060020a03169260648082019260009290919082900301818387803b158015612abd57600080fd5b505af1158015612ad1573d6000803e3d6000fd5b505060065460075460095460408051938452602084019290925260ff61010090910416151582820152517f6ab383523f1d732828fa7ad690d4ea1d6ffc17eafe737d59297dc9755d4846259350908190036060019150a15050565b600160a060020a0381161515612b4157600080fd5b612b4b8282612520565b1515612b5657600080fd5b600160a060020a0316600090815260209190915260409020805460ff19169055565b60008181526001808401602090815260408084208054818501546002808401546003850154600486015460058701546006880180548a51601f9d8216156101000260001901909116969096049b8c018b90048b0286018b019099528a85528b9a8b9a8b9a8b9a8b9a60609a919990989197919691959194600160a060020a039092169390918391830182828015612c505780601f10612c2557610100808354040283529160200191612c50565b820191906000526020600020905b815481529060010190602001808311612c3357829003601f168201915b5050505050905097509750975097509750975097505092959891949750929550565b600080600080612c806135f4565b9350612c8a612851565b9250612c9588613603565b1515612d11576040805160e560020a62461bcd02815260206004820152602d60248201527f4d65726b6c7578564d3a204e6f74206120726563656e742074782c207570646160448201527f7465207072657620626c6f636b00000000000000000000000000000000000000606482015290519081900360840190fd5b612e46856125728c8c8c8c8c6040516020018086805190602001908083835b60208310612d4f5780518252601f199092019160209182019101612d30565b51815160209384036101000a600019018019909216911617905288519190930192880191508083835b60208310612d975780518252601f199092019160209182019101612d78565b51815160209384036101000a60001901801990921691161790529201958652508481019390935250151560f860020a0260408084019190915280518084036021018152604190930190819052825192945092508291908401908083835b60208310612e135780518252601f199092019160209182019101612df4565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912092506134a8915050565b915082600160a060020a031663e354b0c683896040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050600060405180830381600087803b158015612eab57600080fd5b505af1158015612ebf573d6000803e3d6000fd5b5050505085156130125782600160a060020a0316638650a6c9858c8c6040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a031681526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015612f46578181015183820152602001612f2e565b50505050905090810190601f168015612f735780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015612fa6578181015183820152602001612f8e565b50505050905090810190601f168015612fd35780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015612ff557600080fd5b505af1158015613009573d6000803e3d6000fd5b50505050613171565b82600160a060020a03166378f0fc6485848d8d6040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184600160a060020a0316600160a060020a031681526020018060200180602001838103835285818151815260200191508051906020019080838360005b838110156130a8578181015183820152602001613090565b50505050905090810190601f1680156130d55780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156131085781810151838201526020016130f0565b50505050905090810190601f1680156131355780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b15801561315857600080fd5b505af115801561316c573d6000803e3d6000fd5b505050505b82600160a060020a031663a026809b89848a8e8b8f8c6040518863ffffffff1660e060020a02815260040180886000191660001916815260200187600160a060020a0316600160a060020a0316815260200186815260200180602001851515151581526020018060200180602001848103845288818151815260200191508051906020019080838360005b838110156132145781810151838201526020016131fc565b50505050905090810190601f1680156132415780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b8381101561327457818101518382015260200161325c565b50505050905090810190601f1680156132a15780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b838110156132d45781810151838201526020016132bc565b50505050905090810190601f1680156133015780820380516001836020036101000a031916815260200191505b509a5050505050505050505050602060405180830381600087803b15801561332857600080fd5b505af115801561333c573d6000803e3d6000fd5b505050506040513d602081101561335257600080fd5b50516040805182815290519192507f1ba3780df328ce15242010731cd232893a302f07893ea9beb7979e3a1b157c86919081900360200190a150505050505050505050565b600081608001518260c00151836000015184606001518560a001516040516020018086805190602001908083835b602083106133e45780518252601f1990920191602091820191016133c5565b51815160209384036101000a600019018019909216911617905288519190930192880191508083835b6020831061342c5780518252601f19909201916020918201910161340d565b51815160209384036101000a60001901801990921691161790529201958652508481019390935250151560f860020a02604080840191909152805180840360210181526041909301908190528251929450925082918482019181908490849083106124ee5780518252601f1990920191602091820191016124cf565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c80830185905283518084039091018152605c90920192839052815160009391829190840190808383602083106124ee5780518252601f1990920191602091820191016124cf565b6000806000808451604114151561353957600093506135eb565b50505060208201516040830151606084015160001a601b60ff8216101561355e57601b015b8060ff16601b1415801561357657508060ff16601c14155b1561358457600093506135eb565b60408051600080825260208083018085528a905260ff8516838501526060830187905260808301869052925160019360a0808501949193601f19840193928390039091019190865af11580156135de573d6000803e3d6000fd5b5050506020604051035193505b50505092915050565b600254600160a060020a031690565b60008061360e61284c565b90508261361a82612860565b149392505050565b61010060405190810160405280600080191681526020016000600160a060020a0316815260200160008152602001600081526020016060815260200160001515815260200160608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106136b757805160ff19168380011785556136e4565b828001600101855582156136e4579182015b828111156136e45782518255916020019190600101906136c9565b506136f0929150613732565b5090565b6040805160e08101825260008082526020820181905291810182905260608082018390526080820183905260a082019290925260c081019190915290565b61079c91905b808211156136f0576000815560010161373856005072656465636573736f72207461736b206973206e6f7420636f6d706c65746563616e2063616c6c2074686973206d6574686f640000000000000000000000004f6e6c792074686520646566656e64616e74206f72206174746f726e65797320a165627a7a7230582078dd657ad426cda755cc964d7725274d21d9886a0f685a03b5c7948688f4d0070029', 'sourceMap': '92:8061:0:-;;;1767:40;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;385:8:23;:21;;-1:-1:-1;;;;;;385:21:23;396:10;385:21;;;;;417:28;;;-1:-1:-1;;;;;436:8:23;;;;417:28;;;;;;;;;;;;92:8061:0;;;;;;', 'deployedSourceMap': '92:8061:0:-;;;;;;;;;-1:-1:-1;;;92:8061:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2917:129:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2917:129:8;;;;;;;;;;;;;;;;;;;;668:21:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;668:21:0;;;;;;;;;;;;;;;;;;;;;;5505:846;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;5505:846:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5505:846:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5505:846:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5505:846:0;;-1:-1:-1;5505:846:0;;;;-1:-1:-1;5505:846:0;-1:-1:-1;5505:846:0;;;;;;;;;;-1:-1:-1;;5505:846:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5505:846:0;;;;-1:-1:-1;5505:846:0;-1:-1:-1;5505:846:0;;-1:-1:-1;5505:846:0;;;;;;;;-1:-1:-1;5505:846:0;;-1:-1:-1;5505:846:0;;-1:-1:-1;;;;;;;5505:846:0;;;855:171:23;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;855:171:23;-1:-1:-1;;;;;855:171:23;;;;;2971:943:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2971:943:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2971:943:0;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2971:943:0;;-1:-1:-1;2971:943:0;;-1:-1:-1;;;;;;;2971:943:0;639:23;;8:9:-1;5:2;;;30:1;27;20:12;5:2;639:23:0;;;;3052:285:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3052:285:8;;;;;;;;;;;;;;;;;;;;;;;;;;;2527:98:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2527:98:0;-1:-1:-1;;;;;2527:98:0;;;;;7226:96;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7226:96:0;;;;583:23;;8:9:-1;5:2;;;30:1;27;20:12;5:2;583:23:0;;;;2631:100;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2631:100:0;-1:-1:-1;;;;;2631:100:0;;;;;1813:708;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1813:708:0;-1:-1:-1;;;;;1813:708:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4717:782;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4717:782:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4717:782:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4717:782:0;;;;-1:-1:-1;4717:782:0;-1:-1:-1;4717:782:0;;-1:-1:-1;4717:782:0;;;;;;;;-1:-1:-1;;4717:782:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4717:782:0;;-1:-1:-1;4717:782:0;;;-1:-1:-1;4717:782:0;;-1:-1:-1;4717:782:0;;;;;;;;;;;;-1:-1:-1;4717:782:0;;-1:-1:-1;4717:782:0;;-1:-1:-1;;;;;;;4717:782:0;695:18;;8:9:-1;5:2;;;30:1;27;20:12;5:2;695:18:0;;;;3343:369:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3343:369:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3343:369:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;3343:369:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;443:39:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;443:39:0;;;;;;;;-1:-1:-1;;;;;443:39:0;;;;;;;;;;;;;;488:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;488:31:0;;;;2737:228;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2737:228:0;;;;525:22;;8:9:-1;5:2;;;30:1;27;20:12;5:2;525:22:0;;;;405:32;;8:9:-1;5:2;;;30:1;27;20:12;5:2;405:32:0;;;;6357:724;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6357:724:0;;;;553:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;553:24:0;;;;664:75:23;;8:9:-1;5:2;;;30:1;27;20:12;5:2;664:75:23;;;;612:21:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;612:21:0;;;;3920:791;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3920:791:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3920:791:0;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3920:791:0;;-1:-1:-1;3920:791:0;;-1:-1:-1;;;;;;;3920:791:0;7087:133;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;7087:133:0;;;;;2384:527:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2384:527:8;;;;;;;;;;;;2917:129;2968:7;2994:45;:30;3013:10;2994:18;:30::i;:::-;:43;:45::i;:::-;2987:52;;2917:129;;:::o;668:21:0:-;;;;;;:::o;5505:846::-;5822:27;;:::i;:::-;1648:9;;-1:-1:-1;;;;;1648:9:0;1634:10;:23;;:52;;-1:-1:-1;1661:25:0;:9;1675:10;1661:25;:13;:25;:::i;:::-;1626:117;;;;;;;-1:-1:-1;;;;;1626:117:0;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1626:117:0;;;;-1:-1:-1;;;;;;;;;;;1626:117:0;;;;;;;;;;;;;;;5780:26;1157:18;;;;:5;:18;;;;;;1149:64;;;;;;;-1:-1:-1;;;;;1149:64:0;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1149:64:0;;;;-1:-1:-1;;;;;1149:64:0;;;;;;;;;;;;;;;5852:202;;;;;;;;;5879:10;5852:202;;;;;;;5903:5;-1:-1:-1;;;;;5852:202:0;;;;;5922:10;5852:202;;;;5946:6;5852:202;;;;5966:7;5852:202;;;;5987:14;5852:202;;;;;;6015:5;5852:202;;;;6034:10;5852:202;;;5822:232;;6112:10;6085:13;:23;;;:37;;:87;;;;-1:-1:-1;6151:21:0;;6138:34;;6085:87;6064:167;;;;;;;-1:-1:-1;;;;;6064:167:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6249:17;:6;:15;:17::i;:::-;6241:65;;;;;;;-1:-1:-1;;;;;6241:65:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6316:19;;;;:7;:19;;;;;;;;;:28;;;;;;;;;;;;;-1:-1:-1;;;;;;6316:28:0;-1:-1:-1;;;;;6316:28:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:19;:28;;;;;;;;;;:::i;:::-;-1:-1:-1;6316:28:0;;;;;;;;;-1:-1:-1;;6316:28:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;6316:28:0;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;;;;;;;;5505:846:0:o;855:171:23:-;586:8;;-1:-1:-1;;;;;586:8:23;572:10;:22;564:31;;;;;;-1:-1:-1;;;;;932:23:23;;;;924:32;;;;;;962:8;:20;;-1:-1:-1;;;;;;962:20:23;-1:-1:-1;;;;;962:20:23;;;;;;;;;;;993:28;;;1012:8;;;;993:28;;;;;;;;;;;;;855:171;:::o;2971:943:0:-;3318:26;;:::i;:::-;1648:9;;-1:-1:-1;;;;;1648:9:0;1634:10;:23;;:52;;-1:-1:-1;1661:25:0;:9;1675:10;1661:25;:13;:25;:::i;:::-;1626:117;;;;;;;-1:-1:-1;;;;;1626:117:0;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1626:117:0;;;;-1:-1:-1;;;;;;;;;;;1626:117:0;;;;;;;;;;;;;;;3244:21;1157:18;;;:5;:18;;;;;;1149:64;;;;;;;-1:-1:-1;;;;;1149:64:0;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1149:64:0;;;;-1:-1:-1;;;;;1149:64:0;;;;;;;;;;;;;;;3347:186;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3347:186:0;;;;;;;;;;;;3576:8;;3347:186;;-1:-1:-1;3276:26:0;;3551:21;3347:186;3551:19;:21::i;:::-;:33;3543:104;;;;;-1:-1:-1;;;;;3543:104:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3665:17;:6;:15;:17::i;:::-;3657:73;;;;;;;-1:-1:-1;;;;;3657:73:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3740:22;;:13;:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;3740:22:0;-1:-1:-1;;;;;3740:22:0;;;;;;;;;;;;;;;;;:13;:22;;;;;;;;:::i;:::-;-1:-1:-1;;;3772:16:0;:29;;;3811:5;;:30;;;;;;;;;;;;;;-1:-1:-1;;;;;3811:5:0;;;;:18;;:30;;;;;:5;;:30;;;;;;;;:5;;:30;;;5:2:-1;;;;30:1;27;20:12;5:2;3811:30:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;3851:5:0;;:24;;;;;;;;;;;;;;-1:-1:-1;;;;;3851:5:0;;;;-1:-1:-1;3851:16:0;;-1:-1:-1;3851:24:0;;;;;:5;;:24;;;;;;;;:5;;:24;;;5:2:-1;;;;30:1;27;20:12;5:2;3851:24:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3851:24:0;;;;3885:22;3900:6;3885:5;:14;;:22;;;;:::i;:::-;1403:12;1409:5;1403;:12::i;:::-;1223:1;1753;2971:943;;;;;;;;:::o;639:23::-;;;;:::o;3052:285:8:-;3104:21;3127:13;3153:26;3202:24;3182:10;:8;:10::i;:::-;3153:39;;3229:10;:8;:10::i;:::-;3202:37;;3257:24;:5;:22;:24::i;:::-;3283:39;;;;;;3311:10;3283:39;;;;;;:46;;3327:1;;-1:-1:-1;;;;;3283:27:8;;;;;:39;;;;;;;;;;;;;;-1:-1:-1;3283:27:8;:39;;;5:2:-1;;;;30:1;27;20:12;5:2;3283:39:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3283:39:8;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3283:39:8;;:46;:43;:46;:::i;:::-;3249:81;;;;3052:285;;;;:::o;2527:98:0:-;1648:9;;-1:-1:-1;;;;;1648:9:0;1634:10;:23;;:52;;-1:-1:-1;1661:25:0;:9;1675:10;1661:25;:13;:25;:::i;:::-;1626:117;;;;;;;-1:-1:-1;;;;;1626:117:0;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1626:117:0;;;;-1:-1:-1;;;;;;;;;;;1626:117:0;;;;;;;;;;;;;;;2594:24;:9;2608;2594:24;:13;:24;:::i;:::-;2527:98;:::o;7226:96::-;7270:8;;7264:3;:14;7260:56;;;7294:11;:9;:11::i;:::-;7226:96::o;583:23::-;;;;:::o;2631:100::-;1648:9;;-1:-1:-1;;;;;1648:9:0;1634:10;:23;;:52;;-1:-1:-1;1661:25:0;:9;1675:10;1661:25;:13;:25;:::i;:::-;1626:117;;;;;;;-1:-1:-1;;;;;1626:117:0;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1626:117:0;;;;-1:-1:-1;;;;;;;;;;;1626:117:0;;;;;;;;;;;;;;;2697:27;:9;2714;2697:27;:16;:27;:::i;1813:708::-;586:8:23;;-1:-1:-1;;;;;586:8:23;572:10;:22;564:31;;;;;;2088:21:0;-1:-1:-1;;;;;2133:20:0;;;;2125:58;;;;;-1:-1:-1;;;;;2125:58:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2201:23:0;;;;2193:64;;;;;-1:-1:-1;;;;;2193:64:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;2267:5;:35;;-1:-1:-1;;;;;2267:35:0;;;-1:-1:-1;;;;;;2267:35:0;;;;;;;2312:8;:45;;;;;;;;;;;;;;;2378:18;:9;2392:3;2378:18;:13;:18;:::i;:::-;2367:8;:29;2406:8;:20;;;2436:6;:16;;;2462:9;:22;;-1:-1:-1;;;;;;2462:22:0;-1:-1:-1;;;;;2462:22:0;;;;;;;;;;2494:8;:20;;-1:-1:-1;;2494:20:0;;;;;;;;;;;;;;;;;;;1403:12;1409:5;1403;:12::i;:::-;601:1:23;1813:708:0;;;;;;;;:::o;4717:782::-;1648:9;;5071:19;;;;;;-1:-1:-1;;;;;1648:9:0;1634:10;:23;;:52;;-1:-1:-1;1661:25:0;:9;1675:10;1661:25;:13;:25;:::i;:::-;1626:117;;;;;;;-1:-1:-1;;;;;1626:117:0;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1626:117:0;;;;-1:-1:-1;;;;;;;;;;;1626:117:0;;;;;;;;;;;;;;;4855:24;1157:18;;;;:5;:18;;;;;;1149:64;;;;;;;-1:-1:-1;;;;;1149:64:0;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1149:64:0;;;;-1:-1:-1;;;;;1149:64:0;;;;;;;;;;;;;;;4893:26;1285:18;;;;:5;:18;;;;;;1284:19;1276:56;;;;;-1:-1:-1;;;;;1276:56:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;4935:5;;:56;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4935:5:0;;;;:18;;4954:4;;4960:6;;4968:11;;4981:9;;4935:56;;;;;;;;;;;;;;;;;;;;;:5;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;4935:56:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4935:56:0;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;4935:56:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4935:56:0;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;4935:56:0;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4935:56:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;5005:7:0;;5016:8;;-1:-1:-1;5005:4:0;;-1:-1:-1;5010:1:0;;5005:7;;;;;;;;;;;-1:-1:-1;;;5005:7:0;;-1:-1:-1;;;5005:7:0;:19;;;;5001:369;;;5118:1;5109:10;;5104:114;5125:2;5121:1;:6;5104:114;;;5197:1;5201;5197:5;5175:6;5182:1;5175:9;;;;;;;;;;;;;;;5167:36;;;;;-1:-1:-1;;;5175:9:0;;;;;;;:16;;5167:36;5152:51;;;;;5129:3;;;;;;5104:114;;;5266:8;;:32;;;;;;;;;;;;;;-1:-1:-1;;;;;5266:8:0;;;;:19;;:32;;;;;;;;;;;;;;;:8;;:32;;;5:2:-1;;;;30:1;27;20:12;5:2;5266:32:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5266:32:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;5266:32:0;5313:5;;:46;;;;;;-1:-1:-1;;;;;5313:46:0;;;;;;;;;5266:32;;-1:-1:-1;5313:5:0;;;:29;;:46;;;;;:5;;:46;;;;;;;;:5;;:46;;;5:2:-1;;;;30:1;27;20:12;5:2;5313:46:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5313:46:0;;;;5001:369;5411:22;;5383:5;;:24;;;;;;;;-1:-1:-1;;;;;5383:5:0;;;;:22;;:24;;;;;;;;;;;;;;;:50;:5;:24;;;5:2:-1;;;;30:1;27;20:12;5:2;5383:24:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5383:24:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;5383:24:0;:50;5379:114;;;5449:33;5455:26;5449:5;:33::i;695:18::-;;;;;;;;;:::o;3343:369:8:-;3411:22;3443:18;3471:14;3495:19;3524:16;3550:15;3575:23;3615:26;3644:10;:8;:10::i;:::-;3615:39;-1:-1:-1;3671:34:8;3615:39;3694:10;3671:34;:22;:34;:::i;:::-;3664:41;;;;-1:-1:-1;3664:41:8;;-1:-1:-1;3664:41:8;;-1:-1:-1;3664:41:8;-1:-1:-1;3664:41:8;-1:-1:-1;3664:41:8;;-1:-1:-1;3343:369:8;-1:-1:-1;;;3343:369:8:o;443:39:0:-;;;-1:-1:-1;;;;;443:39:0;;:::o;488:31::-;;;;:::o;2737:228::-;2797:7;;-1:-1:-1;;;;;2797:7:0;2783:10;:21;2775:73;;;;;-1:-1:-1;;;;;2775:73:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2950:7;;-1:-1:-1;;;;;2950:7:0;2937:21;525:22;;;-1:-1:-1;;;;;525:22:0;;:::o;405:32::-;;;-1:-1:-1;;;;;405:32:0;;:::o;6357:724::-;6404:26;6564:31;1157:18;;;:5;:18;;;;6564:31;;6404:26;1157:18;;1149:64;;;;;;;-1:-1:-1;;;;;1149:64:0;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1149:64:0;;;;-1:-1:-1;;;;;1149:64:0;;;;;;;;;;;;;;;6473:21;;6454:16;;:40;6446:108;;;;;-1:-1:-1;;;;;6446:108:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6606:16;;6598:25;;;;:7;:25;;;;;;-1:-1:-1;6641:29:0;;:11;:29::i;:::-;6633:80;;;;;;;-1:-1:-1;;;;;6633:80:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6749:16;;;6723:207;;;;;;;;-1:-1:-1;;6723:207:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6749:16;;6723:207;;6749:16;6723:207;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;6779:14:0;;;6723:207;;;;;;;;;;;;;-1:-1:-1;;6723:207:0;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6723:207:0;;;6779:14;6723:207;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6807:14:0;;6835:15;;;;6864:23;;;;6901:19;;;6723:207;;;;;;;;-1:-1:-1;;6864:23:0;6723:207;;;6864:23;6723:207;;;;;;;;;;;;;;;;;;;;;;;;;;;6807:14;;-1:-1:-1;6835:15:0;;-1:-1:-1;6864:23:0;;;;;-1:-1:-1;6901:19:0;6723:207;;6901:19;6723:207;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:12;:207::i;:::-;6959:16;;:23;;6980:1;6959:23;:20;:23;:::i;:::-;6940:16;:42;;;7016:21;;6996:41;6992:83;;;7053:11;:9;:11::i;:::-;6357:724;;:::o;553:24::-;;;-1:-1:-1;;;;;553:24:0;;:::o;664:75:23:-;704:7;726:8;-1:-1:-1;;;;;726:8:23;664:75;:::o;612:21:0:-;;;;:::o;3920:791::-;4268:26;;:::i;:::-;1648:9;;-1:-1:-1;;;;;1648:9:0;1634:10;:23;;:52;;-1:-1:-1;1661:25:0;:9;1675:10;1661:25;:13;:25;:::i;:::-;1626:117;;;;;;;-1:-1:-1;;;;;1626:117:0;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1626:117:0;;;;-1:-1:-1;;;;;;;;;;;1626:117:0;;;;;;;;;;;;;;;4191:26;1157:18;;;;:5;:18;;;;;;1149:64;;;;;;;-1:-1:-1;;;;;1149:64:0;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1149:64:0;;;;-1:-1:-1;;;;;1149:64:0;;;;;;;;;;;;;;;4297:186;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4297:186:0;;;;;;;;;;;;4526:6;;4297:186;;-1:-1:-1;4228:24:0;;4501:21;4297:186;4501:19;:21::i;:::-;:31;4493:100;;;;;-1:-1:-1;;;;;4493:100:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4611:17;:6;:15;:17::i;:::-;4603:71;;;;;;;-1:-1:-1;;;;;4603:71:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4684:20;;:11;:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;4684:20:0;-1:-1:-1;;;;;4684:20:0;;;;;;;;;;;;;;;;;:11;:20;;;;;;;;:::i;:::-;;;;;1403:12;1409:5;1403;:12::i;7087:133::-;7149:4;7172:19;;;:7;:19;;;;;:29;;:36;;;;;;;;-1:-1:-1;;7172:36:0;;;;;:41;;;7087:133::o;2384:527:8:-;2435:29;;:::i;:::-;2507:26;2556:24;2747:17;2467:30;2486:10;2467:18;:30::i;:::-;2435:62;;2536:10;:8;:10::i;:::-;2507:39;;2583:10;:8;:10::i;:::-;2556:37;;2626:10;;2604:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2604:19:8;;;:32;;;;-1:-1:-1;2681:20:8;2604:19;2681:18;:20::i;:::-;2673:64;;;;;;;-1:-1:-1;;;;;2673:64:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;2767:24;:9;:22;:24::i;:::-;2747:44;-1:-1:-1;2801:25:8;:5;2816:9;2801:25;:14;:25;:::i;:::-;2841:29;;;;;;;;;;;;;;;;;;;;2848:9;;2859:10;;;;2841:29;;;;2859:10;;;;2841:29;;;;;;;;;;-1:-1:-1;2841:29:8;;-1:-1:-1;;;;;2841:29:8;2880:5;-1:-1:-1;;;;;2880:22:8;;:24;;;;;-1:-1:-1;;;2880:24:8;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2880:24:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;3893:531:8;3960:29;;:::i;:::-;4001:26;4050:24;4030:10;:8;:10::i;:::-;4001:39;;4077:10;:8;:10::i;:::-;4050:37;;4123:24;:5;:22;:24::i;:::-;4097:50;;4179:20;;;;;;;;-1:-1:-1;;;;;4179:18:8;;;;;:20;;;;;;;;;;;;;;4097:23;4179:18;:20;;;5:2:-1;;;;30:1;27;20:12;5:2;4179:20:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4179:20:8;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4179:20:8;;4157:19;;;:42;;;;4227:20;;;;;;;;-1:-1:-1;;;;;4227:18:8;;;;;:20;;;;;;;;;;;;:18;:20;;;5:2:-1;;;;30:1;27;20:12;5:2;4227:20:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4227:20:8;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4227:20:8;4209:15;;;;:38;;;;4280:24;;;;;;;-1:-1:-1;;;;;4280:22:8;;;;;:24;;;;;4227:20;;4280:24;;;;;;;4209:38;4280:22;:24;;;5:2:-1;;;;30:1;27;20:12;5:2;4280:24:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4280:24:8;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4280:24:8;4257:20;;;:47;4334:21;;;;;;;;-1:-1:-1;;;;;4334:19:8;;;;;:21;;;;;4280:24;;4334:21;;;;;;;4257:47;4334:19;:21;;;5:2:-1;;;;30:1;27;20:12;5:2;4334:21:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4334:21:8;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4334:21:8;4314:17;;;:41;-1:-1:-1;;;;;4365:26:8;;:16;;;:26;3893:531;;;;;:::o;983:363:9:-;1133:20;;1171:16;;;;;1205:12;;;;;1235:17;;;;;1270:14;;;;;1302:13;;;;;1099:230;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1099:230:9;;;;;;;;;;;26:21:-1;;;22:32;;6:49;;1099:230:9;;;;;;;;1076:263;;-1:-1:-1;;1099:230:9;;;1076:263;;;;;1099:230;1076:263;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;;;;365:33;;1076:263:9;;;;;;;;;;;;-1:-1:-1;;;;;983:363:9:o;725:166:20:-;809:4;-1:-1:-1;;;;;831:21:20;;;;823:30;;;;;;-1:-1:-1;;;;;;866:20:20;:11;:20;;;;;;;;;;;;;;;725:166::o;3811:184:9:-;3875:4;3914:74;3970:7;:17;;;3914:47;:22;3928:7;3914:13;:22::i;:::-;:45;:47::i;:::-;:55;:74;:55;:74;:::i;:::-;-1:-1:-1;;;;;3898:90:9;:7;:12;;;-1:-1:-1;;;;;3898:90:9;;3891:97;;3811:184;;;:::o;576:401::-;639:4;736:26;;:::i;:::-;659:13;;;;-1:-1:-1;;;;;659:27:9;;655:315;;;807:26;820:12;807;:26::i;:::-;783:20;796:6;783:12;:20::i;:::-;:50;;-1:-1:-1;776:57:9;;655:315;888:71;942:6;:16;;;888:45;:20;901:6;888:12;:20::i;:71::-;-1:-1:-1;;;;;871:88:9;:6;:13;;;-1:-1:-1;;;;;871:88:9;;864:95;;655:315;576:401;;;;:::o;1503:468::-;1593:17;1613:30;1632:10;1613:18;:30::i;:::-;1657:17;;1593:50;;-1:-1:-1;1677:1:9;-1:-1:-1;1653:231:9;;;1769:20;;;;;1731:24;;1719:37;;;;:11;;;;:37;;;;;;:47;;;;:70;1694:179;;;;;-1:-1:-1;;;;;1694:179:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;39:1;23:18;;;45:23;;-1:-1;1893:26:9;;;;;;;;;;;;;1929:22;;;:11;;;:22;;;;;;;:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1929:35:9;-1:-1:-1;;;;;1929:35:9;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;1503:468:9:o;7675:169:0:-;7729:5;:18;7740:5;7735:11;;;;;;;;7729:18;;;;;;;;;;;-1:-1:-1;7729:18:0;;;;7728:19;7720:52;;;;;-1:-1:-1;;;;;7720:52:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;7803:4;7782:5;:18;7793:5;7788:11;;;;;;;;7782:18;;;;;;;;;;;;:25;;;;;;;;;;;;;;;;;;7822:15;7831:5;7822:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;7675:169;:::o;7850:94::-;7932:5;7850:94;:::o;7950:92::-;8030:5;;-1:-1:-1;;;;;8030:5:0;7950:92;:::o;1977:136:9:-;2084:17;;2047:7;;2073:4;;-1:-1:-1;;2084:21:9;;;2073:33;;;;;;;;;;;;;;2066:40;;1977:136;;;:::o;1272:131:22:-;1330:7;1357:5;;;1376:6;;;;1368:15;;;;;;1397:1;1272:131;-1:-1:-1;;;1272:131:22:o;244:167:20:-;-1:-1:-1;;;;;316:21:20;;;;308:30;;;;;;353:18;357:4;363:7;353:3;:18::i;:::-;352:19;344:28;;;;;;-1:-1:-1;;;;;379:20:20;:11;:20;;;;;;;;;;;:27;;-1:-1:-1;;379:27:20;402:4;379:27;;;244:167::o;7328:341:0:-;7409:17;;7385:5;;:20;;;;;;;;7367:15;;;;7409:17;;-1:-1:-1;;;;;7385:5:0;;;;:18;;:20;;;;;;;;;;;;;;;7367:15;7385:5;:20;;;5:2:-1;;;;30:1;27;20:12;5:2;7385:20:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7385:20:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;7385:20:0;7480:19;;7455:5;;:21;;;;;;;;7385:41;;;;;-1:-1:-1;7480:19:0;;-1:-1:-1;;;;;7455:5:0;;;;:19;;7480;7455:21;;;;7385:20;;7455:21;;;;;;;7385:41;7455:5;:21;;;5:2:-1;;;;30:1;27;20:12;5:2;7455:21:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7455:21:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;7455:21:0;7509:9;:16;;-1:-1:-1;;7509:16:0;7521:4;7509:16;;;7455:44;;-1:-1:-1;7544:10:0;:25;;;;;7558:11;7544:25;7535:6;:34;;-1:-1:-1;;7535:34:0;;;;;;;;;;;;7579:8;;7588;;7598:6;;7579:34;;;:8;;;-1:-1:-1;;;7579:34:0;;;;;;;;;;;;;;;;;;7535;7606:6;;;;;;;;7579:34;;;;;;;;:8;;;;-1:-1:-1;;;;;7579:8:0;;:34;;;;;-1:-1:-1;;7579:34:0;;;;;;;;-1:-1:-1;7579:8:0;:34;;;5:2:-1;;;;30:1;27;20:12;5:2;7579:34:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;7637:8:0;;7647:6;;7655;;7628:34;;;;;;;;;;;;;7655:6;;;;;;7628:34;;;;;;;;;-1:-1:-1;7628:34:0;;;;;;;-1:-1:-1;7628:34:0;7328:341;;:::o;477:170:20:-;-1:-1:-1;;;;;552:21:20;;;;544:30;;;;;;588:18;592:4;598:7;588:3;:18::i;:::-;580:27;;;;;;;;-1:-1:-1;;;;;614:20:20;637:5;614:20;;;;;;;;;;;:28;;-1:-1:-1;;614:28:20;;;477:170::o;2119:574:9:-;2213:22;2449:18;;;:11;;;;:18;;;;;;;;2494:22;;2526:18;;;;2554:14;;;;;2578:19;;;;2607:16;;;;2633:15;;;;2658:18;;;2477:209;;;;;;;;;2633:15;2477:209;-1:-1:-1;;2477:209:9;;;;;;;;;;;;;;;;;;;;;;;;;;2213:22;;;;;;;;;;2377:23;;2449:18;;2494:22;;2526:18;;2554:14;;2578:19;;2607:16;;-1:-1:-1;;;;;2633:15:9;;;;2477:209;;2658:18;;2477:209;;2658:18;2477:209;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2119:574;;;;;;;;;;;:::o;979:1312:8:-;1172:32;1230:24;1444:13;2046:18;1207:13;:11;:13::i;:::-;1172:48;;1257:10;:8;:10::i;:::-;1230:37;;1332:21;1342:10;1332:9;:21::i;:::-;1324:79;;;;;;;-1:-1:-1;;;;;1324:79:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1460:240;1689:10;1460:220;1517:7;1542:5;1565:10;1593:6;1617:14;1483:162;;;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;1483:162:8;;;;;;;;;;-1:-1:-1;1483:162:8;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;1483:162:8;;;;;-1:-1:-1;1483:162:8;;;;;;;-1:-1:-1;1483:162:8;;-1:-1:-1;;;1483:162:8;;;;;;;;;;;26:21:-1;;;22:32;;6:49;;1483:162:8;;;;;;;;1460:195;;1483:162;;-1:-1:-1;1483:162:8;-1:-1:-1;1483:162:8;;1460:195;;;;;1483:162;1460:195;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;;;;365:33;;1460:195:8;;;;;;;;;;;-1:-1:-1;1460:218:8;;-1:-1:-1;;1460:220:8:i;:240::-;1444:256;;1737:5;-1:-1:-1;;;;;1737:32:8;;1770:5;1777:6;1737:47;;;;;-1:-1:-1;;;1737:47:8;;;;;;;-1:-1:-1;;;;;1737:47:8;-1:-1:-1;;;;;1737:47:8;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1737:47:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1737:47:8;;;;1845:14;1841:170;;;1875:5;-1:-1:-1;;;;;1875:19:8;;1895:8;1905:7;1914:5;1875:45;;;;;-1:-1:-1;;;1875:45:8;;;;;;;-1:-1:-1;;;;;1875:45:8;-1:-1:-1;;;;;1875:45:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1875:45:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1875:45:8;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1875:45:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1875:45:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1875:45:8;;;;1841:170;;;1951:5;-1:-1:-1;;;;;1951:16:8;;1968:8;1978:5;1985:7;1994:5;1951:49;;;;;-1:-1:-1;;;1951:49:8;;;;;;;-1:-1:-1;;;;;1951:49:8;-1:-1:-1;;;;;1951:49:8;;;;;;-1:-1:-1;;;;;1951:49:8;-1:-1:-1;;;;;1951:49:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1951:49:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1951:49:8;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1951:49:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1951:49:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1951:49:8;;;;1841:170;2067:5;-1:-1:-1;;;;;2067:15:8;;2096:10;2120:5;2139:6;2159:7;2180:14;2208:5;2227:10;2067:180;;;;;-1:-1:-1;;;2067:180:8;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2067:180:8;-1:-1:-1;;;;;2067:180:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;2067:180:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2067:180:8;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;2067:180:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2067:180:8;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;2067:180:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2067:180:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2067:180:8;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2067:180:8;2262:22;;;;;;;;2067:180;;-1:-1:-1;2262:22:8;;;;;;2067:180;2262:22;;;979:1312;;;;;;;;;;:::o;3478:327:9:-;3547:7;3630;:14;;;3662:7;:12;;;3692:7;:12;;;3722:7;:13;;;3753:7;:21;;;3596:192;;;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;3596:192:9;;;;;;;;;;-1:-1:-1;3596:192:9;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;3596:192:9;;;;;-1:-1:-1;3596:192:9;;;;;;;-1:-1:-1;3596:192:9;;-1:-1:-1;;;3596:192:9;;;;;;;;;;;26:21:-1;;;22:32;;6:49;;3596:192:9;;;;;;;;3573:225;;3596:192;;-1:-1:-1;3596:192:9;-1:-1:-1;3596:192:9;;3573:225;;;;;;3596:192;;3573:225;;58:11:-1;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;1705:277:21;1913:58;;;;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;1913:58:21;;;;;;;;1896:81;;1786:7;;1913:58;;;1896:81;;;;;1913:58;1896:81;66:2:-1;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;599:968:21;682:7;699:9;714;729:7;781:9;:16;801:2;781:22;;777:62;;;829:1;813:19;;;;777:62;-1:-1:-1;;;1115:4:21;1100:20;;1094:27;1154:4;1139:20;;1133:27;1201:4;1186:20;;1180:27;1177:1;1172:36;1315:2;1311:6;;;;1307:34;;;1332:2;1327:7;1307:34;1410:1;:7;;1415:2;1410:7;;:18;;;;;1421:1;:7;;1426:2;1421:7;;1410:18;1406:157;;;1454:1;1438:19;;;;1406:157;1532:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1532:24:21;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1532:24:21;;;;;;;;1525:31;;1406:157;599:968;;;;;;;:::o;8048:103:0:-;8136:8;;-1:-1:-1;;;;;8136:8:0;8048:103;:::o;3718:169:8:-;3774:4;3789:26;3818:10;:8;:10::i;:::-;3789:39;-1:-1:-1;3874:5:8;3846:24;3789:39;3846:22;:24::i;:::-;:33;;3718:169;-1:-1:-1;;;3718:169:8:o;92:8061:0:-;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;92:8061:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;92:8061:0;;;-1:-1:-1;92:8061:0;:::i;:::-;;;:::o;:::-;;;;;;;;;-1:-1:-1;92:8061:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;', 'source': "pragma solidity ^0.4.24;\n\nimport \"./MerkluxChain.sol\";\nimport \"./MerkluxStoreForCase.sol\";\n\ncontract MerkluxCase is Secondary, MerkluxVM {\n    using Roles for Roles.Role;\n    using Action for Action.Object;\n\n    enum Task {\n        INIT_BY_CONTRACT,\n        SUBMIT_ORIGINAL_BLOCK,\n        SUBMIT_TARGET_BLOCK,\n        SUBMIT_REFERENCE_DATA,\n        SUBMIT_STORE_DATA,\n        SUBMIT_DISPATCHES\n    }\n\n    MerkluxStoreForCase public store;\n    IMerkluxReducerRegistry public registry;\n    uint256 public currentActionNum;\n    address public accuser;\n    address public defendant;\n    bytes32 public original;\n    bytes32 public target;\n    uint256 public deadline;\n    bool public hasResult;\n    bool public result;\n    Block.Object private originalBlock;\n    Block.Object private targetBlock;\n    Roles.Role private attorneys;\n    Chain.Object private chain;\n    function(bytes32, bytes32, bool) external onResult;\n    mapping(uint => bool) todos;\n    mapping(uint256 => Action.Object) actions;\n\n    event TaskDone(Task _task);\n    event OnResult(bytes32 _original, bytes32 _target, bool _result);\n\n    modifier hasPredecessor(Task _task) {\n        require(todos[uint(_task)], \"Predecessor task is not completed\");\n        _;\n    }\n\n    modifier subTask(Task _task) {\n        require(!todos[uint(_task)], \"Task is already finished\");\n        _;\n    }\n\n    modifier task(Task _task) {\n        _;\n        _done(_task);\n    }\n\n    /**\n    * @dev Only the defendant can execute this function.\n    * If the defendant appoint attorneys, then they are also allowed to call this function\n    */\n    modifier onlyDefendant() {\n        require(msg.sender == defendant || attorneys.has(msg.sender), \"Only the defendant or attorneys can call this method\");\n        _;\n    }\n\n    constructor() public Secondary() {\n    }\n\n    function init(\n        address _store,\n        address _registry,\n        uint256 _duration,\n        bytes32 _original,\n        bytes32 _target,\n        address _defendant,\n        function(bytes32, bytes32, bool) external _onResult\n    )\n    public\n    onlyPrimary\n    task(Task.INIT_BY_CONTRACT)\n    {\n        require(_store != address(0), \"Not a valid store address\");\n        require(_registry != address(0), \"Not a valid registry address\");\n        store = MerkluxStoreForCase(_store);\n        registry = IMerkluxReducerRegistry(_registry);\n        deadline = _duration.add(now);\n        original = _original;\n        target = _target;\n        defendant = _defendant;\n        onResult = _onResult;\n    }\n\n    function appoint(address _attorney) public onlyDefendant {\n        attorneys.add(_attorney);\n    }\n\n    function cancel(address _attorney) public onlyDefendant {\n        attorneys.remove(_attorney);\n    }\n\n    function destroy() external {\n        require(msg.sender == accuser, \"Only the accuser can destruct this case\");\n        // TODO When it has the fraud state, innocent state, or on_going state\n        selfdestruct(accuser);\n    }\n\n    function submitOriginalBlock(\n        bytes32 _previousBlock,\n        uint256 _actionNum,\n        bytes32 _state,\n        bytes32 _references,\n        bytes32 _actions,\n        address _sealer,\n        bytes _signature\n    )\n    public\n    onlyDefendant\n    hasPredecessor(Task.INIT_BY_CONTRACT)\n    task(Task.SUBMIT_ORIGINAL_BLOCK)\n    {\n        Block.Object memory _block = Block.Object(\n            _previousBlock,\n            _actionNum,\n            _state,\n            _references,\n            _actions,\n            _sealer,\n            _signature\n        );\n        require(_block.getBlockHash() == original, \"Submitted block has different hash with the original block\");\n        require(_block.isSealed(), \"Signature for the original block is invalid\");\n        originalBlock = _block;\n        currentActionNum = _actionNum;\n        store.setActionNum(_actionNum);\n        store.initialize(_state);\n        chain.addBlock(_block);\n    }\n\n    function submitTargetBlock(\n        bytes32 _previousBlock,\n        uint256 _actionNum,\n        bytes32 _state,\n        bytes32 _references,\n        bytes32 _actions,\n        address _sealer,\n        bytes _signature\n    )\n    public\n    onlyDefendant\n    hasPredecessor(Task.SUBMIT_ORIGINAL_BLOCK)\n    task(Task.SUBMIT_TARGET_BLOCK)\n    {\n        Block.Object memory _block = Block.Object(\n            _previousBlock,\n            _actionNum,\n            _state,\n            _references,\n            _actions,\n            _sealer,\n            _signature\n        );\n        require(_block.getBlockHash() == target, \"Submitted block has different hash with the target block\");\n        require(_block.isSealed(), \"Signature for the target block is invalid\");\n        targetBlock = _block;\n    }\n\n    function submitReference(bytes _key, bytes _value, uint _branchMask, bytes32[] _siblings)\n    public\n    onlyDefendant\n    hasPredecessor(Task.SUBMIT_TARGET_BLOCK)\n    subTask(Task.SUBMIT_REFERENCE_DATA)\n    {\n        store.commitBranch(_key, _value, _branchMask, _siblings);\n        if (_key[0] == byte(38)) {\n            // It is a reducer\n            bytes32 reducerHash;\n            for (uint i = 0; i < 32; i++) {\n                reducerHash |= bytes32(_value[i] & 0xFF) >> (i * 8);\n            }\n\n            address deployedReducer = address(registry.getReducer(reducerHash));\n            store.registerDeployedReducer(deployedReducer);\n        }\n        if (store.getReferenceRoot() == targetBlock.references) {\n            _done(Task.SUBMIT_REFERENCE_DATA);\n        }\n    }\n\n    function submitAction(\n        bytes32 _prevBlock,\n        address _from,\n        uint256 _actionNum,\n        uint256 _nonce,\n        string _action,\n        bool _deployReducer,\n        bytes _data,\n        bytes _signature\n    ) public\n    onlyDefendant\n    hasPredecessor(Task.SUBMIT_REFERENCE_DATA)\n    {\n        Action.Object memory action = Action.Object(\n            _prevBlock,\n            _from,\n            _actionNum,\n            _nonce,\n            _action,\n            _deployReducer,\n            _data,\n            _signature\n        );\n        require(\n            originalBlock.actionNum <= _actionNum &&\n            _actionNum < targetBlock.actionNum,\n            \"Action number is not in the range\"\n        );\n        require(action.isSigned(), \"Signature for the action is invalid\");\n        actions[_actionNum] = action;\n    }\n\n    function runAction() public\n    hasPredecessor(Task.SUBMIT_REFERENCE_DATA)\n    {\n        require(currentActionNum < targetBlock.actionNum, \"Action number is above the target block's action number\");\n        Action.Object storage actionObj = actions[currentActionNum];\n        require(isSubmitted(currentActionNum), \"Data about the action is not submitted\");\n        super.reduce(\n            actionObj.action,\n            actionObj.data,\n            actionObj.base,\n            actionObj.nonce,\n            actionObj.deployReducer,\n            actionObj.signature\n        );\n        currentActionNum = currentActionNum.add(1);\n        if (currentActionNum == targetBlock.actionNum) {\n            _complete();\n        }\n    }\n\n    function isSubmitted(uint256 _actionNum) public view returns (bool) {\n        return actions[_actionNum].signature.length != 0;\n    }\n\n    function close() public {\n        if (now > deadline) {\n            _complete();\n        }\n    }\n\n    function _complete() private {\n        bool stateCheck = store.getStateRoot() == targetBlock.state;\n        bool actionCheck = store.getActionRoot() == targetBlock.actions;\n        hasResult = true;\n        result = stateCheck && actionCheck;\n        onResult(original, target, result);\n        emit OnResult(original, target, result);\n    }\n\n    function _done(Task _task) private {\n        require(!todos[uint(_task)], \"Task is already done\");\n        todos[uint(_task)] = true;\n        emit TaskDone(_task);\n    }\n\n    function getChain() internal view returns (Chain.Object storage) {\n        return chain;\n    }\n\n    function getStore() internal view returns (IMerkluxStoreForVM) {\n        return store;\n    }\n\n    function getRegistry() internal view returns (IMerkluxReducerRegistry) {\n        return registry;\n    }\n}\n" }, 'MerkluxCaseManager': { 'contractName': 'MerkluxCaseManager', 'abi': [{ 'constant': true, 'inputs': [], 'name': 'merkluxCaseCode', 'outputs': [{ 'name': '', 'type': 'bytes32' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': 'recipient', 'type': 'address' }], 'name': 'transferPrimary', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': true, 'inputs': [{ 'name': '', 'type': 'bytes32' }], 'name': 'cases', 'outputs': [{ 'name': 'accuser', 'type': 'address' }, { 'name': 'defendant', 'type': 'address' }, { 'name': 'merkluxCase', 'type': 'address' }, { 'name': 'store', 'type': 'address' }, { 'name': 'original', 'type': 'bytes32' }, { 'name': 'target', 'type': 'bytes32' }, { 'name': 'duration', 'type': 'uint256' }, { 'name': 'closed', 'type': 'bool' }, { 'name': 'result', 'type': 'bool' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'version', 'outputs': [{ 'name': '', 'type': 'string' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': '_code', 'type': 'bytes' }], 'name': 'registerReducer', 'outputs': [{ 'name': 'reducerKey', 'type': 'bytes32' }, { 'name': 'reducerAddress', 'type': 'address' }], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': true, 'inputs': [{ 'name': '_reducerKey', 'type': 'bytes32' }], 'name': 'isDeployed', 'outputs': [{ 'name': '', 'type': 'bool' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [{ 'name': '_reducerKey', 'type': 'bytes32' }], 'name': 'getReducer', 'outputs': [{ 'name': '', 'type': 'address' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'storeCode', 'outputs': [{ 'name': '', 'type': 'bytes32' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'primary', 'outputs': [{ 'name': '', 'type': 'address' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'inputs': [{ 'name': '_version', 'type': 'string' }, { 'name': '_merkluxCaseCode', 'type': 'bytes32' }, { 'name': '_storeCode', 'type': 'bytes32' }], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'constructor' }, { 'anonymous': false, 'inputs': [{ 'indexed': false, 'name': 'recipient', 'type': 'address' }], 'name': 'PrimaryTransferred', 'type': 'event' }, { 'constant': false, 'inputs': [{ 'name': '_original', 'type': 'bytes32' }, { 'name': '_target', 'type': 'bytes32' }, { 'name': '_defendant', 'type': 'address' }, { 'name': '_duration', 'type': 'uint256' }], 'name': 'createCase', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': '_target', 'type': 'bytes32' }, { 'name': '_bytecode', 'type': 'bytes' }], 'name': 'deployCase', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': '_caseHash', 'type': 'bytes32' }, { 'name': '_bytecode', 'type': 'bytes' }], 'name': 'deployStore', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': '_target', 'type': 'bytes32' }], 'name': 'openCase', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': '_original', 'type': 'bytes32' }, { 'name': '_target', 'type': 'bytes32' }, { 'name': '_result', 'type': 'bool' }], 'name': 'updateResult', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': true, 'inputs': [{ 'name': '_caseHash', 'type': 'bytes32' }], 'name': 'getMerkluxCase', 'outputs': [{ 'name': 'merkluxCase', 'type': 'address' }, { 'name': 'store', 'type': 'address' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }], 'bytecode': '0x60806040523480156200001157600080fd5b50604051620013fe380380620013fe83398101604081815282516020808501518386015160008054600160a060020a031916331790819055600160a060020a0316865293519290950194937f4101e71e974f68df5e9730cc223280b41654676bbb052cdcc735c3337e64d2d9929081900390910190a182516200009c906002906020860190620000ad565b506003919091556004555062000152565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000f057805160ff191683800117855562000120565b8280016001018555821562000120579182015b828111156200012057825182559160200191906001019062000103565b506200012e92915062000132565b5090565b6200014f91905b808211156200012e576000815560010162000139565b90565b61129c80620001626000396000f3006080604052600436106100da5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630187444a81146100df57806310f561111461013f5780631ab87d4a146101575780632348238c1461017e57806343b930f91461019f57806348ea1c23146101fd57806354fd4d501461026e57806364dc065c146102f85780636bf551a31461037257806374c0ff4f1461039c578063907490aa146103c85780639727f631146103fc578063a6a2620c1461041c578063c6dbdf6114610431578063f631dfc914610446575b600080fd5b3480156100eb57600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261013d9583359536956044949193909101919081908401838280828437509497506104849650505050505050565b005b34801561014b57600080fd5b5061013d6004356106d6565b34801561016357600080fd5b5061016c610a3e565b60408051918252519081900360200190f35b34801561018a57600080fd5b5061013d600160a060020a0360043516610a44565b3480156101ab57600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261013d958335953695604494919390910191908190840183828082843750949750610ad79650505050505050565b34801561020957600080fd5b50610215600435610d4f565b60408051600160a060020a039a8b168152988a1660208a015296891688880152949097166060870152608086019290925260a085015260c084015292151560e08301529115156101008201529051908190036101200190f35b34801561027a57600080fd5b50610283610daf565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102bd5781810151838201526020016102a5565b50505050905090810190601f1680156102ea5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561030457600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610351943694929360249392840191908190840183828082843750949750610e3a9650505050505050565b60408051928352600160a060020a0390911660208301528051918290030190f35b34801561037e57600080fd5b5061013d600435602435600160a060020a0360443516606435610f0d565b3480156103a857600080fd5b506103b4600435610fdb565b604080519115158252519081900360200190f35b3480156103d457600080fd5b506103e0600435610ff8565b60408051600160a060020a039092168252519081900360200190f35b34801561040857600080fd5b5061013d6004356024356044351515611013565b34801561042857600080fd5b5061016c61116d565b34801561043d57600080fd5b506103e0611173565b34801561045257600080fd5b5061045e600435611182565b60408051600160a060020a03938416815291909216602082015281519081900390910190f35b6000828152600560205260409020548290600160a060020a0316331461051a576040805160e560020a62461bcd02815260206004820152602760248201527f4f6e6c792074686520616363757365722063616e2063616c6c2074686973206660448201527f756e6374696f6e00000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600083815260056020526040902060020154600160a060020a0316156105b0576040805160e560020a62461bcd02815260206004820152602760248201527f4361736520697320616c7265616479206465706c6f79656420666f722074686560448201527f2074617267657400000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b816040518082805190602001908083835b602083106105e05780518252601f1990920191602091820191016105c1565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912060035414925061068c915050576040805160e560020a62461bcd02815260206004820152603f60248201527f5375626d69747465642062797465636f646520697320646966666572656e742060448201527f7769746820746865207374616e64617264206361736520636f6e747261637400606482015290519081900360840190fd5b6106958261125f565b600093845260056020526040909320600201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909416939093179092555050565b60008181526005602052604081205481908390600160a060020a0316331461076e576040805160e560020a62461bcd02815260206004820152602760248201527f4f6e6c792074686520616363757365722063616e2063616c6c2074686973206660448201527f756e6374696f6e00000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60008481526005602052604090206002810154600390910154600160a060020a0391821694501691508215156107ee576040805160e560020a62461bcd02815260206004820152601460248201527f43617365206973206e6f74206465706c6f796564000000000000000000000000604482015290519081900360640190fd5b600160a060020a038216151561084e576040805160e560020a62461bcd02815260206004820152601560248201527f53746f7265206973206e6f74206465706c6f7965640000000000000000000000604482015290519081900360640190fd5b81600160a060020a0316632348238c846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082600160a060020a0316600160a060020a03168152602001915050600060405180830381600087803b1580156108c257600080fd5b505af11580156108d6573d6000803e3d6000fd5b505050600085815260056020819052604080832060068101546004808301549483015460019093015484517f5810ddb7000000000000000000000000000000000000000000000000000000008152600160a060020a038b811693820193909352306024820181905260448201949094526064810196909652608486019390935291821660a485015268010000000000000000640100000000909102639727f631170260c484015290519087169350635810ddb79260e48084019391929182900301818387803b1580156109a857600080fd5b505af11580156109bc573d6000803e3d6000fd5b5050604080517f2348238c0000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a0387169350632348238c9250602480830192600092919082900301818387803b158015610a2057600080fd5b505af1158015610a34573d6000803e3d6000fd5b5050505050505050565b60035481565b600054600160a060020a03163314610a5b57600080fd5b600160a060020a0381161515610a7057600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03838116919091179182905560408051929091168252517f4101e71e974f68df5e9730cc223280b41654676bbb052cdcc735c3337e64d2d9916020908290030190a150565b6000828152600560205260409020548290600160a060020a03163314610b6d576040805160e560020a62461bcd02815260206004820152602760248201527f4f6e6c792074686520616363757365722063616e2063616c6c2074686973206660448201527f756e6374696f6e00000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600083815260056020526040902060030154600160a060020a031615610c03576040805160e560020a62461bcd02815260206004820152602660248201527f53746f726520666f7220746865206361736520697320616c726561647920646560448201527f706c6f7965640000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b816040518082805190602001908083835b60208310610c335780518252601f199092019160209182019101610c14565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120600454149250610d05915050576040805160e560020a62461bcd02815260206004820152604960248201527f5375626d69747465642062797465636f646520697320646966666572656e742060448201527f7769746820746865207374616e646172642073746f726520666f72206361736560648201527f20636f6e74726163740000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b610d0e8261125f565b600093845260056020526040909320600301805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909416939093179092555050565b600560208190526000918252604090912080546001820154600283015460038401546004850154958501546006860154600790960154600160a060020a039586169794861696938616959092169392909160ff8082169161010090041689565b6002805460408051602060018416156101000260001901909316849004601f81018490048402820184019092528181529291830182828015610e325780601f10610e0757610100808354040283529160200191610e32565b820191906000526020600020905b815481529060010190602001808311610e1557829003601f168201915b505050505081565b600080826040518082805190602001908083835b60208310610e6d5780518252601f199092019160209182019101610e4e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209150610ea582610fdb565b15610ec85750600081815260016020526040902054600160a060020a0316610f08565b8251602084016000f06000838152600160205260409020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03831617905590505b915091565b600083815260056020526040902054600160a060020a031615610f7a576040805160e560020a62461bcd02815260206004820152601a60248201527f41636375736572206164647265737320697320696e76616c6964000000000000604482015290519081900360640190fd5b600083815260056020819052604090912080543373ffffffffffffffffffffffffffffffffffffffff19918216178255600482019690965590810193909355600183018054909416600160a060020a03929092169190911790925560060155565b600090815260016020526040902054600160a060020a0316151590565b600090815260016020526040902054600160a060020a031690565b600082815260056020526040902060020154600160a060020a031633146110aa576040805160e560020a62461bcd02815260206004820152602d60248201527f4f6e6c7920746865206361736520636f6e74726163742063616e2063616c6c2060448201527f746869732066756e6374696f6e00000000000000000000000000000000000000606482015290519081900360840190fd5b6000828152600560205260409020600401548314611138576040805160e560020a62461bcd02815260206004820152602160248201527f4f726967696e616c2d74617267657420706169722073686f756c64206d61746360448201527f6800000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60009182526005602052604090912060070180549115156101000261ff001960ff199093166001179290921691909117905550565b60045481565b600054600160a060020a031690565b60008181526005602052604090206002810154600390910154600160a060020a0391821691168115156111ff576040805160e560020a62461bcd02815260206004820152601460248201527f43617365206973206e6f74206465706c6f796564000000000000000000000000604482015290519081900360640190fd5b600160a060020a0381161515610f08576040805160e560020a62461bcd02815260206004820152601560248201527f53746f7265206973206e6f74206465706c6f7965640000000000000000000000604482015290519081900360640190fd5b60008151602083016000f0929150505600a165627a7a723058209e01611f8dc65775579a12f6f16944aa048a1ab0e82cc853d5332661c4c421ba0029', 'deployedBytecode': '0x6080604052600436106100da5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630187444a81146100df57806310f561111461013f5780631ab87d4a146101575780632348238c1461017e57806343b930f91461019f57806348ea1c23146101fd57806354fd4d501461026e57806364dc065c146102f85780636bf551a31461037257806374c0ff4f1461039c578063907490aa146103c85780639727f631146103fc578063a6a2620c1461041c578063c6dbdf6114610431578063f631dfc914610446575b600080fd5b3480156100eb57600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261013d9583359536956044949193909101919081908401838280828437509497506104849650505050505050565b005b34801561014b57600080fd5b5061013d6004356106d6565b34801561016357600080fd5b5061016c610a3e565b60408051918252519081900360200190f35b34801561018a57600080fd5b5061013d600160a060020a0360043516610a44565b3480156101ab57600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261013d958335953695604494919390910191908190840183828082843750949750610ad79650505050505050565b34801561020957600080fd5b50610215600435610d4f565b60408051600160a060020a039a8b168152988a1660208a015296891688880152949097166060870152608086019290925260a085015260c084015292151560e08301529115156101008201529051908190036101200190f35b34801561027a57600080fd5b50610283610daf565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102bd5781810151838201526020016102a5565b50505050905090810190601f1680156102ea5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561030457600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610351943694929360249392840191908190840183828082843750949750610e3a9650505050505050565b60408051928352600160a060020a0390911660208301528051918290030190f35b34801561037e57600080fd5b5061013d600435602435600160a060020a0360443516606435610f0d565b3480156103a857600080fd5b506103b4600435610fdb565b604080519115158252519081900360200190f35b3480156103d457600080fd5b506103e0600435610ff8565b60408051600160a060020a039092168252519081900360200190f35b34801561040857600080fd5b5061013d6004356024356044351515611013565b34801561042857600080fd5b5061016c61116d565b34801561043d57600080fd5b506103e0611173565b34801561045257600080fd5b5061045e600435611182565b60408051600160a060020a03938416815291909216602082015281519081900390910190f35b6000828152600560205260409020548290600160a060020a0316331461051a576040805160e560020a62461bcd02815260206004820152602760248201527f4f6e6c792074686520616363757365722063616e2063616c6c2074686973206660448201527f756e6374696f6e00000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600083815260056020526040902060020154600160a060020a0316156105b0576040805160e560020a62461bcd02815260206004820152602760248201527f4361736520697320616c7265616479206465706c6f79656420666f722074686560448201527f2074617267657400000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b816040518082805190602001908083835b602083106105e05780518252601f1990920191602091820191016105c1565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912060035414925061068c915050576040805160e560020a62461bcd02815260206004820152603f60248201527f5375626d69747465642062797465636f646520697320646966666572656e742060448201527f7769746820746865207374616e64617264206361736520636f6e747261637400606482015290519081900360840190fd5b6106958261125f565b600093845260056020526040909320600201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909416939093179092555050565b60008181526005602052604081205481908390600160a060020a0316331461076e576040805160e560020a62461bcd02815260206004820152602760248201527f4f6e6c792074686520616363757365722063616e2063616c6c2074686973206660448201527f756e6374696f6e00000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60008481526005602052604090206002810154600390910154600160a060020a0391821694501691508215156107ee576040805160e560020a62461bcd02815260206004820152601460248201527f43617365206973206e6f74206465706c6f796564000000000000000000000000604482015290519081900360640190fd5b600160a060020a038216151561084e576040805160e560020a62461bcd02815260206004820152601560248201527f53746f7265206973206e6f74206465706c6f7965640000000000000000000000604482015290519081900360640190fd5b81600160a060020a0316632348238c846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082600160a060020a0316600160a060020a03168152602001915050600060405180830381600087803b1580156108c257600080fd5b505af11580156108d6573d6000803e3d6000fd5b505050600085815260056020819052604080832060068101546004808301549483015460019093015484517f5810ddb7000000000000000000000000000000000000000000000000000000008152600160a060020a038b811693820193909352306024820181905260448201949094526064810196909652608486019390935291821660a485015268010000000000000000640100000000909102639727f631170260c484015290519087169350635810ddb79260e48084019391929182900301818387803b1580156109a857600080fd5b505af11580156109bc573d6000803e3d6000fd5b5050604080517f2348238c0000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a0387169350632348238c9250602480830192600092919082900301818387803b158015610a2057600080fd5b505af1158015610a34573d6000803e3d6000fd5b5050505050505050565b60035481565b600054600160a060020a03163314610a5b57600080fd5b600160a060020a0381161515610a7057600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03838116919091179182905560408051929091168252517f4101e71e974f68df5e9730cc223280b41654676bbb052cdcc735c3337e64d2d9916020908290030190a150565b6000828152600560205260409020548290600160a060020a03163314610b6d576040805160e560020a62461bcd02815260206004820152602760248201527f4f6e6c792074686520616363757365722063616e2063616c6c2074686973206660448201527f756e6374696f6e00000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600083815260056020526040902060030154600160a060020a031615610c03576040805160e560020a62461bcd02815260206004820152602660248201527f53746f726520666f7220746865206361736520697320616c726561647920646560448201527f706c6f7965640000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b816040518082805190602001908083835b60208310610c335780518252601f199092019160209182019101610c14565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120600454149250610d05915050576040805160e560020a62461bcd02815260206004820152604960248201527f5375626d69747465642062797465636f646520697320646966666572656e742060448201527f7769746820746865207374616e646172642073746f726520666f72206361736560648201527f20636f6e74726163740000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b610d0e8261125f565b600093845260056020526040909320600301805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909416939093179092555050565b600560208190526000918252604090912080546001820154600283015460038401546004850154958501546006860154600790960154600160a060020a039586169794861696938616959092169392909160ff8082169161010090041689565b6002805460408051602060018416156101000260001901909316849004601f81018490048402820184019092528181529291830182828015610e325780601f10610e0757610100808354040283529160200191610e32565b820191906000526020600020905b815481529060010190602001808311610e1557829003601f168201915b505050505081565b600080826040518082805190602001908083835b60208310610e6d5780518252601f199092019160209182019101610e4e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209150610ea582610fdb565b15610ec85750600081815260016020526040902054600160a060020a0316610f08565b8251602084016000f06000838152600160205260409020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03831617905590505b915091565b600083815260056020526040902054600160a060020a031615610f7a576040805160e560020a62461bcd02815260206004820152601a60248201527f41636375736572206164647265737320697320696e76616c6964000000000000604482015290519081900360640190fd5b600083815260056020819052604090912080543373ffffffffffffffffffffffffffffffffffffffff19918216178255600482019690965590810193909355600183018054909416600160a060020a03929092169190911790925560060155565b600090815260016020526040902054600160a060020a0316151590565b600090815260016020526040902054600160a060020a031690565b600082815260056020526040902060020154600160a060020a031633146110aa576040805160e560020a62461bcd02815260206004820152602d60248201527f4f6e6c7920746865206361736520636f6e74726163742063616e2063616c6c2060448201527f746869732066756e6374696f6e00000000000000000000000000000000000000606482015290519081900360840190fd5b6000828152600560205260409020600401548314611138576040805160e560020a62461bcd02815260206004820152602160248201527f4f726967696e616c2d74617267657420706169722073686f756c64206d61746360448201527f6800000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60009182526005602052604090912060070180549115156101000261ff001960ff199093166001179290921691909117905550565b60045481565b600054600160a060020a031690565b60008181526005602052604090206002810154600390910154600160a060020a0391821691168115156111ff576040805160e560020a62461bcd02815260206004820152601460248201527f43617365206973206e6f74206465706c6f796564000000000000000000000000604482015290519081900360640190fd5b600160a060020a0381161515610f08576040805160e560020a62461bcd02815260206004820152601560248201527f53746f7265206973206e6f74206465706c6f7965640000000000000000000000604482015290519081900360640190fd5b60008151602083016000f0929150505600a165627a7a723058209e01611f8dc65775579a12f6f16944aa048a1ab0e82cc853d5332661c4c421ba0029', 'sourceMap': '439:4106:1:-;;;1058:206;8:9:-1;5:2;;;30:1;27;20:12;5:2;1058:206:1;;;;;;;;;;;;;;;;;;;;;;;;;;;385:8:23;:21;;-1:-1:-1;;;;;;385:21:23;396:10;385:21;;;;;-1:-1:-1;;;;;436:8:23;417:28;;;;1058:206:1;;;;;;417:28:23;;;;;;;;;;;1163:18:1;;;;:7;;:18;;;;;:::i;:::-;-1:-1:-1;1191:15:1;:34;;;;1235:9;:22;-1:-1:-1;439:4106:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;439:4106:1;;;-1:-1:-1;439:4106:1;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;', 'deployedSourceMap': '439:4106:1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1731:555;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1731:555:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1731:555:1;;-1:-1:-1;1731:555:1;;-1:-1:-1;;;;;;;1731:555:1;;;2853:755;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2853:755:1;;;;;784:30;;8:9:-1;5:2;;;30:1;27;20:12;5:2;784:30:1;;;;;;;;;;;;;;;;;;;;855:171:23;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;855:171:23;-1:-1:-1;;;;;855:171:23;;;;;2292:555:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2292:555:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2292:555:1;;-1:-1:-1;2292:555:1;;-1:-1:-1;;;;;;;2292:555:1;850:37;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;850:37:1;;;;;;;;;-1:-1:-1;;;;;850:37:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;757:21;;8:9:-1;5:2;;;30:1;27;20:12;5:2;757:21:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;757:21:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;354:609:5;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;354:609:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;354:609:5;;-1:-1:-1;354:609:5;;-1:-1:-1;;;;;;;354:609:5;;;;;;;;-1:-1:-1;;;;;354:609:5;;;;;;;;;;;;;;;;1270:455:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1270:455:1;;;;;-1:-1:-1;;;;;1270:455:1;;;;;;;1098:136:5;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1098:136:5;;;;;;;;;;;;;;;;;;;;;;;969:123;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;969:123:5;;;;;;;;;-1:-1:-1;;;;;969:123:5;;;;;;;;;;;;;;3614:367:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3614:367:1;;;;;;;;;;;820:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;820:24:1;;;;664:75:23;;8:9:-1;5:2;;;30:1;27;20:12;5:2;664:75:23;;;;3987:330:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3987:330:1;;;;;;;;;-1:-1:-1;;;;;3987:330:1;;;;;;;;;;;;;;;;;;;;;;;;1731:555;952:16;;;;:5;:16;;;;;:24;1804:7;;-1:-1:-1;;;;;952:24:1;980:10;952:38;944:90;;;;;-1:-1:-1;;;;;944:90:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1910:1;1872:14;;;:5;:14;;;;;:26;;;-1:-1:-1;;;;;1872:26:1;:40;1864:92;;;;;-1:-1:-1;;;;;1864:92:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2089:9;2079:20;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;;;;365:33;;2079:20:1;;;;;;;;;;2060:15;;:39;;-1:-1:-1;2052:115:1;;-1:-1:-1;;2052:115:1;;;;-1:-1:-1;;;;;2052:115:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2241:38;2269:9;2241:27;:38::i;:::-;2212:14;;;;:5;:14;;;;;;:26;;:67;;-1:-1:-1;;2212:67:1;-1:-1:-1;;;;;2212:67:1;;;;;;;;;;-1:-1:-1;;1731:555:1:o;2853:755::-;2976:19;952:16;;;:5;:16;;;;;:24;2976:19;;2907:7;;-1:-1:-1;;;;;952:24:1;980:10;952:38;944:90;;;;;-1:-1:-1;;;;;944:90:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2998:14;;;;:5;:14;;;;;:26;;;;3050:20;;;;;-1:-1:-1;;;;;2998:26:1;;;;-1:-1:-1;3050:20:1;;-1:-1:-1;3088:25:1;;;3080:58;;;;;-1:-1:-1;;;;;3080:58:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3156:19:1;;;;3148:53;;;;;-1:-1:-1;;;;;3148:53:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;3231:5;-1:-1:-1;;;;;3211:42:1;;3254:11;3211:55;;;;;;;;;;;;;-1:-1:-1;;;;;3211:55:1;-1:-1:-1;;;;;3211:55:1;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3211:55:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;;3365:14:1;;;;:5;:14;;;;;;;;:23;;;;3402;;;;;3439:21;;;;3474:24;;;;;3276:263;;;;;-1:-1:-1;;;;;3276:263:1;;;;;;;;;;3346:4;3276:263;;;;;;;;;;;;;;;;;;;;;;;;;;;3474:24;;;3276:263;;;;;;;;;3512:17;3276:263;;;;;;;;:29;;;;-1:-1:-1;3276:29:1;;:263;;;;;3365:14;;3276:263;;;;;;3365:14;3276:29;:263;;;5:2:-1;;;;30:1;27;20:12;5:2;3276:263:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;3549:52:1;;;;;;3590:10;3549:52;;;;;;-1:-1:-1;;;;;3549:40:1;;;-1:-1:-1;3549:40:1;;-1:-1:-1;3549:52:1;;;;;-1:-1:-1;;3549:52:1;;;;;;;-1:-1:-1;3549:40:1;:52;;;5:2:-1;;;;30:1;27;20:12;5:2;3549:52:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3549:52:1;;;;2853:755;;;;:::o;784:30::-;;;;:::o;855:171:23:-;586:8;;-1:-1:-1;;;;;586:8:23;572:10;:22;564:31;;;;;;-1:-1:-1;;;;;932:23:23;;;;924:32;;;;;;962:8;:20;;-1:-1:-1;;962:20:23;-1:-1:-1;;;;;962:20:23;;;;;;;;;;;993:28;;;1012:8;;;;993:28;;;;;;;;;;;;;855:171;:::o;2292:555:1:-;952:16;;;;:5;:16;;;;;:24;2368:9;;-1:-1:-1;;;;;952:24:1;980:10;952:38;944:90;;;;;-1:-1:-1;;;;;944:90:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2472:1;2438:16;;;:5;:16;;;;;:22;;;-1:-1:-1;;;;;2438:22:1;:36;2430:87;;;;;-1:-1:-1;;;;;2430:87:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2644:9;2634:20;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;;;;365:33;;2634:20:1;;;;;;;;;;2621:9;;:33;;-1:-1:-1;2613:119:1;;-1:-1:-1;;2613:119:1;;;;-1:-1:-1;;;;;2613:119:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2802:38;2830:9;2802:27;:38::i;:::-;2777:16;;;;:5;:16;;;;;;:22;;:63;;-1:-1:-1;;2777:63:1;-1:-1:-1;;;;;2777:63:1;;;;;;;;;;-1:-1:-1;;2292:555:1:o;850:37::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;850:37:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;757:21::-;;;;;;;;;;;;;;-1:-1:-1;;757:21:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;354:609:5:-;408:18;428:22;549:5;539:16;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;539:16:5;;;;;;;;;;;;;;;;526:29;;569:22;580:10;569;:22::i;:::-;565:392;;;-1:-1:-1;635:20:5;;;;:8;:20;;;;;;-1:-1:-1;;;;;635:20:5;607:50;;565:392;789:5;783:12;776:4;769:5;765:16;762:1;755:41;844:20;;;;:8;:20;;;;;:53;;-1:-1:-1;;844:53:5;-1:-1:-1;;;;;844:53:5;;;;;;-1:-1:-1;565:392:5;354:609;;;:::o;1270:455:1:-;1462:1;1428:14;;;:5;:14;;;;;:22;-1:-1:-1;;;;;1428:22:1;:36;1420:75;;;;;-1:-1:-1;;;;;1420:75:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;1505:14;;;;:5;:14;;;;;;;;:35;;1530:10;-1:-1:-1;;1505:35:1;;;;;;1550:23;;;:35;;;;1595:21;;;:31;;;;-1:-1:-1;1636:24:1;;:37;;;;;-1:-1:-1;;;;;1636:37:1;;;;;;;;;;;1683:23;;:35;1270:455::o;1098:136:5:-;1160:4;1191:21;;;:8;:21;;;;;;-1:-1:-1;;;;;1191:21:5;1183:44;;;1098:136::o;969:123::-;1031:14;1064:21;;;:8;:21;;;;;;-1:-1:-1;;;;;1064:21:5;;969:123::o;3614:367:1:-;3713:14;;;;:5;:14;;;;;:26;;;-1:-1:-1;;;;;3713:26:1;3743:10;3713:40;3705:98;;;;;-1:-1:-1;;;;;3705:98:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3821:36;:14;;;:5;:14;;;;;:23;;;:36;;3813:82;;;;;-1:-1:-1;;;;;3813:82:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3905:14;;;;:5;:14;;;;;;:21;;:28;;3943:31;;;3905:28;3943:31;-1:-1:-1;;;;3905:28:1;;;3929:4;3905:28;3943:31;;;;;;;;;;-1:-1:-1;3614:367:1:o;820:24::-;;;;:::o;664:75:23:-;704:7;726:8;-1:-1:-1;;;;;726:8:23;664:75;:::o;3987:330:1:-;4051:19;4111:16;;;:5;:16;;;;;:28;;;;4157:22;;;;;-1:-1:-1;;;;;4111:28:1;;;;4157:22;4197:25;;;4189:58;;;;;-1:-1:-1;;;;;4189:58:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4265:19:1;;;;4257:53;;;;;-1:-1:-1;;;;;4257:53:1;;;;;;;;;;;;;;;;;;;;;;;;;;;4323:219;4394:17;4515:9;4509:16;4502:4;4491:9;4487:20;4484:1;4477:49;4464:62;4450:86;-1:-1:-1;;4450:86:1:o', 'source': 'pragma solidity ^0.4.24;\n\nimport "openzeppelin-solidity/contracts/ownership/Secondary.sol";\nimport "./MerkluxVM.sol";\nimport "./MerkluxCase.sol";\nimport "./MerkluxStoreForCase.sol";\nimport "./MerkluxReducerRegistry.sol";\n\n\n/**\n * @title Merklux\n * @dev Merklux is a state management smart contract to control the state with a\n * unidirectional data flow. It can be used for state verifications accross evm\n * based block merkluxCases.\n */\ncontract MerkluxCaseManager is Secondary, MerkluxReducerRegistry {\n    struct Case {\n        address accuser;\n        address defendant;\n        address merkluxCase;\n        address store;\n        bytes32 original;\n        bytes32 target;\n        uint256 duration;\n        bool closed;\n        bool result;\n    }\n\n    string public version;\n    bytes32 public merkluxCaseCode;\n    bytes32 public storeCode;\n    mapping(bytes32 => Case) public cases;\n\n    modifier onlyAccuser(bytes32 _caseHash) {\n        require(cases[_caseHash].accuser == msg.sender, "Only the accuser can call this function");\n        _;\n    }\n\n    constructor (string _version, bytes32 _merkluxCaseCode, bytes32 _storeCode) public Secondary() {\n        version = _version;\n        merkluxCaseCode = _merkluxCaseCode;\n        storeCode = _storeCode;\n    }\n\n    function createCase(\n        bytes32 _original,\n        bytes32 _target,\n        address _defendant,\n        uint256 _duration\n    ) public {\n        require(cases[_target].accuser == address(0), "Accuser address is invalid");\n        cases[_target].accuser = msg.sender;\n        cases[_target].original = _original;\n        cases[_target].target = _target;\n        cases[_target].defendant = _defendant;\n        cases[_target].duration = _duration;\n    }\n\n    function deployCase(bytes32 _target, bytes _bytecode) public onlyAccuser(_target) {\n        // Should not be deployed before\n        require(cases[_target].merkluxCase == address(0), "Case is already deployed for the target");\n        // hash value of the bytecode to deploy should be same with the configuration\n        require(merkluxCaseCode == keccak256(_bytecode), "Submitted bytecode is different with the standard case contract");\n        // deploy and save address\n        cases[_target].merkluxCase = _deployContractWithByteCode(_bytecode);\n    }\n\n    function deployStore(bytes32 _caseHash, bytes _bytecode) public onlyAccuser(_caseHash) {\n        // Should not be deployed before\n        require(cases[_caseHash].store == address(0), "Store for the case is already deployed");\n        // hash value of the bytecode to deploy should be same with the configuration\n        require(storeCode == keccak256(_bytecode), "Submitted bytecode is different with the standard store for case contract");\n        // deploy and save address\n        cases[_caseHash].store = _deployContractWithByteCode(_bytecode);\n    }\n\n    function openCase(bytes32 _target) public onlyAccuser(_target) {\n        // Both contract should be deployed first\n        address merkluxCase = cases[_target].merkluxCase;\n        address store = cases[_target].store;\n        require(merkluxCase != address(0), "Case is not deployed");\n        require(store != address(0), "Store is not deployed");\n        MerkluxStoreForCase(store).transferPrimary(merkluxCase);\n        MerkluxCase(merkluxCase).init(\n            store,\n            address(this),\n            cases[_target].duration,\n            cases[_target].original,\n            cases[_target].target,\n            cases[_target].defendant,\n            this.updateResult\n        );\n        MerkluxCase(merkluxCase).transferPrimary(msg.sender);\n    }\n\n    function updateResult(bytes32 _original, bytes32 _target, bool _result) external {\n        require(cases[_target].merkluxCase == msg.sender, "Only the case contract can call this function");\n        require(cases[_target].original == _original, "Original-target pair should match");\n        cases[_target].closed = true;\n        cases[_target].result = _result;\n    }\n\n    function getMerkluxCase(bytes32 _caseHash) public view returns (address merkluxCase, address store) {\n        merkluxCase = cases[_caseHash].merkluxCase;\n        store = cases[_caseHash].store;\n        require(merkluxCase != address(0), "Case is not deployed");\n        require(store != address(0), "Store is not deployed");\n    }\n\n    function _deployContractWithByteCode(bytes _bytecode) private returns (address _deployed) {\n        // Deploy\n        assembly {\n            _deployed := create(0, add(_bytecode, 0x20), mload(_bytecode))\n        }\n    }\n\n}\n' }, 'MerkluxChain': { 'contractName': 'MerkluxChain', 'abi': [{ 'constant': true, 'inputs': [], 'name': 'getBlockHashToSeal', 'outputs': [{ 'name': '', 'type': 'bytes32' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': 'recipient', 'type': 'address' }], 'name': 'transferPrimary', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'getDataForNewAction', 'outputs': [{ 'name': 'prevBlockHash', 'type': 'bytes32' }, { 'name': 'nonce', 'type': 'uint256' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [{ 'name': '_blockHash', 'type': 'bytes32' }], 'name': 'getBlock', 'outputs': [{ 'name': '_previousBlock', 'type': 'bytes32' }, { 'name': '_actionNum', 'type': 'uint256' }, { 'name': '_state', 'type': 'bytes32' }, { 'name': '_references', 'type': 'bytes32' }, { 'name': '_actions', 'type': 'bytes32' }, { 'name': '_sealer', 'type': 'address' }, { 'name': '_signature', 'type': 'bytes' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'registry', 'outputs': [{ 'name': '', 'type': 'address' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'store', 'outputs': [{ 'name': '', 'type': 'address' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'primary', 'outputs': [{ 'name': '', 'type': 'address' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': '_signature', 'type': 'bytes' }], 'name': 'seal', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'inputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'constructor' }, { 'anonymous': false, 'inputs': [{ 'indexed': false, 'name': '_actionHash', 'type': 'bytes32' }], 'name': 'Dispatched', 'type': 'event' }, { 'anonymous': false, 'inputs': [{ 'indexed': false, 'name': '_blockHash', 'type': 'bytes32' }, { 'indexed': false, 'name': '_signature', 'type': 'bytes' }], 'name': 'Sealed', 'type': 'event' }, { 'anonymous': false, 'inputs': [{ 'indexed': false, 'name': 'recipient', 'type': 'address' }], 'name': 'PrimaryTransferred', 'type': 'event' }, { 'constant': false, 'inputs': [{ 'name': '_store', 'type': 'address' }, { 'name': '_registry', 'type': 'address' }], 'name': 'init', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': '_action', 'type': 'string' }, { 'name': '_data', 'type': 'bytes' }, { 'name': '_prevBlock', 'type': 'bytes32' }, { 'name': '_nonce', 'type': 'uint256' }, { 'name': '_deployReducer', 'type': 'bool' }, { 'name': '_signature', 'type': 'bytes' }], 'name': 'dispatch', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': true, 'inputs': [{ 'name': '_action', 'type': 'string' }, { 'name': '_data', 'type': 'bytes' }, { 'name': '_deployReducer', 'type': 'bool' }], 'name': 'makeAction', 'outputs': [{ 'name': 'actionHash', 'type': 'bytes32' }, { 'name': 'prevBlockHash', 'type': 'bytes32' }, { 'name': 'nonce', 'type': 'uint256' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'getLastBlock', 'outputs': [{ 'name': '', 'type': 'bytes32' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }], 'bytecode': '', 'deployedBytecode': '0x6080604052600436106100a05763ffffffff60e060020a60003504166305d1e4c081146100a5578063146111ca146100cc5780632348238c146101855780632be336eb146101a8578063664a4a05146101d65780637b103999146102a05780637f2c4ca8146102d1578063975057e7146102e6578063a27461ce146102fb578063c6dbdf61146103e4578063e9a83101146103f9578063f09a401614610419575b600080fd5b3480156100b157600080fd5b506100ba610440565b60408051918252519081900360200190f35b3480156100d857600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261016794369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750505050913515159250610459915050565b60408051938452602084019290925282820152519081900360600190f35b34801561019157600080fd5b506101a6600160a060020a03600435166105bd565b005b3480156101b457600080fd5b506101bd610650565b6040805192835260208301919091528051918290030190f35b3480156101e257600080fd5b506101ee60043561071d565b6040805188815260208082018990529181018790526060810186905260808101859052600160a060020a03841660a082015260e060c0820181815284519183019190915283519192909161010084019185019080838360005b8381101561025f578181015183820152602001610247565b50505050905090810190601f16801561028c5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b3480156102ac57600080fd5b506102b561075c565b60408051600160a060020a039092168252519081900360200190f35b3480156102dd57600080fd5b506100ba61076b565b3480156102f257600080fd5b506102b5610777565b34801561030757600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101a694369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f60608a01358b0180359182018390048302840183018552818452989b8a359b838c01359b9586013515159a9199509750608090940195509193509182019181908401838280828437509497506107869650505050505050565b3480156103f057600080fd5b506102b561079c565b34801561040557600080fd5b506101a660048035602481019101356107ab565b34801561042557600080fd5b506101a6600160a060020a0360043581169060243516610940565b600061045361044e33610a9e565b610d10565b90505b90565b6000806000610466610650565b809250819350505085858383876040516020018086805190602001908083835b602083106104a55780518252601f199092019160209182019101610486565b51815160209384036101000a600019018019909216911617905288519190930192880191508083835b602083106104ed5780518252601f1990920191602091820191016104ce565b51815160209384036101000a6000190180199092169116179052920195865250848101939093525015157f01000000000000000000000000000000000000000000000000000000000000000260408084019190915280518084036021018152604190930190819052825192945092508291908401908083835b602083106105855780518252601f199092019160209182019101610566565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020925093509350939050565b600054600160a060020a031633146105d457600080fd5b600160a060020a03811615156105e957600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03838116919091179182905560408051929091168252517f4101e71e974f68df5e9730cc223280b41654676bbb052cdcc735c3337e64d2d9916020908290030190a150565b60008060008061065e610de0565b9150610668610de5565b905061067382610df4565b604080517fc0ec112f000000000000000000000000000000000000000000000000000000008152336004820152905161071391600191600160a060020a0386169163c0ec112f9160248083019260209291908290030181600087803b1580156106db57600080fd5b505af11580156106ef573d6000803e3d6000fd5b505050506040513d602081101561070557600080fd5b50519063ffffffff610e1b16565b9350935050509091565b60008060008060008060606000610732610de0565b9050610744818a63ffffffff610e3416565b959f949e50929c50909a509850965090945092505050565b600254600160a060020a031681565b60006104536003610df4565b600154600160a060020a031681565b610794868686868686610f2e565b505050505050565b600054600160a060020a031690565b6107b36119b6565b60008060006107c133610a9e565b93506107cb610de0565b92506107d5610de5565b915085858080601f016020809104026020016040519081016040528093929190818152602001838380828437505050505060c0860191909152506108188461167b565b151561086e576040805160e560020a62461bcd02815260206004820152601f60248201527f4d65726b6c7578564d3a205369676e617475726520697320696e76616c696400604482015290519081900360640190fd5b61087784610d10565b9050610889838563ffffffff6116ed16565b60408051828152602081018281529181018790527f4c4d91ae66b6b3b4a290060e822c45bfb4a8704f7c676f1269bb1ae8b672de1b9183918991899190606082018484808284376040519201829003965090945050505050a181600160a060020a03166372c18fa56040518163ffffffff1660e060020a028152600401600060405180830381600087803b15801561092057600080fd5b505af1158015610934573d6000803e3d6000fd5b50505050505050505050565b600054600160a060020a0316331461095757600080fd5b600160a060020a03821615156109dd576040805160e560020a62461bcd02815260206004820152602360248201527f4d65726b6c7578436861696e3a20696e76616c69642073746f7265206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a0381161515610a63576040805160e560020a62461bcd02815260206004820152602660248201527f4d65726b6c7578436861696e3a20696e76616c6964207265676973747279206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60018054600160a060020a0393841673ffffffffffffffffffffffffffffffffffffffff199182161790915560028054929093169116179055565b610aa66119b6565b600080610ab1610de0565b9150610abb610de5565b9050610ac682610df4565b8352604080517f490ca34b0000000000000000000000000000000000000000000000000000000081529051600160a060020a0383169163490ca34b9160048083019260209291908290030181600087803b158015610b2357600080fd5b505af1158015610b37573d6000803e3d6000fd5b505050506040513d6020811015610b4d57600080fd5b5051602084810191909152604080517fcd605a1a0000000000000000000000000000000000000000000000000000000081529051600160a060020a0384169263cd605a1a92600480820193918290030181600087803b158015610baf57600080fd5b505af1158015610bc3573d6000803e3d6000fd5b505050506040513d6020811015610bd957600080fd5b505160408085019190915280517f776908880000000000000000000000000000000000000000000000000000000081529051600160a060020a0383169163776908889160048083019260209291908290030181600087803b158015610c3d57600080fd5b505af1158015610c51573d6000803e3d6000fd5b505050506040513d6020811015610c6757600080fd5b50516060840152604080517f267e87540000000000000000000000000000000000000000000000000000000081529051600160a060020a0383169163267e87549160048083019260209291908290030181600087803b158015610cc957600080fd5b505af1158015610cdd573d6000803e3d6000fd5b505050506040513d6020811015610cf357600080fd5b50516080840152600160a060020a03841660a08401525050919050565b805160208083015160408085015160608087015160808089015160a0808b01518751808b019b909b528a88019890985293890194909452870152850152600160a060020a039091166c010000000000000000000000000260c0840152805180840360b401815260d4909301908190528251600093928291908401908083835b60208310610dae5780518252601f199092019160209182019101610d8f565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912095945050505050565b600390565b600154600160a060020a031690565b805460009082906000198101908110610e0957fe5b90600052602060002001549050919050565b600082820183811015610e2d57600080fd5b9392505050565b60008181526001808401602090815260408084208054818501546002808401546003850154600486015460058701546006880180548a51601f9d8216156101000260001901909116969096049b8c018b90048b0286018b019099528a85528b9a8b9a8b9a8b9a8b9a60609a919990989197919691959194600160a060020a039092169390918391830182828015610f0c5780601f10610ee157610100808354040283529160200191610f0c565b820191906000526020600020905b815481529060010190602001808311610eef57829003601f168201915b5050505050905097509750975097509750975097505092959891949750929550565b600080600080610f3c61183c565b9350610f46610de5565b9250610f518861184b565b1515610fcd576040805160e560020a62461bcd02815260206004820152602d60248201527f4d65726b6c7578564d3a204e6f74206120726563656e742074782c207570646160448201527f7465207072657620626c6f636b00000000000000000000000000000000000000606482015290519081900360840190fd5b61112a8561111e8c8c8c8c8c6040516020018086805190602001908083835b6020831061100b5780518252601f199092019160209182019101610fec565b51815160209384036101000a600019018019909216911617905288519190930192880191508083835b602083106110535780518252601f199092019160209182019101611034565b51815160209384036101000a6000190180199092169116179052920195865250848101939093525015157f01000000000000000000000000000000000000000000000000000000000000000260408084019190915280518084036021018152604190930190819052825192945092508291908401908083835b602083106110eb5780518252601f1990920191602091820191016110cc565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120925061186a915050565b9063ffffffff6118e116565b915082600160a060020a031663e354b0c683896040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050600060405180830381600087803b15801561118f57600080fd5b505af11580156111a3573d6000803e3d6000fd5b5050505085156112f65782600160a060020a0316638650a6c9858c8c6040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a031681526020018060200180602001838103835285818151815260200191508051906020019080838360005b8381101561122a578181015183820152602001611212565b50505050905090810190601f1680156112575780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561128a578181015183820152602001611272565b50505050905090810190601f1680156112b75780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156112d957600080fd5b505af11580156112ed573d6000803e3d6000fd5b50505050611455565b82600160a060020a03166378f0fc6485848d8d6040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184600160a060020a0316600160a060020a031681526020018060200180602001838103835285818151815260200191508051906020019080838360005b8381101561138c578181015183820152602001611374565b50505050905090810190601f1680156113b95780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156113ec5781810151838201526020016113d4565b50505050905090810190601f1680156114195780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b15801561143c57600080fd5b505af1158015611450573d6000803e3d6000fd5b505050505b82600160a060020a031663a026809b89848a8e8b8f8c6040518863ffffffff1660e060020a02815260040180886000191660001916815260200187600160a060020a0316600160a060020a0316815260200186815260200180602001851515151581526020018060200180602001848103845288818151815260200191508051906020019080838360005b838110156114f85781810151838201526020016114e0565b50505050905090810190601f1680156115255780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b83811015611558578181015183820152602001611540565b50505050905090810190601f1680156115855780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b838110156115b85781810151838201526020016115a0565b50505050905090810190601f1680156115e55780820380516001836020036101000a031916815260200191505b509a5050505050505050505050602060405180830381600087803b15801561160c57600080fd5b505af1158015611620573d6000803e3d6000fd5b505050506040513d602081101561163657600080fd5b50516040805182815290519192507f1ba3780df328ce15242010731cd232893a302f07893ea9beb7979e3a1b157c86919081900360200190a150505050505050505050565b60006116856119b6565b60a0830151600160a060020a031615156116b3576116a281610d10565b6116ab84610d10565b1491506116e7565b6116cc8360c0015161111e6116c786610d10565b61186a565b600160a060020a03168360a00151600160a060020a03161491505b50919050565b60006116f882610d10565b83549091506000101561179d5760208083015183516000908152600180870190935260409020909101541061179d576040805160e560020a62461bcd02815260206004820152603260248201527f5375626d697474656420626c6f636b20737461727473207769746820696e766160448201527f6c696420616374696f6e206e756d626572200000000000000000000000000000606482015290519081900360840190fd5b8254600180820185556000858152602080822090930184905583815281860183526040908190208551815585840151928101929092558401516002820155606084015160038201556080840151600482015560a084015160058201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0390921691909117905560c0840151805185936107949260068501929101906119f4565b600254600160a060020a031690565b600080611856610de0565b90508261186282610df4565b149392505050565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c80830185905283518084039091018152605c9092019283905281516000939182919084019080838360208310610dae5780518252601f199092019160209182019101610d8f565b600080600080845160411415156118fb57600093506119ad565b50505060208201516040830151606084015160001a601b60ff8216101561192057601b015b8060ff16601b1415801561193857508060ff16601c14155b1561194657600093506119ad565b60408051600080825260208083018085528a905260ff8516838501526060830187905260808301869052925160019360a0808501949193601f19840193928390039091019190865af11580156119a0573d6000803e3d6000fd5b5050506020604051035193505b50505092915050565b6040805160e08101825260008082526020820181905291810182905260608082018390526080820183905260a082019290925260c081019190915290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611a3557805160ff1916838001178555611a62565b82800160010185558215611a62579182015b82811115611a62578251825591602001919060010190611a47565b50611a6e929150611a72565b5090565b61045691905b80821115611a6e5760008155600101611a785600a165627a7a723058200d46a562ee5f18493a63abe1c4725b41cc4e73fb6ae9b52ff7e7caac0f6c39f40029', 'sourceMap': '359:1857:2:-;;;572:111;8:9:-1;5:2;;;30:1;27;20:12;5:2;572:111:2;616:27;;:::i;:::-;385:8:23;:21;;-1:-1:-1;;;;;;385:21:23;396:10;385:21;;;;;417:28;;;-1:-1:-1;;;;;436:8:23;;;;417:28;;;;;;;;;;;;653:23:2;:5;668:7;653:14;;;;;;:23;:::i;:::-;572:111;359:1857;;1503:468:9;1593:17;1613:30;1632:10;1613:18;;;;;;:30;:::i;:::-;1657:17;;1593:50;;-1:-1:-1;1677:1:9;-1:-1:-1;1653:231:9;;;1769:20;;;;;1731:24;;1719:37;;;;:11;;;;:37;;;;;;:47;;;;:70;1694:179;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;39:1;23:18;;;45:23;;-1:-1;1893:26:9;;;;;;;;;;;;;1929:22;;;:11;;;:22;;;;;;;:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1929:35:9;-1:-1:-1;;;;;1929:35:9;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;1503:468:9:o;983:363::-;1133:20;;1171:16;;;;;1205:12;;;;;1235:17;;;;;1270:14;;;;;1302:13;;;;;1099:230;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1099:230:9;;;;;;;;;;;26:21:-1;;;22:32;;6:49;;1099:230:9;;;;;;;;1076:263;;-1:-1:-1;;1099:230:9;;;1076:263;;;;;1099:230;1076:263;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;;;;365:33;;1076:263:9;;;;;;;;;;;;-1:-1:-1;;;;;983:363:9:o;359:1857:2:-;;;;;;;;;-1:-1:-1;359:1857:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;359:1857:2;;;-1:-1:-1;359:1857:2;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;', 'deployedSourceMap': '359:1857:2:-;;;;;;;;;-1:-1:-1;;;359:1857:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2917:129:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2917:129:8;;;;;;;;;;;;;;;;;;;;1307:492:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1307:492:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1307:492:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1307:492:2;;;;-1:-1:-1;1307:492:2;-1:-1:-1;1307:492:2;;-1:-1:-1;1307:492:2;;;;;;;;-1:-1:-1;1307:492:2;;-1:-1:-1;;;;1307:492:2;;;;;-1:-1:-1;1307:492:2;;-1:-1:-1;;1307:492:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;855:171:23;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;855:171:23;-1:-1:-1;;;;;855:171:23;;;;;;;3052:285:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3052:285:8;;;;;;;;;;;;;;;;;;;;;;;;;;;3343:369;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3343:369:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3343:369:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;3343:369:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;494:39:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;494:39:2;;;;;;;;-1:-1:-1;;;;;494:39:2;;;;;;;;;;;;;;1805:102;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1805:102:2;;;;463:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;463:25:2;;;;1025:276;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1025:276:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1025:276:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1025:276:2;;;;-1:-1:-1;1025:276:2;-1:-1:-1;1025:276:2;;-1:-1:-1;1025:276:2;;;;;;;;-1:-1:-1;;1025:276:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1025:276:2;-1:-1:-1;1025:276:2;;;;;-1:-1:-1;1025:276:2;;-1:-1:-1;1025:276:2;;;;;;;;;;;;;;-1:-1:-1;1025:276:2;;-1:-1:-1;1025:276:2;;-1:-1:-1;;;;;;;1025:276:2;664:75:23;;8:9:-1;5:2;;;30:1;27;20:12;5:2;664:75:23;;;;2384:527:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2384:527:8;;;;;;;;;;;;689:330:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;689:330:2;-1:-1:-1;;;;;689:330:2;;;;;;;;;;2917:129:8;2968:7;2994:45;:30;3013:10;2994:18;:30::i;:::-;:43;:45::i;:::-;2987:52;;2917:129;;:::o;1307:492:2:-;1437:18;1465:21;1496:13;1551:21;:19;:21::i;:::-;1526:46;;;;;;;;1652:7;1677:5;1700:13;1731:5;1754:14;1618:164;;;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;1618:164:2;;;;;;;;;;-1:-1:-1;1618:164:2;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;1618:164:2;;;;;-1:-1:-1;1618:164:2;;;;;;;-1:-1:-1;1618:164:2;;;;;;;;;;;;;;26:21:-1;;;22:32;;6:49;;1618:164:2;;;;;;;;1595:197;;1618:164;;-1:-1:-1;1618:164:2;-1:-1:-1;1618:164:2;;1595:197;;;;;1618:164;1595:197;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;1595:197:2;;;;;;;;;;;;;;;;1582:210;;1307:492;;;;;;;:::o;855:171:23:-;586:8;;-1:-1:-1;;;;;586:8:23;572:10;:22;564:31;;;;;;-1:-1:-1;;;;;932:23:23;;;;924:32;;;;;;962:8;:20;;-1:-1:-1;;962:20:23;-1:-1:-1;;;;;962:20:23;;;;;;;;;;;993:28;;;1012:8;;;;993:28;;;;;;;;;;;;;855:171;:::o;3052:285:8:-;3104:21;3127:13;3153:26;3202:24;3182:10;:8;:10::i;:::-;3153:39;;3229:10;:8;:10::i;:::-;3202:37;;3257:24;:5;:22;:24::i;:::-;3283:39;;;;;;3311:10;3283:39;;;;;;:46;;3327:1;;-1:-1:-1;;;;;3283:27:8;;;;;:39;;;;;;;;;;;;;;-1:-1:-1;3283:27:8;:39;;;5:2:-1;;;;30:1;27;20:12;5:2;3283:39:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3283:39:8;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3283:39:8;;:46;:43;:46;:::i;:::-;3249:81;;;;3052:285;;;;:::o;3343:369::-;3411:22;3443:18;3471:14;3495:19;3524:16;3550:15;3575:23;3615:26;3644:10;:8;:10::i;:::-;3615:39;-1:-1:-1;3671:34:8;3615:39;3694:10;3671:34;:22;:34;:::i;:::-;3664:41;;;;-1:-1:-1;3664:41:8;;-1:-1:-1;3664:41:8;;-1:-1:-1;3664:41:8;-1:-1:-1;3664:41:8;-1:-1:-1;3664:41:8;;-1:-1:-1;3343:369:8;-1:-1:-1;;;3343:369:8:o;494:39:2:-;;;-1:-1:-1;;;;;494:39:2;;:::o;1805:102::-;1850:7;1876:24;:5;:22;:24::i;463:25::-;;;-1:-1:-1;;;;;463:25:2;;:::o;1025:276::-;1218:76;1231:7;1240:5;1247:10;1259:6;1267:14;1283:10;1218:12;:76::i;:::-;1025:276;;;;;;:::o;664:75:23:-;704:7;726:8;-1:-1:-1;;;;;726:8:23;664:75;:::o;2384:527:8:-;2435:29;;:::i;:::-;2507:26;2556:24;2747:17;2467:30;2486:10;2467:18;:30::i;:::-;2435:62;;2536:10;:8;:10::i;:::-;2507:39;;2583:10;:8;:10::i;:::-;2556:37;;2626:10;;2604:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2604:19:8;;;:32;;;;-1:-1:-1;2681:20:8;2604:19;2681:18;:20::i;:::-;2673:64;;;;;;;-1:-1:-1;;;;;2673:64:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;2767:24;:9;:22;:24::i;:::-;2747:44;-1:-1:-1;2801:25:8;:5;2816:9;2801:25;:14;:25;:::i;:::-;2841:29;;;;;;;;;;;;;;;;;;;;2848:9;;2859:10;;;;2841:29;;;;2859:10;;;;2841:29;;;;;;;;;;-1:-1:-1;2841:29:8;;-1:-1:-1;;;;;2841:29:8;2880:5;-1:-1:-1;;;;;2880:22:8;;:24;;;;;-1:-1:-1;;;2880:24:8;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2880:24:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2880:24:8;;;;2384:527;;;;;;:::o;689:330:2:-;586:8:23;;-1:-1:-1;;;;;586:8:23;572:10;:22;564:31;;;;;;-1:-1:-1;;;;;775:20:2;;;;767:68;;;;;-1:-1:-1;;;;;767:68:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;853:23:2;;;;845:74;;;;;-1:-1:-1;;;;;845:74:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;929:5;:28;;-1:-1:-1;;;;;929:28:2;;;-1:-1:-1;;929:28:2;;;;;;;967:8;:45;;;;;;;;;;;689:330::o;3893:531:8:-;3960:29;;:::i;:::-;4001:26;4050:24;4030:10;:8;:10::i;:::-;4001:39;;4077:10;:8;:10::i;:::-;4050:37;;4123:24;:5;:22;:24::i;:::-;4097:50;;4179:20;;;;;;;;-1:-1:-1;;;;;4179:18:8;;;;;:20;;;;;;;;;;;;;;4097:23;4179:18;:20;;;5:2:-1;;;;30:1;27;20:12;5:2;4179:20:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4179:20:8;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4179:20:8;;4157:19;;;:42;;;;4227:20;;;;;;;;-1:-1:-1;;;;;4227:18:8;;;;;:20;;;;;;;;;;;;:18;:20;;;5:2:-1;;;;30:1;27;20:12;5:2;4227:20:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4227:20:8;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4227:20:8;4209:15;;;;:38;;;;4280:24;;;;;;;-1:-1:-1;;;;;4280:22:8;;;;;:24;;;;;4227:20;;4280:24;;;;;;;4209:38;4280:22;:24;;;5:2:-1;;;;30:1;27;20:12;5:2;4280:24:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4280:24:8;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4280:24:8;4257:20;;;:47;4334:21;;;;;;;;-1:-1:-1;;;;;4334:19:8;;;;;:21;;;;;4280:24;;4334:21;;;;;;;4257:47;4334:19;:21;;;5:2:-1;;;;30:1;27;20:12;5:2;4334:21:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4334:21:8;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4334:21:8;4314:17;;;:41;-1:-1:-1;;;;;4365:26:8;;:16;;;:26;3893:531;;;;;:::o;983:363:9:-;1133:20;;1171:16;;;;;1205:12;;;;;1235:17;;;;;1270:14;;;;;1302:13;;;;;1099:230;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1099:230:9;;;;;;;;;;;26:21:-1;;;22:32;;6:49;;1099:230:9;;;;;;;;1076:263;;-1:-1:-1;;1099:230:9;;;1076:263;;;;;1099:230;1076:263;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;;;;365:33;;1076:263:9;;;;;;;;;;;;-1:-1:-1;;;;;983:363:9:o;1913:94:2:-;1995:5;1913:94;:::o;2013:92::-;2093:5;;-1:-1:-1;;;;;2093:5:2;2013:92;:::o;1977:136:9:-;2084:17;;2047:7;;2073:4;;-1:-1:-1;;2084:21:9;;;2073:33;;;;;;;;;;;;;;2066:40;;1977:136;;;:::o;1272:131:22:-;1330:7;1357:5;;;1376:6;;;;1368:15;;;;;;1397:1;1272:131;-1:-1:-1;;;1272:131:22:o;2119:574:9:-;2213:22;2449:18;;;:11;;;;:18;;;;;;;;2494:22;;2526:18;;;;2554:14;;;;;2578:19;;;;2607:16;;;;2633:15;;;;2658:18;;;2477:209;;;;;;;;;2633:15;2477:209;-1:-1:-1;;2477:209:9;;;;;;;;;;;;;;;;;;;;;;;;;;2213:22;;;;;;;;;;2377:23;;2449:18;;2494:22;;2526:18;;2554:14;;2578:19;;2607:16;;-1:-1:-1;;;;;2633:15:9;;;;2477:209;;2658:18;;2477:209;;2658:18;2477:209;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2119:574;;;;;;;;;;;:::o;979:1312:8:-;1172:32;1230:24;1444:13;2046:18;1207:13;:11;:13::i;:::-;1172:48;;1257:10;:8;:10::i;:::-;1230:37;;1332:21;1342:10;1332:9;:21::i;:::-;1324:79;;;;;;;-1:-1:-1;;;;;1324:79:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1460:240;1689:10;1460:220;1517:7;1542:5;1565:10;1593:6;1617:14;1483:162;;;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;1483:162:8;;;;;;;;;;-1:-1:-1;1483:162:8;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;1483:162:8;;;;;-1:-1:-1;1483:162:8;;;;;;;-1:-1:-1;1483:162:8;;;;;;;;;;;;;;26:21:-1;;;22:32;;6:49;;1483:162:8;;;;;;;;1460:195;;1483:162;;-1:-1:-1;1483:162:8;-1:-1:-1;1483:162:8;;1460:195;;;;;1483:162;1460:195;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;;;;365:33;;1460:195:8;;;;;;;;;;;-1:-1:-1;1460:218:8;;-1:-1:-1;;1460:220:8:i;:::-;:228;:240;:228;:240;:::i;:::-;1444:256;;1737:5;-1:-1:-1;;;;;1737:32:8;;1770:5;1777:6;1737:47;;;;;-1:-1:-1;;;1737:47:8;;;;;;;-1:-1:-1;;;;;1737:47:8;-1:-1:-1;;;;;1737:47:8;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1737:47:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1737:47:8;;;;1845:14;1841:170;;;1875:5;-1:-1:-1;;;;;1875:19:8;;1895:8;1905:7;1914:5;1875:45;;;;;-1:-1:-1;;;1875:45:8;;;;;;;-1:-1:-1;;;;;1875:45:8;-1:-1:-1;;;;;1875:45:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1875:45:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1875:45:8;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1875:45:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1875:45:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1875:45:8;;;;1841:170;;;1951:5;-1:-1:-1;;;;;1951:16:8;;1968:8;1978:5;1985:7;1994:5;1951:49;;;;;-1:-1:-1;;;1951:49:8;;;;;;;-1:-1:-1;;;;;1951:49:8;-1:-1:-1;;;;;1951:49:8;;;;;;-1:-1:-1;;;;;1951:49:8;-1:-1:-1;;;;;1951:49:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1951:49:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1951:49:8;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1951:49:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1951:49:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1951:49:8;;;;1841:170;2067:5;-1:-1:-1;;;;;2067:15:8;;2096:10;2120:5;2139:6;2159:7;2180:14;2208:5;2227:10;2067:180;;;;;-1:-1:-1;;;2067:180:8;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2067:180:8;-1:-1:-1;;;;;2067:180:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;2067:180:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2067:180:8;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;2067:180:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2067:180:8;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;2067:180:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2067:180:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2067:180:8;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2067:180:8;2262:22;;;;;;;;2067:180;;-1:-1:-1;2262:22:8;;;;;;2067:180;2262:22;;;979:1312;;;;;;;;;;:::o;576:401:9:-;639:4;736:26;;:::i;:::-;659:13;;;;-1:-1:-1;;;;;659:27:9;;655:315;;;807:26;820:12;807;:26::i;:::-;783:20;796:6;783:12;:20::i;:::-;:50;;-1:-1:-1;776:57:9;;655:315;888:71;942:6;:16;;;888:45;:20;901:6;888:12;:20::i;:::-;:43;:45::i;:71::-;-1:-1:-1;;;;;871:88:9;:6;:13;;;-1:-1:-1;;;;;871:88:9;;864:95;;655:315;576:401;;;;:::o;1503:468::-;1593:17;1613:30;1632:10;1613:18;:30::i;:::-;1657:17;;1593:50;;-1:-1:-1;1677:1:9;-1:-1:-1;1653:231:9;;;1769:20;;;;;1731:24;;1719:37;;;;:11;;;;:37;;;;;;:47;;;;:70;1694:179;;;;;-1:-1:-1;;;;;1694:179:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;39:1;23:18;;;45:23;;-1:-1;1893:26:9;;;;;;;;;;;;;1929:22;;;:11;;;:22;;;;;;;:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1929:35:9;-1:-1:-1;;;;;1929:35:9;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;2111:103:2:-;2199:8;;-1:-1:-1;;;;;2199:8:2;2111:103;:::o;3718:169:8:-;3774:4;3789:26;3818:10;:8;:10::i;:::-;3789:39;-1:-1:-1;3874:5:8;3846:24;3789:39;3846:22;:24::i;:::-;:33;;3718:169;-1:-1:-1;;;3718:169:8:o;1705:277:21:-;1913:58;;;;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;1913:58:21;;;;;;;;1896:81;;1786:7;;1913:58;;;1896:81;;;;;1913:58;1896:81;66:2:-1;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;599:968:21;682:7;699:9;714;729:7;781:9;:16;801:2;781:22;;777:62;;;829:1;813:19;;;;777:62;-1:-1:-1;;;1115:4:21;1100:20;;1094:27;1154:4;1139:20;;1133:27;1201:4;1186:20;;1180:27;1177:1;1172:36;1315:2;1311:6;;;;1307:34;;;1332:2;1327:7;1307:34;1410:1;:7;;1415:2;1410:7;;:18;;;;;1421:1;:7;;1426:2;1421:7;;1410:18;1406:157;;;1454:1;1438:19;;;;1406:157;1532:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1532:24:21;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1532:24:21;;;;;;;;1525:31;;1406:157;599:968;;;;;;;:::o;359:1857:2:-;;;;;;;;;-1:-1:-1;359:1857:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;359:1857:2;;;-1:-1:-1;359:1857:2;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;', 'source': 'pragma solidity ^0.4.24;\n\nimport "openzeppelin-solidity/contracts/ownership/Secondary.sol";\nimport "./MerkluxVM.sol";\nimport "./MerkluxStore.sol";\n\n\n/**\n * @title Merklux\n * @dev Merklux is a state management smart contract to control the state with a\n * unidirectional data flow. It can be used for state verifications accross evm\n * based block chains.\n */\ncontract MerkluxChain is Secondary, MerkluxVM {\n    // Every action dispatches increment the height\n    MerkluxStore public store;\n    IMerkluxReducerRegistry public registry;\n    Chain.Object private chain;\n\n    constructor () public Secondary() {\n        Block.Object memory genesis;\n        chain.addBlock(genesis);\n    }\n\n    function init(address _store, address _registry) public onlyPrimary {\n        require(_store != address(0), "MerkluxChain: invalid store address");\n        require(_registry != address(0), "MerkluxChain: invalid registry address");\n        store = MerkluxStore(_store);\n        registry = IMerkluxReducerRegistry(_registry);\n    }\n\n    function dispatch(\n        string _action,\n        bytes _data,\n        bytes32 _prevBlock,\n        uint256 _nonce,\n        bool _deployReducer,\n        bytes _signature\n    ) public {\n        super.reduce(_action, _data, _prevBlock, _nonce, _deployReducer, _signature);\n    }\n\n    function makeAction(\n        string _action,\n        bytes _data,\n        bool _deployReducer\n    ) public view returns (\n        bytes32 actionHash,\n        bytes32 prevBlockHash,\n        uint256 nonce\n    ) {\n        (prevBlockHash, nonce) = getDataForNewAction();\n        actionHash = keccak256(\n            abi.encodePacked(\n                _action,\n                _data,\n                prevBlockHash,\n                nonce,\n                _deployReducer\n            )\n        );\n    }\n\n    function getLastBlock() public view returns (bytes32) {\n        return chain.getLastBlockHash();\n    }\n\n    function getChain() internal view returns (Chain.Object storage) {\n        return chain;\n    }\n\n    function getStore() internal view returns (IMerkluxStoreForVM) {\n        return store;\n    }\n\n    function getRegistry() internal view returns (IMerkluxReducerRegistry) {\n        return registry;\n    }\n}\n' }, 'MerkluxFactory': { 'contractName': 'MerkluxFactory', 'abi': [{ 'constant': false, 'inputs': [{ 'name': 'recipient', 'type': 'address' }], 'name': 'transferPrimary', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'version', 'outputs': [{ 'name': '', 'type': 'string' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': '_code', 'type': 'bytes' }], 'name': 'registerReducer', 'outputs': [{ 'name': 'reducerKey', 'type': 'bytes32' }, { 'name': 'reducerAddress', 'type': 'address' }], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': true, 'inputs': [{ 'name': '_reducerKey', 'type': 'bytes32' }], 'name': 'isDeployed', 'outputs': [{ 'name': '', 'type': 'bool' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [{ 'name': '_reducerKey', 'type': 'bytes32' }], 'name': 'getReducer', 'outputs': [{ 'name': '', 'type': 'address' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'storeCode', 'outputs': [{ 'name': '', 'type': 'bytes32' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'primary', 'outputs': [{ 'name': '', 'type': 'address' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'chainCode', 'outputs': [{ 'name': '', 'type': 'bytes32' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'inputs': [{ 'name': '_version', 'type': 'string' }, { 'name': '_chainCode', 'type': 'bytes32' }, { 'name': '_storeCode', 'type': 'bytes32' }], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'constructor' }, { 'anonymous': false, 'inputs': [{ 'indexed': false, 'name': 'recipient', 'type': 'address' }], 'name': 'PrimaryTransferred', 'type': 'event' }, { 'constant': false, 'inputs': [{ 'name': '_appName', 'type': 'string' }], 'name': 'createApp', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': '_appName', 'type': 'string' }, { 'name': '_bytecode', 'type': 'bytes' }], 'name': 'deployChain', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': '_appName', 'type': 'string' }, { 'name': '_bytecode', 'type': 'bytes' }], 'name': 'deployStore', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': '_appName', 'type': 'string' }], 'name': 'complete', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': true, 'inputs': [{ 'name': '_appName', 'type': 'string' }], 'name': 'getMerklux', 'outputs': [{ 'name': 'chain', 'type': 'address' }, { 'name': 'store', 'type': 'address' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }], 'bytecode': '0x60806040523480156200001157600080fd5b50604051620016e4380380620016e483398101604081815282516020808501518386015160008054600160a060020a031916331790819055600160a060020a0316865293519290950194937f4101e71e974f68df5e9730cc223280b41654676bbb052cdcc735c3337e64d2d9929081900390910190a182516200009c906002906020860190620000ad565b506003919091556004555062000152565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000f057805160ff191683800117855562000120565b8280016001018555821562000120579182015b828111156200012057825182559160200191906001019062000103565b506200012e92915062000132565b5090565b6200014f91905b808211156200012e576000815560010162000139565b90565b61158280620001626000396000f3006080604052600436106100c45763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632348238c81146100c95780634a9bca5c146100ec57806354fd4d501461016b57806364dc065c146101f5578063658e45ba1461026f57806374c0ff4f14610306578063907490aa14610332578063a6a2620c14610366578063ad932b5c1461038d578063c6dbdf61146103e6578063c7f29b6d146103fb578063c923cadf14610410578063f7198ff314610469575b600080fd5b3480156100d557600080fd5b506100ea600160a060020a0360043516610500565b005b3480156100f857600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101459436949293602493928401919081908401838280828437509497506105939650505050505050565b60408051600160a060020a03938416815291909216602082015281519081900390910190f35b34801561017757600080fd5b5061018061075b565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101ba5781810151838201526020016101a2565b50505050905090810190601f1680156101e75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020157600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261024e9436949293602493928401919081908401838280828437509497506107e69650505050505050565b60408051928352600160a060020a0390911660208301528051918290030190f35b34801561027b57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526100ea94369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506108b89650505050505050565b34801561031257600080fd5b5061031e600435610bf5565b604080519115158252519081900360200190f35b34801561033e57600080fd5b5061034a600435610c12565b60408051600160a060020a039092168252519081900360200190f35b34801561037257600080fd5b5061037b610c2d565b60408051918252519081900360200190f35b34801561039957600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526100ea943694929360249392840191908190840183828082843750949750610c339650505050505050565b3480156103f257600080fd5b5061034a611076565b34801561040757600080fd5b5061037b611085565b34801561041c57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526100ea94369492936024939284019190819084018382808284375094975061108b9650505050505050565b34801561047557600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526100ea94369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506111e89650505050505050565b600054600160a060020a0316331461051757600080fd5b600160a060020a038116151561052c57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03838116919091179182905560408051929091168252517f4101e71e974f68df5e9730cc223280b41654676bbb052cdcc735c3337e64d2d9916020908290030190a150565b6000806005836040518082805190602001908083835b602083106105c85780518252601f1990920191602091820191016105a9565b51815160209384036101000a60001901801990921691161790529201948552506040519384900381018420600101548751600160a060020a039091169650600594889450925082918401908083835b602083106106365780518252601f199092019160209182019101610617565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922060020154600160a060020a0390811693508416151591506106e29050576040805160e560020a62461bcd02815260206004820152602560248201527f4d65726b6c7578466163746f72793a20636861696e206973206e6f74206465706044820152600080516020611537833981519152606482015290519081900360840190fd5b600160a060020a0381161515610756576040805160e560020a62461bcd02815260206004820152602560248201527f4d65726b6c7578466163746f72793a2073746f7265206973206e6f74206465706044820152600080516020611537833981519152606482015290519081900360840190fd5b915091565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156107de5780601f106107b3576101008083540402835291602001916107de565b820191906000526020600020905b8154815290600101906020018083116107c157829003601f168201915b505050505081565b600080826040518082805190602001908083835b602083106108195780518252601f1990920191602091820191016107fa565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020915061085182610bf5565b156108745750600081815260016020526040902054600160a060020a0316610756565b8251602084016000f06000838152600160205260409020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790559050610756565b8133600160a060020a03166005826040518082805190602001908083835b602083106108f55780518252601f1990920191602091820191016108d6565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922054600160a060020a03169290921491506109ac9050576040805160e560020a62461bcd02815260206004820152602a60248201527f4d65726b6c7578466163746f72793a206f6e6c7920616c6c6f77656420666f7260448201527f20617070206f776e657200000000000000000000000000000000000000000000606482015290519081900360840190fd5b6000600160a060020a03166005846040518082805190602001908083835b602083106109e95780518252601f1990920191602091820191016109ca565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922060020154600160a060020a0316929092149150610a7d9050576040805160e560020a62461bcd02815260206004820152601e60248201527f4d65726b6c7578466163746f72793a20616c7265616479206578697374730000604482015290519081900360640190fd5b816040518082805190602001908083835b60208310610aad5780518252601f199092019160209182019101610a8e565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120600454149250610b59915050576040805160e560020a62461bcd02815260206004820152602b60248201527f4d65726b6c7578466163746f72793a2062797465636f6465206861732064696660448201527f666572656e742068617368000000000000000000000000000000000000000000606482015290519081900360840190fd5b610b6282611525565b6005846040518082805190602001908083835b60208310610b945780518252601f199092019160209182019101610b75565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220600201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0394909416939093179092555050505050565b600090815260016020526040902054600160a060020a0316151590565b600090815260016020526040902054600160a060020a031690565b60045481565b6000808233600160a060020a03166005826040518082805190602001908083835b60208310610c735780518252601f199092019160209182019101610c54565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922054600160a060020a0316929092149150610d2a9050576040805160e560020a62461bcd02815260206004820152602a60248201527f4d65726b6c7578466163746f72793a206f6e6c7920616c6c6f77656420666f7260448201527f20617070206f776e657200000000000000000000000000000000000000000000606482015290519081900360840190fd5b6005846040518082805190602001908083835b60208310610d5c5780518252601f199092019160209182019101610d3d565b51815160209384036101000a60001901801990921691161790529201948552506040519384900381018420600101548851600160a060020a039091169750600594899450925082918401908083835b60208310610dca5780518252601f199092019160209182019101610dab565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922060020154600160a060020a039081169450851615159150610e769050576040805160e560020a62461bcd02815260206004820152602560248201527f4d65726b6c7578466163746f72793a20636861696e206973206e6f74206465706044820152600080516020611537833981519152606482015290519081900360840190fd5b600160a060020a0382161515610eea576040805160e560020a62461bcd02815260206004820152602560248201527f4d65726b6c7578466163746f72793a2073746f7265206973206e6f74206465706044820152600080516020611537833981519152606482015290519081900360840190fd5b81600160a060020a0316632348238c846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082600160a060020a0316600160a060020a03168152602001915050600060405180830381600087803b158015610f5e57600080fd5b505af1158015610f72573d6000803e3d6000fd5b5050604080517ff09a4016000000000000000000000000000000000000000000000000000000008152600160a060020a0386811660048301523060248301529151918716935063f09a4016925060448082019260009290919082900301818387803b158015610fe057600080fd5b505af1158015610ff4573d6000803e3d6000fd5b5050604080517f2348238c0000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a0387169350632348238c9250602480830192600092919082900301818387803b15801561105857600080fd5b505af115801561106c573d6000803e3d6000fd5b5050505050505050565b600054600160a060020a031690565b60035481565b6000600160a060020a03166005826040518082805190602001908083835b602083106110c85780518252601f1990920191602091820191016110a9565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922054600160a060020a03169290921491506111599050576040805160e560020a62461bcd02815260206004820152601e60248201527f4d65726b6c7578466163746f72793a20616c7265616479206578697374730000604482015290519081900360640190fd5b336005826040518082805190602001908083835b6020831061118c5780518252601f19909201916020918201910161116d565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039490941693909317909255505050565b8133600160a060020a03166005826040518082805190602001908083835b602083106112255780518252601f199092019160209182019101611206565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922054600160a060020a03169290921491506112dc9050576040805160e560020a62461bcd02815260206004820152602a60248201527f4d65726b6c7578466163746f72793a206f6e6c7920616c6c6f77656420666f7260448201527f20617070206f776e657200000000000000000000000000000000000000000000606482015290519081900360840190fd5b6000600160a060020a03166005846040518082805190602001908083835b602083106113195780518252601f1990920191602091820191016112fa565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922060010154600160a060020a03169290921491506113ad9050576040805160e560020a62461bcd02815260206004820152601e60248201527f4d65726b6c7578466163746f72793a20616c7265616479206578697374730000604482015290519081900360640190fd5b816040518082805190602001908083835b602083106113dd5780518252601f1990920191602091820191016113be565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120600354149250611489915050576040805160e560020a62461bcd02815260206004820152602b60248201527f4d65726b6c7578466163746f72793a2062797465636f6465206861732064696660448201527f666572656e742068617368000000000000000000000000000000000000000000606482015290519081900360840190fd5b61149282611525565b6005846040518082805190602001908083835b602083106114c45780518252601f1990920191602091820191016114a5565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220600101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0394909416939093179092555050505050565b60008151602083016000f09291505056006c6f796564000000000000000000000000000000000000000000000000000000a165627a7a7230582084070fe4d154d8ceac1340c184d0c7fab23ec91f6b092997374dff20499111490029', 'deployedBytecode': '0x6080604052600436106100c45763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632348238c81146100c95780634a9bca5c146100ec57806354fd4d501461016b57806364dc065c146101f5578063658e45ba1461026f57806374c0ff4f14610306578063907490aa14610332578063a6a2620c14610366578063ad932b5c1461038d578063c6dbdf61146103e6578063c7f29b6d146103fb578063c923cadf14610410578063f7198ff314610469575b600080fd5b3480156100d557600080fd5b506100ea600160a060020a0360043516610500565b005b3480156100f857600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101459436949293602493928401919081908401838280828437509497506105939650505050505050565b60408051600160a060020a03938416815291909216602082015281519081900390910190f35b34801561017757600080fd5b5061018061075b565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101ba5781810151838201526020016101a2565b50505050905090810190601f1680156101e75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020157600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261024e9436949293602493928401919081908401838280828437509497506107e69650505050505050565b60408051928352600160a060020a0390911660208301528051918290030190f35b34801561027b57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526100ea94369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506108b89650505050505050565b34801561031257600080fd5b5061031e600435610bf5565b604080519115158252519081900360200190f35b34801561033e57600080fd5b5061034a600435610c12565b60408051600160a060020a039092168252519081900360200190f35b34801561037257600080fd5b5061037b610c2d565b60408051918252519081900360200190f35b34801561039957600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526100ea943694929360249392840191908190840183828082843750949750610c339650505050505050565b3480156103f257600080fd5b5061034a611076565b34801561040757600080fd5b5061037b611085565b34801561041c57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526100ea94369492936024939284019190819084018382808284375094975061108b9650505050505050565b34801561047557600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526100ea94369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506111e89650505050505050565b600054600160a060020a0316331461051757600080fd5b600160a060020a038116151561052c57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03838116919091179182905560408051929091168252517f4101e71e974f68df5e9730cc223280b41654676bbb052cdcc735c3337e64d2d9916020908290030190a150565b6000806005836040518082805190602001908083835b602083106105c85780518252601f1990920191602091820191016105a9565b51815160209384036101000a60001901801990921691161790529201948552506040519384900381018420600101548751600160a060020a039091169650600594889450925082918401908083835b602083106106365780518252601f199092019160209182019101610617565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922060020154600160a060020a0390811693508416151591506106e29050576040805160e560020a62461bcd02815260206004820152602560248201527f4d65726b6c7578466163746f72793a20636861696e206973206e6f74206465706044820152600080516020611537833981519152606482015290519081900360840190fd5b600160a060020a0381161515610756576040805160e560020a62461bcd02815260206004820152602560248201527f4d65726b6c7578466163746f72793a2073746f7265206973206e6f74206465706044820152600080516020611537833981519152606482015290519081900360840190fd5b915091565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156107de5780601f106107b3576101008083540402835291602001916107de565b820191906000526020600020905b8154815290600101906020018083116107c157829003601f168201915b505050505081565b600080826040518082805190602001908083835b602083106108195780518252601f1990920191602091820191016107fa565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020915061085182610bf5565b156108745750600081815260016020526040902054600160a060020a0316610756565b8251602084016000f06000838152600160205260409020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790559050610756565b8133600160a060020a03166005826040518082805190602001908083835b602083106108f55780518252601f1990920191602091820191016108d6565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922054600160a060020a03169290921491506109ac9050576040805160e560020a62461bcd02815260206004820152602a60248201527f4d65726b6c7578466163746f72793a206f6e6c7920616c6c6f77656420666f7260448201527f20617070206f776e657200000000000000000000000000000000000000000000606482015290519081900360840190fd5b6000600160a060020a03166005846040518082805190602001908083835b602083106109e95780518252601f1990920191602091820191016109ca565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922060020154600160a060020a0316929092149150610a7d9050576040805160e560020a62461bcd02815260206004820152601e60248201527f4d65726b6c7578466163746f72793a20616c7265616479206578697374730000604482015290519081900360640190fd5b816040518082805190602001908083835b60208310610aad5780518252601f199092019160209182019101610a8e565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120600454149250610b59915050576040805160e560020a62461bcd02815260206004820152602b60248201527f4d65726b6c7578466163746f72793a2062797465636f6465206861732064696660448201527f666572656e742068617368000000000000000000000000000000000000000000606482015290519081900360840190fd5b610b6282611525565b6005846040518082805190602001908083835b60208310610b945780518252601f199092019160209182019101610b75565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220600201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0394909416939093179092555050505050565b600090815260016020526040902054600160a060020a0316151590565b600090815260016020526040902054600160a060020a031690565b60045481565b6000808233600160a060020a03166005826040518082805190602001908083835b60208310610c735780518252601f199092019160209182019101610c54565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922054600160a060020a0316929092149150610d2a9050576040805160e560020a62461bcd02815260206004820152602a60248201527f4d65726b6c7578466163746f72793a206f6e6c7920616c6c6f77656420666f7260448201527f20617070206f776e657200000000000000000000000000000000000000000000606482015290519081900360840190fd5b6005846040518082805190602001908083835b60208310610d5c5780518252601f199092019160209182019101610d3d565b51815160209384036101000a60001901801990921691161790529201948552506040519384900381018420600101548851600160a060020a039091169750600594899450925082918401908083835b60208310610dca5780518252601f199092019160209182019101610dab565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922060020154600160a060020a039081169450851615159150610e769050576040805160e560020a62461bcd02815260206004820152602560248201527f4d65726b6c7578466163746f72793a20636861696e206973206e6f74206465706044820152600080516020611537833981519152606482015290519081900360840190fd5b600160a060020a0382161515610eea576040805160e560020a62461bcd02815260206004820152602560248201527f4d65726b6c7578466163746f72793a2073746f7265206973206e6f74206465706044820152600080516020611537833981519152606482015290519081900360840190fd5b81600160a060020a0316632348238c846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082600160a060020a0316600160a060020a03168152602001915050600060405180830381600087803b158015610f5e57600080fd5b505af1158015610f72573d6000803e3d6000fd5b5050604080517ff09a4016000000000000000000000000000000000000000000000000000000008152600160a060020a0386811660048301523060248301529151918716935063f09a4016925060448082019260009290919082900301818387803b158015610fe057600080fd5b505af1158015610ff4573d6000803e3d6000fd5b5050604080517f2348238c0000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a0387169350632348238c9250602480830192600092919082900301818387803b15801561105857600080fd5b505af115801561106c573d6000803e3d6000fd5b5050505050505050565b600054600160a060020a031690565b60035481565b6000600160a060020a03166005826040518082805190602001908083835b602083106110c85780518252601f1990920191602091820191016110a9565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922054600160a060020a03169290921491506111599050576040805160e560020a62461bcd02815260206004820152601e60248201527f4d65726b6c7578466163746f72793a20616c7265616479206578697374730000604482015290519081900360640190fd5b336005826040518082805190602001908083835b6020831061118c5780518252601f19909201916020918201910161116d565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039490941693909317909255505050565b8133600160a060020a03166005826040518082805190602001908083835b602083106112255780518252601f199092019160209182019101611206565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922054600160a060020a03169290921491506112dc9050576040805160e560020a62461bcd02815260206004820152602a60248201527f4d65726b6c7578466163746f72793a206f6e6c7920616c6c6f77656420666f7260448201527f20617070206f776e657200000000000000000000000000000000000000000000606482015290519081900360840190fd5b6000600160a060020a03166005846040518082805190602001908083835b602083106113195780518252601f1990920191602091820191016112fa565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922060010154600160a060020a03169290921491506113ad9050576040805160e560020a62461bcd02815260206004820152601e60248201527f4d65726b6c7578466163746f72793a20616c7265616479206578697374730000604482015290519081900360640190fd5b816040518082805190602001908083835b602083106113dd5780518252601f1990920191602091820191016113be565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120600354149250611489915050576040805160e560020a62461bcd02815260206004820152602b60248201527f4d65726b6c7578466163746f72793a2062797465636f6465206861732064696660448201527f666572656e742068617368000000000000000000000000000000000000000000606482015290519081900360840190fd5b61149282611525565b6005846040518082805190602001908083835b602083106114c45780518252601f1990920191602091820191016114a5565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220600101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0394909416939093179092555050505050565b60008151602083016000f09291505056006c6f796564000000000000000000000000000000000000000000000000000000a165627a7a7230582084070fe4d154d8ceac1340c184d0c7fab23ec91f6b092997374dff20499111490029', 'sourceMap': '427:3068:3:-;;;898:188;8:9:-1;5:2;;;30:1;27;20:12;5:2;898:188:3;;;;;;;;;;;;;;;;;;;;;;;;;;;385:8:23;:21;;-1:-1:-1;;;;;;385:21:23;396:10;385:21;;;;;-1:-1:-1;;;;;436:8:23;417:28;;;;898:188:3;;;;;;417:28:23;;;;;;;;;;;997:18:3;;;;:7;;:18;;;;;:::i;:::-;-1:-1:-1;1025:9:3;:22;;;;1057:9;:22;-1:-1:-1;427:3068:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;427:3068:3;;;-1:-1:-1;427:3068:3;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;', 'deployedSourceMap': '427:3068:3:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;855:171:23;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;855:171:23;-1:-1:-1;;;;;855:171:23;;;;;;;2923:345:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2923:345:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2923:345:3;;-1:-1:-1;2923:345:3;;-1:-1:-1;;;;;;;2923:345:3;;;;;-1:-1:-1;;;;;2923:345:3;;;;;;;;;;;;;;;;;;;;;;;;593:21;;8:9:-1;5:2;;;30:1;27;20:12;5:2;593:21:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;593:21:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;354:609:5;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;354:609:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;354:609:5;;-1:-1:-1;354:609:5;;-1:-1:-1;;;;;;;354:609:5;;;;;;;;-1:-1:-1;;;;;354:609:5;;;;;;;;;;;;;;;;1831:527:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1831:527:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1831:527:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1831:527:3;;;;-1:-1:-1;1831:527:3;-1:-1:-1;1831:527:3;;-1:-1:-1;1831:527:3;;;;;;;;-1:-1:-1;1831:527:3;;-1:-1:-1;1831:527:3;;-1:-1:-1;;;;;;;1831:527:3;1098:136:5;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1098:136:5;;;;;;;;;;;;;;;;;;;;;;;969:123;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;969:123:5;;;;;;;;;-1:-1:-1;;;;;969:123:5;;;;;;;;;;;;;;650:24:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;650:24:3;;;;;;;;;;;;;;;;;;;;2364:553;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2364:553:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2364:553:3;;-1:-1:-1;2364:553:3;;-1:-1:-1;;;;;;;2364:553:3;664:75:23;;8:9:-1;5:2;;;30:1;27;20:12;5:2;664:75:23;;;;620:24:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;620:24:3;;;;1092:200;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1092:200:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1092:200:3;;-1:-1:-1;1092:200:3;;-1:-1:-1;;;;;;;1092:200:3;1298:527;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1298:527:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1298:527:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1298:527:3;;;;-1:-1:-1;1298:527:3;-1:-1:-1;1298:527:3;;-1:-1:-1;1298:527:3;;;;;;;;-1:-1:-1;1298:527:3;;-1:-1:-1;1298:527:3;;-1:-1:-1;;;;;;;1298:527:3;855:171:23;586:8;;-1:-1:-1;;;;;586:8:23;572:10;:22;564:31;;;;;;-1:-1:-1;;;;;932:23:23;;;;924:32;;;;;;962:8;:20;;-1:-1:-1;;962:20:23;-1:-1:-1;;;;;962:20:23;;;;;;;;;;;993:28;;;1012:8;;;;993:28;;;;;;;;;;;;;855:171;:::o;2923:345:3:-;2981:13;2996;3029:12;3042:8;3029:22;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;3029:22:3;;;;;-1:-1:-1;3029:22:3;;;;;;;;;;274:1:-1;3029:28:3;;3075:22;;-1:-1:-1;;;;;3029:28:3;;;;-1:-1:-1;3075:12:3;;:22;;-1:-1:-1;3029:22:3;-1:-1:-1;3029:22:3;;3075;;;;3029;3075;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;3075:22:3;;;;;-1:-1:-1;3075:22:3;;;;;;;;;;:28;;;-1:-1:-1;;;;;3075:28:3;;;;-1:-1:-1;3121:19:3;;;;;-1:-1:-1;3113:69:3;;-1:-1:-1;3113:69:3;;;;-1:-1:-1;;;;;3113:69:3;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;3113:69:3;;;;;;;;;;;;;;;-1:-1:-1;;;;;3200:19:3;;;;3192:69;;;;;-1:-1:-1;;;;;3192:69:3;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;3192:69:3;;;;;;;;;;;;;;;2923:345;;;:::o;593:21::-;;;;;;;;;;;;;;-1:-1:-1;;593:21:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;354:609:5:-;408:18;428:22;549:5;539:16;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;539:16:5;;;;;;;;;;;;;;;;526:29;;569:22;580:10;569;:22::i;:::-;565:392;;;-1:-1:-1;635:20:5;;;;:8;:20;;;;;;-1:-1:-1;;;;;635:20:5;607:50;;565:392;789:5;783:12;776:4;769:5;765:16;762:1;755:41;844:20;;;;:8;:20;;;;;:53;;-1:-1:-1;;844:53:5;-1:-1:-1;;;;;844:53:5;;;;;;-1:-1:-1;911:35:5;;1831:527:3;1906:8;817:10;-1:-1:-1;;;;;783:44:3;:12;796:8;783:22;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;783:22:3;;;;;-1:-1:-1;783:22:3;;;;;;;;;;:30;-1:-1:-1;;;;;783:30:3;:44;;;;;-1:-1:-1;775:99:3;;-1:-1:-1;775:99:3;;;;-1:-1:-1;;;;;775:99:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2015:1;-1:-1:-1;;;;;1975:42:3;:12;1988:8;1975:22;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;1975:22:3;;;;;-1:-1:-1;1975:22:3;;;;;;;;;;:28;;;-1:-1:-1;;;;;1975:28:3;:42;;;;;-1:-1:-1;1967:85:3;;-1:-1:-1;1967:85:3;;;;-1:-1:-1;;;;;1967:85:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;2179:9;2169:20;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;;;;365:33;;2169:20:3;;;;;;;;;;2156:9;;:33;;-1:-1:-1;2148:89:3;;-1:-1:-1;;2148:89:3;;;;-1:-1:-1;;;;;2148:89:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2313:38;2341:9;2313:27;:38::i;:::-;2282:12;2295:8;2282:22;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;2282:22:3;;;;;-1:-1:-1;2282:22:3;;;;;;;;;;:28;;:69;;-1:-1:-1;;2282:69:3;-1:-1:-1;;;;;2282:69:3;;;;;;;;;;;-1:-1:-1;;;;;1831:527:3:o;1098:136:5:-;1160:4;1191:21;;;:8;:21;;;;;;-1:-1:-1;;;;;1191:21:5;1183:44;;;1098:136::o;969:123::-;1031:14;1064:21;;;:8;:21;;;;;;-1:-1:-1;;;;;1064:21:5;;969:123::o;650:24:3:-;;;;:::o;2364:553::-;2489:13;2543;2419:8;817:10;-1:-1:-1;;;;;783:44:3;:12;796:8;783:22;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;783:22:3;;;;;-1:-1:-1;783:22:3;;;;;;;;;;:30;-1:-1:-1;;;;;783:30:3;:44;;;;;-1:-1:-1;775:99:3;;-1:-1:-1;775:99:3;;;;-1:-1:-1;;;;;775:99:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2505:12;2518:8;2505:22;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;2505:22:3;;;;;-1:-1:-1;2505:22:3;;;;;;;;;;274:1:-1;2505:28:3;;2559:22;;-1:-1:-1;;;;;2505:28:3;;;;-1:-1:-1;2559:12:3;;:22;;-1:-1:-1;2505:22:3;-1:-1:-1;2505:22:3;;2559;;;;2505;2559;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;2559:22:3;;;;;-1:-1:-1;2559:22:3;;;;;;;;;;:28;;;-1:-1:-1;;;;;2559:28:3;;;;-1:-1:-1;2605:19:3;;;;;-1:-1:-1;2597:69:3;;-1:-1:-1;2597:69:3;;;;-1:-1:-1;;;;;2597:69:3;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;2597:69:3;;;;;;;;;;;;;;;-1:-1:-1;;;;;2684:19:3;;;;2676:69;;;;;-1:-1:-1;;;;;2676:69:3;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;2676:69:3;;;;;;;;;;;;;;;2768:5;-1:-1:-1;;;;;2755:35:3;;2791:5;2755:42;;;;;;;;;;;;;-1:-1:-1;;;;;2755:42:3;-1:-1:-1;;;;;2755:42:3;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2755:42:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;2807:46:3;;;;;;-1:-1:-1;;;;;2807:46:3;;;;;;;2847:4;2807:46;;;;;;:24;;;;-1:-1:-1;2807:24:3;;-1:-1:-1;2807:46:3;;;;;-1:-1:-1;;2807:46:3;;;;;;;;-1:-1:-1;2807:24:3;:46;;;5:2:-1;;;;30:1;27;20:12;5:2;2807:46:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;2863:47:3;;;;;;2899:10;2863:47;;;;;;-1:-1:-1;;;;;2863:35:3;;;-1:-1:-1;2863:35:3;;-1:-1:-1;2863:47:3;;;;;-1:-1:-1;;2863:47:3;;;;;;;-1:-1:-1;2863:35:3;:47;;;5:2:-1;;;;30:1;27;20:12;5:2;2863:47:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2863:47:3;;;;2364:553;;;;:::o;664:75:23:-;704:7;726:8;-1:-1:-1;;;;;726:8:23;664:75;:::o;620:24:3:-;;;;:::o;1092:200::-;1195:1;-1:-1:-1;;;;;1153:44:3;:12;1166:8;1153:22;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;1153:22:3;;;;;-1:-1:-1;1153:22:3;;;;;;;;;;:30;-1:-1:-1;;;;;1153:30:3;:44;;;;;-1:-1:-1;1145:87:3;;-1:-1:-1;1145:87:3;;;;-1:-1:-1;;;;;1145:87:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;1275:10;1242:12;1255:8;1242:22;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;1242:22:3;;;;;-1:-1:-1;1242:22:3;;;;;;;;;;:43;;-1:-1:-1;;1242:43:3;-1:-1:-1;;;;;1242:43:3;;;;;;;;;;;-1:-1:-1;;;1092:200:3:o;1298:527::-;1373:8;817:10;-1:-1:-1;;;;;783:44:3;:12;796:8;783:22;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;783:22:3;;;;;-1:-1:-1;783:22:3;;;;;;;;;;:30;-1:-1:-1;;;;;783:30:3;:44;;;;;-1:-1:-1;775:99:3;;-1:-1:-1;775:99:3;;;;-1:-1:-1;;;;;775:99:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1482:1;-1:-1:-1;;;;;1442:42:3;:12;1455:8;1442:22;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;1442:22:3;;;;;-1:-1:-1;1442:22:3;;;;;;;;;;274:1:-1;1442:28:3;;-1:-1:-1;;;;;1442:28:3;:42;;;;;-1:-1:-1;1434:85:3;;-1:-1:-1;1434:85:3;;;;-1:-1:-1;;;;;1434:85:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;1646:9;1636:20;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;;;;365:33;;1636:20:3;;;;;;;;;;1623:9;;:33;;-1:-1:-1;1615:89:3;;-1:-1:-1;;1615:89:3;;;;-1:-1:-1;;;;;1615:89:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1780:38;1808:9;1780:27;:38::i;:::-;1749:12;1762:8;1749:22;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;1749:22:3;;;;;-1:-1:-1;1749:22:3;;;;;;;;;;274:1:-1;1749:28:3;:69;;-1:-1:-1;;1749:69:3;-1:-1:-1;;;;;1749:69:3;;;;;;;;;;;-1:-1:-1;;;;;1298:527:3:o;3274:219::-;3345:17;3466:9;3460:16;3453:4;3442:9;3438:20;3435:1;3428:49;3415:62;3401:86;-1:-1:-1;;3401:86:3:o', 'source': 'pragma solidity ^0.4.24;\n\nimport "openzeppelin-solidity/contracts/ownership/Secondary.sol";\nimport "./MerkluxVM.sol";\nimport "./MerkluxStore.sol";\nimport "./MerkluxReducerRegistry.sol";\nimport "./MerkluxChain.sol";\n\n\n/**\n * @title Merklux\n * @dev Merklux is a state management smart contract to control the state with a\n * unidirectional data flow. It can be used for state verifications accross evm\n * based block chains.\n */\ncontract MerkluxFactory is Secondary, MerkluxReducerRegistry {\n    struct Merklux {\n        address primary;\n        address chain;\n        address store;\n    }\n\n    string public version;\n    bytes32 public chainCode;\n    bytes32 public storeCode;\n    mapping(string => Merklux) applications;\n\n    modifier onlyAppOwner(string _appName) {\n        require(applications[_appName].primary == msg.sender, "MerkluxFactory: only allowed for app owner");\n        _;\n    }\n\n    constructor (string _version, bytes32 _chainCode, bytes32 _storeCode) public Secondary() {\n        version = _version;\n        chainCode = _chainCode;\n        storeCode = _storeCode;\n    }\n\n    function createApp(string _appName) public {\n        require(applications[_appName].primary == address(0), "MerkluxFactory: already exists");\n        applications[_appName].primary = msg.sender;\n    }\n\n    function deployChain(string _appName, bytes _bytecode) public onlyAppOwner(_appName) {\n        // Should not be deployed before\n        require(applications[_appName].chain == address(0), "MerkluxFactory: already exists");\n        // hash value of the bytecode to deploy should be same with the configuration\n        require(chainCode == keccak256(_bytecode), "MerkluxFactory: bytecode has different hash");\n        // deploy and save address\n        applications[_appName].chain = _deployContractWithByteCode(_bytecode);\n    }\n\n    function deployStore(string _appName, bytes _bytecode) public onlyAppOwner(_appName) {\n        // Should not be deployed before\n        require(applications[_appName].store == address(0), "MerkluxFactory: already exists");\n        // hash value of the bytecode to deploy should be same with the configuration\n        require(storeCode == keccak256(_bytecode), "MerkluxFactory: bytecode has different hash");\n        // deploy and save address\n        applications[_appName].store = _deployContractWithByteCode(_bytecode);\n    }\n\n    function complete(string _appName) public onlyAppOwner(_appName) {\n        // Both contract should be deployed first\n        address chain = applications[_appName].chain;\n        address store = applications[_appName].store;\n        require(chain != address(0), "MerkluxFactory: chain is not deployed");\n        require(store != address(0), "MerkluxFactory: store is not deployed");\n        MerkluxStore(store).transferPrimary(chain);\n        MerkluxChain(chain).init(store, address(this));\n        MerkluxChain(chain).transferPrimary(msg.sender);\n    }\n\n    function getMerklux(string _appName) public view returns (address chain, address store) {\n        chain = applications[_appName].chain;\n        store = applications[_appName].store;\n        require(chain != address(0), "MerkluxFactory: chain is not deployed");\n        require(store != address(0), "MerkluxFactory: store is not deployed");\n    }\n\n    function _deployContractWithByteCode(bytes _bytecode) private returns (address _deployed) {\n        // Deploy\n        assembly {\n            _deployed := create(0, add(_bytecode, 0x20), mload(_bytecode))\n        }\n    }\n}\n' }, 'MerkluxReducer': { 'contractName': 'MerkluxReducer', 'abi': [{ 'constant': false, 'inputs': [{ 'name': '_tree', 'type': 'address' }, { 'name': '_from', 'type': 'address' }, { 'name': '_encodedParams', 'type': 'bytes' }], 'name': 'reduce', 'outputs': [{ 'name': '_encodedPairs', 'type': 'bytes' }], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }], 'bytecode': '0x', 'deployedBytecode': '0x', 'sourceMap': '', 'deployedSourceMap': '', 'source': 'pragma solidity ^0.4.24;\n\nimport "solidity-rlp/contracts/RLPReader.sol";\nimport "./interfaces/IStateTree.sol";\nimport "./utils/ReducerUtil.sol";\n\n\ncontract MerkluxReducer {\n    using RLPReader for RLPReader.RLPItem;\n    using RLPReader for bytes;\n    using ReducerUtil for ReducerUtil.RlpData;\n\n    /**\n    * @dev This only returns key-value pairs to update, and keys which are referred during the calculation.\n    * @param _tree The merkle tree to get & set states\n    * @param _from The address of the transaction caller\n    * @param _encodedParams RLP encoded data set for its reducer\n    * @return _encodedPairs rlp encoded keys value pairs to update\n    It is possible to process a merkle proof with a minimum number of nodes by submitting only the referred nodes.\n    */\n    function reduce(IStateTree _tree, address _from, bytes _encodedParams) public returns (bytes memory _encodedPairs);\n}\n' }, 'MerkluxReducerRegistry': { 'contractName': 'MerkluxReducerRegistry', 'abi': [{ 'constant': false, 'inputs': [{ 'name': '_code', 'type': 'bytes' }], 'name': 'registerReducer', 'outputs': [{ 'name': 'reducerKey', 'type': 'bytes32' }, { 'name': 'reducerAddress', 'type': 'address' }], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': true, 'inputs': [{ 'name': '_reducerKey', 'type': 'bytes32' }], 'name': 'getReducer', 'outputs': [{ 'name': '', 'type': 'address' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [{ 'name': '_reducerKey', 'type': 'bytes32' }], 'name': 'isDeployed', 'outputs': [{ 'name': '', 'type': 'bool' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }], 'bytecode': '0x608060405234801561001057600080fd5b506102ba806100206000396000f3006080604052600436106100565763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166364dc065c811461005b57806374c0ff4f146100e2578063907490aa1461010e575b600080fd5b34801561006757600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526100b494369492936024939284019190819084018382808284375094975061014f9650505050505050565b6040805192835273ffffffffffffffffffffffffffffffffffffffff90911660208301528051918290030190f35b3480156100ee57600080fd5b506100fa60043561023c565b604080519115158252519081900360200190f35b34801561011a57600080fd5b50610126600435610266565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b600080826040518082805190602001908083835b602083106101825780518252601f199092019160209182019101610163565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902091506101ba8261023c565b156101ea575060008181526020819052604090205473ffffffffffffffffffffffffffffffffffffffff16610237565b8251602084016000f06000838152602081905260409020805473ffffffffffffffffffffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff831617905590505b915091565b60009081526020819052604090205473ffffffffffffffffffffffffffffffffffffffff16151590565b60009081526020819052604090205473ffffffffffffffffffffffffffffffffffffffff16905600a165627a7a723058206694d168f7d9b9902bfb1806c92242962733236821acdb1511a55e7fd2cbe70a0029', 'deployedBytecode': '0x6080604052600436106100565763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166364dc065c811461005b57806374c0ff4f146100e2578063907490aa1461010e575b600080fd5b34801561006757600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526100b494369492936024939284019190819084018382808284375094975061014f9650505050505050565b6040805192835273ffffffffffffffffffffffffffffffffffffffff90911660208301528051918290030190f35b3480156100ee57600080fd5b506100fa60043561023c565b604080519115158252519081900360200190f35b34801561011a57600080fd5b50610126600435610266565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b600080826040518082805190602001908083835b602083106101825780518252601f199092019160209182019101610163565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902091506101ba8261023c565b156101ea575060008181526020819052604090205473ffffffffffffffffffffffffffffffffffffffff16610237565b8251602084016000f06000838152602081905260409020805473ffffffffffffffffffffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff831617905590505b915091565b60009081526020819052604090205473ffffffffffffffffffffffffffffffffffffffff16151590565b60009081526020819052604090205473ffffffffffffffffffffffffffffffffffffffff16905600a165627a7a723058206694d168f7d9b9902bfb1806c92242962733236821acdb1511a55e7fd2cbe70a0029', 'sourceMap': '109:1127:5:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;109:1127:5;;;;;;;', 'deployedSourceMap': '109:1127:5:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;354:609;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;354:609:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;354:609:5;;-1:-1:-1;354:609:5;;-1:-1:-1;;;;;;;354:609:5;;;;;;;;;;;;;;;;;;;;;;;;;1098:136;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1098:136:5;;;;;;;;;;;;;;;;;;;;;;;969:123;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;969:123:5;;;;;;;;;;;;;;;;;;;;;;;;354:609;408:18;428:22;549:5;539:16;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;539:16:5;;;;;;;;;;;;;;;;526:29;;569:22;580:10;569;:22::i;:::-;565:392;;;-1:-1:-1;635:8:5;:20;;;;;;;;;;;;;607:50;;565:392;789:5;783:12;776:4;769:5;765:16;762:1;755:41;844:8;:20;;;;;;;;;;:53;;-1:-1:-1;;844:53:5;;;;;;;;-1:-1:-1;565:392:5;354:609;;;:::o;1098:136::-;1160:4;1191:21;;;;;;;;;;;1183:44;1191:21;1183:44;;;1098:136::o;969:123::-;1031:14;1064:21;;;;;;;;;;;;;;969:123::o', 'source': 'pragma solidity ^0.4.24;\n\nimport "./MerkluxReducer.sol";\nimport "./interfaces/IMerkluxReducerRegistry.sol";\n\ncontract MerkluxReducerRegistry is IMerkluxReducerRegistry {\n    mapping(bytes32 => MerkluxReducer) reducers;\n\n    /**\n     * @dev It allows to update reducer by overwriting\n     *\n     * @param _code Compiled reducer code to deploy\n     */\n    function registerReducer(bytes _code) public returns (bytes32 reducerKey, address reducerAddress) {// TODO committee\n        // Check it is already deployed or not\n        reducerKey = keccak256(_code);\n        if (isDeployed(reducerKey)) {\n            return (reducerKey, address(reducers[reducerKey]));\n        } else {\n            // Deploy\n            assembly {\n                reducerAddress := create(0, add(_code, 0x20), mload(_code))\n            }\n            // Store\n            reducers[reducerKey] = MerkluxReducer(reducerAddress);\n            return (reducerKey, reducerAddress);\n        }\n    }\n\n    function getReducer(bytes32 _reducerKey) public view returns (MerkluxReducer) {\n        return reducers[_reducerKey];\n    }\n\n    function isDeployed(bytes32 _reducerKey) public view returns (bool) {\n        return address(reducers[_reducerKey]) != address(0);\n    }\n}\n' }, 'MerkluxStore': { 'contractName': 'MerkluxStore', 'abi': [{ 'constant': true, 'inputs': [{ 'name': '', 'type': 'uint256' }], 'name': 'references', 'outputs': [{ 'name': '', 'type': 'bytes' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': 'recipient', 'type': 'address' }], 'name': 'transferPrimary', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': true, 'inputs': [{ 'name': '', 'type': 'uint256' }], 'name': 'actions', 'outputs': [{ 'name': 'base', 'type': 'bytes32' }, { 'name': 'from', 'type': 'address' }, { 'name': 'actionNum', 'type': 'uint256' }, { 'name': 'nonce', 'type': 'uint256' }, { 'name': 'action', 'type': 'string' }, { 'name': 'deployReducer', 'type': 'bool' }, { 'name': 'data', 'type': 'bytes' }, { 'name': 'signature', 'type': 'bytes' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'primary', 'outputs': [{ 'name': '', 'type': 'address' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'inputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'constructor' }, { 'anonymous': false, 'inputs': [{ 'indexed': false, 'name': 'recipient', 'type': 'address' }], 'name': 'PrimaryTransferred', 'type': 'event' }, { 'constant': false, 'inputs': [{ 'name': '_registry', 'type': 'address' }, { 'name': '_action', 'type': 'string' }, { 'name': '_data', 'type': 'bytes' }], 'name': 'deployReducer', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': '_registry', 'type': 'address' }, { 'name': '_sender', 'type': 'address' }, { 'name': '_action', 'type': 'string' }, { 'name': '_data', 'type': 'bytes' }], 'name': 'runReducer', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': '_user', 'type': 'address' }, { 'name': '_nonce', 'type': 'uint256' }], 'name': 'increaseAccountActionNonce', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': '_prevBlockHash', 'type': 'bytes32' }, { 'name': '_from', 'type': 'address' }, { 'name': '_nonce', 'type': 'uint256' }, { 'name': '_action', 'type': 'string' }, { 'name': '_deployReducer', 'type': 'bool' }, { 'name': '_data', 'type': 'bytes' }, { 'name': '_signature', 'type': 'bytes' }], 'name': 'putAction', 'outputs': [{ 'name': '_actionHash', 'type': 'bytes32' }], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [], 'name': 'resetCurrentData', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': 'key', 'type': 'bytes' }], 'name': 'read', 'outputs': [{ 'name': '', 'type': 'bytes' }], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'getActionNum', 'outputs': [{ 'name': '', 'type': 'uint256' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'getStateRoot', 'outputs': [{ 'name': '', 'type': 'bytes32' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'getReferenceRoot', 'outputs': [{ 'name': '', 'type': 'bytes32' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'getActionRoot', 'outputs': [{ 'name': '', 'type': 'bytes32' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [{ 'name': '_key', 'type': 'bytes' }], 'name': 'get', 'outputs': [{ 'name': '', 'type': 'bytes' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [{ 'name': '_key', 'type': 'bytes' }], 'name': 'getProof', 'outputs': [{ 'name': '_value', 'type': 'bytes' }, { 'name': '_branchMask', 'type': 'uint256' }, { 'name': '_siblings', 'type': 'bytes32[]' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [{ 'name': 'actionHash', 'type': 'bytes32' }], 'name': 'getActionProof', 'outputs': [{ 'name': '_branchMask', 'type': 'uint256' }, { 'name': '_siblings', 'type': 'bytes32[]' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [{ 'name': '_sender', 'type': 'address' }], 'name': 'getAccountActionNonce', 'outputs': [{ 'name': '', 'type': 'uint256' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }], 'bytecode': '0x608060405234801561001057600080fd5b5060008054600160a060020a03191633179081905560408051600160a060020a03929092168252517f4101e71e974f68df5e9730cc223280b41654676bbb052cdcc735c3337e64d2d99181900360200190a1613092806100716000396000f3006080604052600436106100fb5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166304866b9081146101005780632348238c1461018d578063267e8754146101b0578063490ca34b146101d757806368125d6e146101ec578063693ac4fb1461025f57806372c18fa514610378578063776908881461038d57806378f0fc64146103a257806383240f831461044f5780638650a6c9146105ec5780638bf4515c14610691578063a026809b146106ea578063c0ec112f146107dd578063c6dbdf61146107fe578063cd605a1a1461082f578063d6d7d52514610844578063e354b0c61461089d575b600080fd5b34801561010c57600080fd5b506101186004356108c1565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561015257818101518382015260200161013a565b50505050905090810190601f16801561017f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561019957600080fd5b506101ae600160a060020a0360043516610968565b005b3480156101bc57600080fd5b506101c56109fb565b60408051918252519081900360200190f35b3480156101e357600080fd5b506101c5610a0d565b3480156101f857600080fd5b50610204600435610a13565b6040518083815260200180602001828103825283818151815260200191508051906020019060200280838360005b8381101561024a578181015183820152602001610232565b50505050905001935050505060405180910390f35b34801561026b57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102b8943694929360249392840191908190840183828082843750949750610a509650505050505050565b604051808060200184815260200180602001838103835286818151815260200191508051906020019080838360005b838110156102ff5781810151838201526020016102e7565b50505050905090810190601f16801561032c5780820380516001836020036101000a031916815260200191505b508381038252845181528451602091820191808701910280838360005b83811015610361578181015183820152602001610349565b505050509050019550505050505060405180910390f35b34801561038457600080fd5b506101ae610a84565b34801561039957600080fd5b506101c5610ab5565b3480156103ae57600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526101ae948235600160a060020a039081169560248035909216953695946064949293019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750610ac19650505050505050565b34801561045b57600080fd5b50610467600435610dce565b60405180896000191660001916815260200188600160a060020a0316600160a060020a0316815260200187815260200186815260200180602001851515151581526020018060200180602001848103845288818151815260200191508051906020019080838360005b838110156104e85781810151838201526020016104d0565b50505050905090810190601f1680156105155780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b83811015610548578181015183820152602001610530565b50505050905090810190601f1680156105755780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b838110156105a8578181015183820152602001610590565b50505050905090810190601f1680156105d55780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390f35b3480156105f857600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526101ae958335600160a060020a031695369560449491939091019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750610fd29650505050505050565b34801561069d57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101189436949293602493928401919081908401838280828437509497506111b19650505050505050565b3480156106f657600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526101c594803594600160a060020a03602480359190911695604435953695608494930191819084018382808284375050604080516020601f818a01358b0180359182018390048302840183018552818452989b8a3515159b909a90999401975091955091820193509150819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506112719650505050505050565b3480156107e957600080fd5b506101c5600160a060020a03600435166114d0565b34801561080a57600080fd5b506108136114eb565b60408051600160a060020a039092168252519081900360200190f35b34801561083b57600080fd5b506101c56114fa565b34801561085057600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101189436949293602493928401919081908401838280828437509497506115069650505050505050565b3480156108a957600080fd5b506101ae600160a060020a0360043516602435611519565b60178054829081106108cf57fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152935090918301828280156109605780601f1061093557610100808354040283529160200191610960565b820191906000526020600020905b81548152906001019060200180831161094357829003601f168201915b505050505081565b600054600160a060020a0316331461097f57600080fd5b600160a060020a038116151561099457600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03838116919091179182905560408051929091168252517f4101e71e974f68df5e9730cc223280b41654676bbb052cdcc735c3337e64d2d9916020908290030190a150565b6000610a07600f611633565b90505b90565b60015490565b60408051602080820184905282518083039091018152908201909152600090606090610a4790600f9063ffffffff61163a16565b91509150915091565b6060600081610a6660038563ffffffff61163a16565b9092509050610a7c60038563ffffffff6116af16565b949193509150565b600054600160a060020a03163314610a9b57600080fd5b610aa36116cb565b610aab6116ed565b610ab361170f565b565b6000610a076009611633565b6000805460609081908390600160a060020a03163314610ae057600080fd5b610aea888761176b565b9350600160a060020a0384161515610b71576040805160e560020a62461bcd028152602060048201526024808201527f4d65726b6c757853746f72653a207265647563657220646f6573206e6f74206560448201527f7869737400000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6040517f15be20850000000000000000000000000000000000000000000000000000000081523060048201818152600160a060020a038a81166024850152606060448501908152895160648601528951918916946315be208594938d938c93919260840190602085019080838360005b83811015610bf9578181015183820152602001610be1565b50505050905090810190601f168015610c265780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610c4757600080fd5b505af1158015610c5b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610c8457600080fd5b810190808051640100000000811115610c9c57600080fd5b82016020810184811115610caf57600080fd5b8151640100000000811182820187101715610cc957600080fd5b50509291905050509250610ce4610cdf84611893565b6118e4565b805190925060011615610d67576040805160e560020a62461bcd02815260206004820152603460248201527f4d65726b6c757853746f72653a20726564756365722073686f756c642072657460448201527f75726e20726c7020656e636f646564206c697374000000000000000000000000606482015290519081900360840190fd5b5060005b815160029004811015610dc457610dbc610d9e8383600202815181101515610d8f57fe5b906020019060200201516119b7565b610db58484600202600101815181101515610d8f57fe5b6000611a29565b600101610d6b565b5050505050505050565b6018805482908110610ddc57fe5b600091825260209182902060089190910201805460018083015460028085015460038601546004870180546040805161010098831615989098026000190190911694909404601f81018a90048a0287018a01909452838652959850600160a060020a0390931696909592949293929190830182828015610e9d5780601f10610e7257610100808354040283529160200191610e9d565b820191906000526020600020905b815481529060010190602001808311610e8057829003601f168201915b50505050600583015460068401805460408051602060026101006001861615026000190190941693909304601f8101849004840282018401909252818152959660ff9094169593945090830182828015610f385780601f10610f0d57610100808354040283529160200191610f38565b820191906000526020600020905b815481529060010190602001808311610f1b57829003601f168201915b5050505060078301805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152949594935090830182828015610fc85780601f10610f9d57610100808354040283529160200191610fc8565b820191906000526020600020905b815481529060010190602001808311610fab57829003601f168201915b5050505050905088565b600080548190606090600160a060020a03163314610fef57600080fd5b6040517f64dc065c000000000000000000000000000000000000000000000000000000008152602060048201818152865160248401528651600160a060020a038a16936364dc065c9389939283926044019185019080838360005b8381101561106257818101518382015260200161104a565b50505050905090810190601f16801561108f5780820380516001836020036101000a031916815260200191505b50925050506040805180830381600087803b1580156110ad57600080fd5b505af11580156110c1573d6000803e3d6000fd5b505050506040513d60408110156110d757600080fd5b508051602090910151865191945092501515611163576040805160e560020a62461bcd02815260206004820152602960248201527f4d65726b6c757853746f72653a20616374696f6e2073686f756c64206e6f742060448201527f62652061206e756c6c0000000000000000000000000000000000000000000000606482015290519081900360840190fd5b61116c85611b2b565b604080516020808201879052825180830390910181529082019091529091506111989082906001611a29565b6111a960028363ffffffff611c4716565b505050505050565b60606111bb6114eb565b600160a060020a031633600160a060020a031614806111e657506111e660023363ffffffff611c9516565b1515611262576040805160e560020a62461bcd02815260206004820152602760248201527f4d65726b6c757853746f72653a206f6e6c7920616c6c6f77656420666f72207260448201527f6564756365727300000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b61126b82611ccc565b92915050565b600061127b612d74565b60008054600160a060020a0316331461129357600080fd5b60408051610100810182528b8152600160a060020a03808c16602080840191825260018054958501958652606085018e8152608086018e81528d151560a088015260c087018d905260e087018c905260188054938401808255600091909152875160089094027fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d2e810194855595517fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d2f870180549190981673ffffffffffffffffffffffffffffffffffffffff199091161790965596517fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d30850155517fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d31840155945180519497509294879490936113ed937fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d3201920190612dc8565b5060a082015160058201805460ff191691151591909117905560c08201518051611421916006840191602090910190612dc8565b5060e0820151805161143d916007840191602090910190612dc8565b5050505061144a82611ce8565b6040805160208082018490528251808303909101815260808201835260019282019283527f31000000000000000000000000000000000000000000000000000000000000006060909201919091529192506114ad91600f9163ffffffff611e2b16565b600180546114c09163ffffffff611fcf16565b6001559998505050505050505050565b600160a060020a031660009081526016602052604090205490565b600054600160a060020a031690565b6000610a076003611633565b606061126b60038363ffffffff6116af16565b600054600160a060020a0316331461153057600080fd5b600160a060020a038216600090815260166020526040902054811161159f576040805160e560020a62461bcd02815260206004820152601b60248201527f4d65726b6c757853746f72653a20696e76616c6964206e6f6e63650000000000604482015290519081900360640190fd5b600160a060020a038216600090815260166020526040902054151561161757601580546001810182556000919091527f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec47501805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0384161790555b600160a060020a03909116600090815260166020526040902055565b6002015490565b600060606116a484846040518082805190602001908083835b602083106116725780518252601f199092019160209182019101611653565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020611fec565b915091509250929050565b60606116c4836116bf8585612295565b6122fd565b9392505050565b6000600b819055600c819055600d819055600e819055610ab390601790612e46565b6116f960186000612e64565b6000601181905560128190556013819055601455565b60005b60155481101561175c576016600060158381548110151561172f57fe5b6000918252602080832090910154600160a060020a03168352820192909252604001812055600101611712565b61176860156000612e85565b50565b600080606080600061177c86611b2b565b925061178783611ccc565b91508151602014156117fa575060005b60208110156117fa578060080282828151811015156117b257fe5b60209101015160029190910a60f860020a918290049091027fff0000000000000000000000000000000000000000000000000000000000000016049390931792600101611797565b604080517f907490aa000000000000000000000000000000000000000000000000000000008152600481018690529051600160a060020a0389169163907490aa9160248083019260209291908290030181600087803b15801561185c57600080fd5b505af1158015611870573d6000803e3d6000fd5b505050506040513d602081101561188657600080fd5b5051979650505050505050565b61189b612ea3565b60008251600014156118c257604080518082019091526000808252602082015291506118de565b5050604080518082019091528151815260208281019082018190525b50919050565b60606000806000806118f58661239d565b151561190057600080fd5b611909866123ca565b93508360405190808252806020026020018201604052801561194557816020015b611932612ea3565b81526020019060019003908161192a5790505b509450611955866020015161241a565b8660200151019250600090505b838110156119ae576119738361247d565b9150604080519081016040528083815260200184815250858281518110151561199857fe5b6020908102909101015291810191600101611962565b50505050919050565b6060600080606060006119cd866020015161241a565b9350838660000151039250826040519080825280601f01601f191660200182016040528015611a06578160200160208202803883390190505b509150816020019050611a2084876020015101828561250e565b50949350505050565b80158015611a38575060018351115b15611b1c5782517f26000000000000000000000000000000000000000000000000000000000000009084906000908110611a6e57fe5b60209101015160f860020a90819004027fff00000000000000000000000000000000000000000000000000000000000000161415611b1c576040805160e560020a62461bcd02815260206004820152602160248201527f507265666978202620697320726573657276656420666f72207265647563657260448201527f7300000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b611b268383612555565b505050565b606080600083915081516001016040519080825280601f01601f191660200182016040528015611b65578160200160208202803883390190505b5092507f2600000000000000000000000000000000000000000000000000000000000000836000815181101515611b9857fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600190505b8251811015611c40578160018203815181101515611be757fe5b90602001015160f860020a900460f860020a028382815181101515611c0857fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600101611bcd565b5050919050565b600160a060020a0381161515611c5c57600080fd5b611c668282611c95565b15611c7057600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6000600160a060020a0382161515611cac57600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b6060611cd782612574565b61126b60038363ffffffff6116af16565b600081608001518260c00151836000015184606001518560a001516040516020018086805190602001908083835b60208310611d355780518252601f199092019160209182019101611d16565b51815160209384036101000a600019018019909216911617905288519190930192880191508083835b60208310611d7d5780518252601f199092019160209182019101611d5e565b51815160209384036101000a60001901801990921691161790529201958652508481019390935250151560f860020a0260408084019190915280518084036021018152604190930190819052825192945092508291908401908083835b60208310611df95780518252601f199092019160209182019101611dda565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912095945050505050565b611e33612ea3565b6000611e3d612eba565b6040805190810160405280866040518082805190602001908083835b60208310611e785780518252601f199092019160209182019101611e59565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191681526020016101008152509250836040518082805190602001908083835b60208310611ee65780518252601f199092019160209182019101611ec7565b51815160209384036101000a6000190180199092169116179052604080519290940182900390912060008181528c8352939093208951939750611f30955093508801919050612dc8565b506003860154158015611f4557506005860154155b15611f595760208101839052818152611f9c565b604080518082018252600388015481528151808301909252600488015482526005880154602083810191909152810191909152611f99908790858561261a565b90505b611fa58161275a565b60028701558051600387015560209081015180516004880155015160059095019490945550505050565b600082820183811015611fe157600080fd5b8091505b5092915050565b60006060611ff8612ea3565b612000612eba565b612008612eda565b600080612013612ea3565b61201b612ea3565b6000612025612ea3565b600060408051908101604052808e60001916815260200161010081525099508d600301604080519081016040529081600082015460001916600019168152602001600182016040805190810160405290816000820154600019166000191681526020016001820154815250508152505098505b6120a68a8a602001516127c4565b6020808c015181015190830151929750909550146120c357600080fd5b602084015115156120d35761220f565b60208501519690960160ff81900360020a9b909b179a600101956120f6846127e7565b80935081945050506121738e60010160008b60000151600019166000191681526020019081526020016000206000018460010360028110151561213557fe5b60408051808201825260039290920292909201805482528251808401909352600181015483526002015460208381019190915281019190915261275a565b60018701968990610100811061218557fe5b602002019060001916908160001916815250508d60010160008a6000015160001916600019168152602001908152602001600020600001836002811015156121c957fe5b6040805180820182526003929092029290920180548252825180840190935260018101548352600201546020838101919091528101919091529199509097508890612098565b60008611156122845785604051908082528060200260200182016040528015612242578160200160208202803883390190505b509a50600090505b85811015612284578781610100811061225f57fe5b60200201518b8281518110151561227257fe5b6020908102909101015260010161224a565b505050505050505050509250929050565b60006116c483836040518082805190602001908083835b602083106122cb5780518252601f1990920191602091820191016122ac565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902061284e565b6000818152602083815260409182902080548351601f60026101006001851615026000190190931692909204918201849004840281018401909452808452606093928301828280156123905780601f1061236557610100808354040283529160200191612390565b820191906000526020600020905b81548152906001019060200180831161237357829003601f168201915b5050505050905092915050565b6020810151805160009190821a9060c060ff831610156123c05760009250611c40565b5060019392505050565b600080600080600092506123e1856020015161241a565b6020860151865191810193500190505b80821015612411576124028261247d565b600190930192909101906123f1565b50909392505050565b8051600090811a608081101561243357600091506118de565b60b881108061244e575060c0811080159061244e575060f881105b1561245c57600191506118de565b60c08110156124715760b519810191506118de565b60f519810191506118de565b8051600090811a608081101561249657600191506118de565b60b88110156124ab57607e19810191506118de565b60c08110156124d85760b78103600184019350806020036101000a845104600182018101935050506118de565b60f88110156124ed5760be19810191506118de565b60019290920151602083900360f7016101000a900490910160f51901919050565b60005b60208210612533578351835260209384019390920191601f1990910190612511565b50915181516020939093036101000a6000190180199091169216919091179052565b61255e82612574565b6125706003838363ffffffff611e2b16565b5050565b61258560098263ffffffff6116af16565b51151561176857601780546001810180835560009290925282516125d0917fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c1501906020850190612dc8565b505060408051808201909152600181527f3100000000000000000000000000000000000000000000000000000000000000602082015261176890600990839063ffffffff611e2b16565b612622612eba565b61262a612ea3565b612632612ea3565b60008061263d612ea3565b612645612efb565b6020808b0151810151908a0151101561265d57600080fd5b61266b898b602001516127c4565b60208101519197509550151561268357879350612738565b6020808b015181015190870151106126ac576126a58b8b60000151878b6128d4565b9350612738565b6126b5856127e7565b604080518082019091528a81526020810182905283519295509093509084600281106126dd57fe5b602002018190525060408051908101604052808b600001516000191681526020016127138c6020015189602001516001016129d4565b9052815160018590036002811061272657fe5b60200201526127358b82612a08565b93505b5050604080518082019091529182525060208101929092525095945050505050565b80516020808301518082015190516040805180850195909552848101929092526060808501919091528151808503909101815260809093019081905282516000939282919084019080838360208310611df95780518252601f199092019160209182019101611dda565b6127cc612ea3565b6127d4612ea3565b6116a4846127e28587612a6f565b612aef565b60006127f1612ea3565b602083015160001061280257600080fd5b50508051604080518082019091528251600202815260209283015160001901928101929092527f8000000000000000000000000000000000000000000000000000000000000000900491565b6000612858612ea3565b600384015415801561286c57506005840154155b1561287a5760009150611fe5565b50604080518082018252838152610100602080830191909152825180840184526003870154815283518085019094526004870154845260058701548483015290810192909252906128cd90859083612b68565b9150611fe5565b60006128de612efb565b60006128e8612ea3565b60208601516001106128f957600080fd5b60008781526001890160209081526040808320815160608101909252909290918391908201908390600290835b82821015612974576040805180820182526003840286018054825282518084019093526001808201548452600290910154602084810191909152808301939093529083529092019101612926565b50505050815250509250612987866127e7565b845191935091506129ab908990846002811061299f57fe5b6020020151838861261a565b835183600281106129b857fe5b60200201526129c8888885612bef565b98975050505050505050565b6129dc612ea3565b60208301518211156129ed57600080fd5b60208084015183900390820152915160029190910a02815290565b600080612a1483612c1e565b8351516000828152600196870160209081526040909120825181559181015180519783019790975595860151600282015593518501518051600386015585015180516004860155909401516005909301929092555090919050565b6000806000808460200151866020015110612a8e578460200151612a94565b85602001515b855187519194501891507f800000000000000000000000000000000000000000000000000000000000000090505b82841015612ae65780821615612ad757612ae6565b60019093019290800190612ac2565b50505092915050565b612af7612ea3565b612aff612ea3565b83602001518311158015612b1557506101008311155b1515612b2057600080fd5b60208201839052821515612b375760008252612b4b565b835160001961010085900360020a01191682525b60208085015184900390820152925160029290920a909102825291565b6000612b72612ea3565b612b7a612ea3565b602080860151810151908501511015612b9257600080fd5b612ba08486602001516127c4565b602081015191935091501515612bb95784519250612be6565b6020808601518101519083015110612be157612bda86866000015183612c93565b9250612be6565b600092505b50509392505050565b6000828152600184016020526040812081612c0a8282612f0f565b5050612c168483612a08565b949350505050565b8051600090612c3390825b602002015161275a565b8251612c40906001612c29565b6040805160208082019490945280820192909252805180830382018152606090920190819052815191929091829184019080838360208310611df95780518252601f199092019160209182019101611dda565b6000612c9d612efb565b6000612ca7612ea3565b6020850151600110612cb857600080fd5b60008681526001880160209081526040808320815160608101909252909290918391908201908390600290835b82821015612d33576040805180820182526003840286018054825282518084019093526001808201548452600290910154602084810191909152808301939093529083529092019101612ce5565b50505050815250509250612d46856127e7565b84519193509150612d699088908460028110612d5e57fe5b602002015183612b68565b979650505050505050565b61010060405190810160405280600080191681526020016000600160a060020a0316815260200160008152602001600081526020016060815260200160001515815260200160608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612e0957805160ff1916838001178555612e36565b82800160010185558215612e36579182015b82811115612e36578251825591602001919060010190612e1b565b50612e42929150612f39565b5090565b50805460008255906000526020600020908101906117689190612f53565b50805460008255600802906000526020600020908101906117689190612f76565b50805460008255906000526020600020908101906117689190612f39565b604080518082019091526000808252602082015290565b60408051606081019091526000815260208101612ed5612ea3565b905290565b61200060405190810160405280610100906020820280388339509192915050565b60c060405190810160405280612ed5612ff4565b50600080825560018201819055600282018190556003820181905560048201819055600590910155565b610a0a91905b80821115612e425760008155600101612f3f565b610a0a91905b80821115612e42576000612f6d8282613022565b50600101612f59565b610a0a91905b80821115612e4257600080825560018201805473ffffffffffffffffffffffffffffffffffffffff191690556002820181905560038201819055612fc36004830182613022565b60058201805460ff19169055612fdd600683016000613022565b612feb600783016000613022565b50600801612f7c565b60c0604051908101604052806002905b61300c612eba565b8152602001906001900390816130045790505090565b50805460018160011615610100020316600290046000825580601f106130485750611768565b601f0160209004906000526020600020908101906117689190612f395600a165627a7a72305820b76b529409d88370ae5444d14f855873d89530745f14fbb56a4a26cabc67f0600029', 'deployedBytecode': '0x6080604052600436106100fb5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166304866b9081146101005780632348238c1461018d578063267e8754146101b0578063490ca34b146101d757806368125d6e146101ec578063693ac4fb1461025f57806372c18fa514610378578063776908881461038d57806378f0fc64146103a257806383240f831461044f5780638650a6c9146105ec5780638bf4515c14610691578063a026809b146106ea578063c0ec112f146107dd578063c6dbdf61146107fe578063cd605a1a1461082f578063d6d7d52514610844578063e354b0c61461089d575b600080fd5b34801561010c57600080fd5b506101186004356108c1565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561015257818101518382015260200161013a565b50505050905090810190601f16801561017f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561019957600080fd5b506101ae600160a060020a0360043516610968565b005b3480156101bc57600080fd5b506101c56109fb565b60408051918252519081900360200190f35b3480156101e357600080fd5b506101c5610a0d565b3480156101f857600080fd5b50610204600435610a13565b6040518083815260200180602001828103825283818151815260200191508051906020019060200280838360005b8381101561024a578181015183820152602001610232565b50505050905001935050505060405180910390f35b34801561026b57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102b8943694929360249392840191908190840183828082843750949750610a509650505050505050565b604051808060200184815260200180602001838103835286818151815260200191508051906020019080838360005b838110156102ff5781810151838201526020016102e7565b50505050905090810190601f16801561032c5780820380516001836020036101000a031916815260200191505b508381038252845181528451602091820191808701910280838360005b83811015610361578181015183820152602001610349565b505050509050019550505050505060405180910390f35b34801561038457600080fd5b506101ae610a84565b34801561039957600080fd5b506101c5610ab5565b3480156103ae57600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526101ae948235600160a060020a039081169560248035909216953695946064949293019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750610ac19650505050505050565b34801561045b57600080fd5b50610467600435610dce565b60405180896000191660001916815260200188600160a060020a0316600160a060020a0316815260200187815260200186815260200180602001851515151581526020018060200180602001848103845288818151815260200191508051906020019080838360005b838110156104e85781810151838201526020016104d0565b50505050905090810190601f1680156105155780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b83811015610548578181015183820152602001610530565b50505050905090810190601f1680156105755780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b838110156105a8578181015183820152602001610590565b50505050905090810190601f1680156105d55780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390f35b3480156105f857600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526101ae958335600160a060020a031695369560449491939091019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750610fd29650505050505050565b34801561069d57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101189436949293602493928401919081908401838280828437509497506111b19650505050505050565b3480156106f657600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526101c594803594600160a060020a03602480359190911695604435953695608494930191819084018382808284375050604080516020601f818a01358b0180359182018390048302840183018552818452989b8a3515159b909a90999401975091955091820193509150819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506112719650505050505050565b3480156107e957600080fd5b506101c5600160a060020a03600435166114d0565b34801561080a57600080fd5b506108136114eb565b60408051600160a060020a039092168252519081900360200190f35b34801561083b57600080fd5b506101c56114fa565b34801561085057600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101189436949293602493928401919081908401838280828437509497506115069650505050505050565b3480156108a957600080fd5b506101ae600160a060020a0360043516602435611519565b60178054829081106108cf57fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152935090918301828280156109605780601f1061093557610100808354040283529160200191610960565b820191906000526020600020905b81548152906001019060200180831161094357829003601f168201915b505050505081565b600054600160a060020a0316331461097f57600080fd5b600160a060020a038116151561099457600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03838116919091179182905560408051929091168252517f4101e71e974f68df5e9730cc223280b41654676bbb052cdcc735c3337e64d2d9916020908290030190a150565b6000610a07600f611633565b90505b90565b60015490565b60408051602080820184905282518083039091018152908201909152600090606090610a4790600f9063ffffffff61163a16565b91509150915091565b6060600081610a6660038563ffffffff61163a16565b9092509050610a7c60038563ffffffff6116af16565b949193509150565b600054600160a060020a03163314610a9b57600080fd5b610aa36116cb565b610aab6116ed565b610ab361170f565b565b6000610a076009611633565b6000805460609081908390600160a060020a03163314610ae057600080fd5b610aea888761176b565b9350600160a060020a0384161515610b71576040805160e560020a62461bcd028152602060048201526024808201527f4d65726b6c757853746f72653a207265647563657220646f6573206e6f74206560448201527f7869737400000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6040517f15be20850000000000000000000000000000000000000000000000000000000081523060048201818152600160a060020a038a81166024850152606060448501908152895160648601528951918916946315be208594938d938c93919260840190602085019080838360005b83811015610bf9578181015183820152602001610be1565b50505050905090810190601f168015610c265780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610c4757600080fd5b505af1158015610c5b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610c8457600080fd5b810190808051640100000000811115610c9c57600080fd5b82016020810184811115610caf57600080fd5b8151640100000000811182820187101715610cc957600080fd5b50509291905050509250610ce4610cdf84611893565b6118e4565b805190925060011615610d67576040805160e560020a62461bcd02815260206004820152603460248201527f4d65726b6c757853746f72653a20726564756365722073686f756c642072657460448201527f75726e20726c7020656e636f646564206c697374000000000000000000000000606482015290519081900360840190fd5b5060005b815160029004811015610dc457610dbc610d9e8383600202815181101515610d8f57fe5b906020019060200201516119b7565b610db58484600202600101815181101515610d8f57fe5b6000611a29565b600101610d6b565b5050505050505050565b6018805482908110610ddc57fe5b600091825260209182902060089190910201805460018083015460028085015460038601546004870180546040805161010098831615989098026000190190911694909404601f81018a90048a0287018a01909452838652959850600160a060020a0390931696909592949293929190830182828015610e9d5780601f10610e7257610100808354040283529160200191610e9d565b820191906000526020600020905b815481529060010190602001808311610e8057829003601f168201915b50505050600583015460068401805460408051602060026101006001861615026000190190941693909304601f8101849004840282018401909252818152959660ff9094169593945090830182828015610f385780601f10610f0d57610100808354040283529160200191610f38565b820191906000526020600020905b815481529060010190602001808311610f1b57829003601f168201915b5050505060078301805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152949594935090830182828015610fc85780601f10610f9d57610100808354040283529160200191610fc8565b820191906000526020600020905b815481529060010190602001808311610fab57829003601f168201915b5050505050905088565b600080548190606090600160a060020a03163314610fef57600080fd5b6040517f64dc065c000000000000000000000000000000000000000000000000000000008152602060048201818152865160248401528651600160a060020a038a16936364dc065c9389939283926044019185019080838360005b8381101561106257818101518382015260200161104a565b50505050905090810190601f16801561108f5780820380516001836020036101000a031916815260200191505b50925050506040805180830381600087803b1580156110ad57600080fd5b505af11580156110c1573d6000803e3d6000fd5b505050506040513d60408110156110d757600080fd5b508051602090910151865191945092501515611163576040805160e560020a62461bcd02815260206004820152602960248201527f4d65726b6c757853746f72653a20616374696f6e2073686f756c64206e6f742060448201527f62652061206e756c6c0000000000000000000000000000000000000000000000606482015290519081900360840190fd5b61116c85611b2b565b604080516020808201879052825180830390910181529082019091529091506111989082906001611a29565b6111a960028363ffffffff611c4716565b505050505050565b60606111bb6114eb565b600160a060020a031633600160a060020a031614806111e657506111e660023363ffffffff611c9516565b1515611262576040805160e560020a62461bcd02815260206004820152602760248201527f4d65726b6c757853746f72653a206f6e6c7920616c6c6f77656420666f72207260448201527f6564756365727300000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b61126b82611ccc565b92915050565b600061127b612d74565b60008054600160a060020a0316331461129357600080fd5b60408051610100810182528b8152600160a060020a03808c16602080840191825260018054958501958652606085018e8152608086018e81528d151560a088015260c087018d905260e087018c905260188054938401808255600091909152875160089094027fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d2e810194855595517fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d2f870180549190981673ffffffffffffffffffffffffffffffffffffffff199091161790965596517fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d30850155517fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d31840155945180519497509294879490936113ed937fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d3201920190612dc8565b5060a082015160058201805460ff191691151591909117905560c08201518051611421916006840191602090910190612dc8565b5060e0820151805161143d916007840191602090910190612dc8565b5050505061144a82611ce8565b6040805160208082018490528251808303909101815260808201835260019282019283527f31000000000000000000000000000000000000000000000000000000000000006060909201919091529192506114ad91600f9163ffffffff611e2b16565b600180546114c09163ffffffff611fcf16565b6001559998505050505050505050565b600160a060020a031660009081526016602052604090205490565b600054600160a060020a031690565b6000610a076003611633565b606061126b60038363ffffffff6116af16565b600054600160a060020a0316331461153057600080fd5b600160a060020a038216600090815260166020526040902054811161159f576040805160e560020a62461bcd02815260206004820152601b60248201527f4d65726b6c757853746f72653a20696e76616c6964206e6f6e63650000000000604482015290519081900360640190fd5b600160a060020a038216600090815260166020526040902054151561161757601580546001810182556000919091527f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec47501805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0384161790555b600160a060020a03909116600090815260166020526040902055565b6002015490565b600060606116a484846040518082805190602001908083835b602083106116725780518252601f199092019160209182019101611653565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020611fec565b915091509250929050565b60606116c4836116bf8585612295565b6122fd565b9392505050565b6000600b819055600c819055600d819055600e819055610ab390601790612e46565b6116f960186000612e64565b6000601181905560128190556013819055601455565b60005b60155481101561175c576016600060158381548110151561172f57fe5b6000918252602080832090910154600160a060020a03168352820192909252604001812055600101611712565b61176860156000612e85565b50565b600080606080600061177c86611b2b565b925061178783611ccc565b91508151602014156117fa575060005b60208110156117fa578060080282828151811015156117b257fe5b60209101015160029190910a60f860020a918290049091027fff0000000000000000000000000000000000000000000000000000000000000016049390931792600101611797565b604080517f907490aa000000000000000000000000000000000000000000000000000000008152600481018690529051600160a060020a0389169163907490aa9160248083019260209291908290030181600087803b15801561185c57600080fd5b505af1158015611870573d6000803e3d6000fd5b505050506040513d602081101561188657600080fd5b5051979650505050505050565b61189b612ea3565b60008251600014156118c257604080518082019091526000808252602082015291506118de565b5050604080518082019091528151815260208281019082018190525b50919050565b60606000806000806118f58661239d565b151561190057600080fd5b611909866123ca565b93508360405190808252806020026020018201604052801561194557816020015b611932612ea3565b81526020019060019003908161192a5790505b509450611955866020015161241a565b8660200151019250600090505b838110156119ae576119738361247d565b9150604080519081016040528083815260200184815250858281518110151561199857fe5b6020908102909101015291810191600101611962565b50505050919050565b6060600080606060006119cd866020015161241a565b9350838660000151039250826040519080825280601f01601f191660200182016040528015611a06578160200160208202803883390190505b509150816020019050611a2084876020015101828561250e565b50949350505050565b80158015611a38575060018351115b15611b1c5782517f26000000000000000000000000000000000000000000000000000000000000009084906000908110611a6e57fe5b60209101015160f860020a90819004027fff00000000000000000000000000000000000000000000000000000000000000161415611b1c576040805160e560020a62461bcd02815260206004820152602160248201527f507265666978202620697320726573657276656420666f72207265647563657260448201527f7300000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b611b268383612555565b505050565b606080600083915081516001016040519080825280601f01601f191660200182016040528015611b65578160200160208202803883390190505b5092507f2600000000000000000000000000000000000000000000000000000000000000836000815181101515611b9857fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600190505b8251811015611c40578160018203815181101515611be757fe5b90602001015160f860020a900460f860020a028382815181101515611c0857fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600101611bcd565b5050919050565b600160a060020a0381161515611c5c57600080fd5b611c668282611c95565b15611c7057600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6000600160a060020a0382161515611cac57600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b6060611cd782612574565b61126b60038363ffffffff6116af16565b600081608001518260c00151836000015184606001518560a001516040516020018086805190602001908083835b60208310611d355780518252601f199092019160209182019101611d16565b51815160209384036101000a600019018019909216911617905288519190930192880191508083835b60208310611d7d5780518252601f199092019160209182019101611d5e565b51815160209384036101000a60001901801990921691161790529201958652508481019390935250151560f860020a0260408084019190915280518084036021018152604190930190819052825192945092508291908401908083835b60208310611df95780518252601f199092019160209182019101611dda565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912095945050505050565b611e33612ea3565b6000611e3d612eba565b6040805190810160405280866040518082805190602001908083835b60208310611e785780518252601f199092019160209182019101611e59565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191681526020016101008152509250836040518082805190602001908083835b60208310611ee65780518252601f199092019160209182019101611ec7565b51815160209384036101000a6000190180199092169116179052604080519290940182900390912060008181528c8352939093208951939750611f30955093508801919050612dc8565b506003860154158015611f4557506005860154155b15611f595760208101839052818152611f9c565b604080518082018252600388015481528151808301909252600488015482526005880154602083810191909152810191909152611f99908790858561261a565b90505b611fa58161275a565b60028701558051600387015560209081015180516004880155015160059095019490945550505050565b600082820183811015611fe157600080fd5b8091505b5092915050565b60006060611ff8612ea3565b612000612eba565b612008612eda565b600080612013612ea3565b61201b612ea3565b6000612025612ea3565b600060408051908101604052808e60001916815260200161010081525099508d600301604080519081016040529081600082015460001916600019168152602001600182016040805190810160405290816000820154600019166000191681526020016001820154815250508152505098505b6120a68a8a602001516127c4565b6020808c015181015190830151929750909550146120c357600080fd5b602084015115156120d35761220f565b60208501519690960160ff81900360020a9b909b179a600101956120f6846127e7565b80935081945050506121738e60010160008b60000151600019166000191681526020019081526020016000206000018460010360028110151561213557fe5b60408051808201825260039290920292909201805482528251808401909352600181015483526002015460208381019190915281019190915261275a565b60018701968990610100811061218557fe5b602002019060001916908160001916815250508d60010160008a6000015160001916600019168152602001908152602001600020600001836002811015156121c957fe5b6040805180820182526003929092029290920180548252825180840190935260018101548352600201546020838101919091528101919091529199509097508890612098565b60008611156122845785604051908082528060200260200182016040528015612242578160200160208202803883390190505b509a50600090505b85811015612284578781610100811061225f57fe5b60200201518b8281518110151561227257fe5b6020908102909101015260010161224a565b505050505050505050509250929050565b60006116c483836040518082805190602001908083835b602083106122cb5780518252601f1990920191602091820191016122ac565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902061284e565b6000818152602083815260409182902080548351601f60026101006001851615026000190190931692909204918201849004840281018401909452808452606093928301828280156123905780601f1061236557610100808354040283529160200191612390565b820191906000526020600020905b81548152906001019060200180831161237357829003601f168201915b5050505050905092915050565b6020810151805160009190821a9060c060ff831610156123c05760009250611c40565b5060019392505050565b600080600080600092506123e1856020015161241a565b6020860151865191810193500190505b80821015612411576124028261247d565b600190930192909101906123f1565b50909392505050565b8051600090811a608081101561243357600091506118de565b60b881108061244e575060c0811080159061244e575060f881105b1561245c57600191506118de565b60c08110156124715760b519810191506118de565b60f519810191506118de565b8051600090811a608081101561249657600191506118de565b60b88110156124ab57607e19810191506118de565b60c08110156124d85760b78103600184019350806020036101000a845104600182018101935050506118de565b60f88110156124ed5760be19810191506118de565b60019290920151602083900360f7016101000a900490910160f51901919050565b60005b60208210612533578351835260209384019390920191601f1990910190612511565b50915181516020939093036101000a6000190180199091169216919091179052565b61255e82612574565b6125706003838363ffffffff611e2b16565b5050565b61258560098263ffffffff6116af16565b51151561176857601780546001810180835560009290925282516125d0917fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c1501906020850190612dc8565b505060408051808201909152600181527f3100000000000000000000000000000000000000000000000000000000000000602082015261176890600990839063ffffffff611e2b16565b612622612eba565b61262a612ea3565b612632612ea3565b60008061263d612ea3565b612645612efb565b6020808b0151810151908a0151101561265d57600080fd5b61266b898b602001516127c4565b60208101519197509550151561268357879350612738565b6020808b015181015190870151106126ac576126a58b8b60000151878b6128d4565b9350612738565b6126b5856127e7565b604080518082019091528a81526020810182905283519295509093509084600281106126dd57fe5b602002018190525060408051908101604052808b600001516000191681526020016127138c6020015189602001516001016129d4565b9052815160018590036002811061272657fe5b60200201526127358b82612a08565b93505b5050604080518082019091529182525060208101929092525095945050505050565b80516020808301518082015190516040805180850195909552848101929092526060808501919091528151808503909101815260809093019081905282516000939282919084019080838360208310611df95780518252601f199092019160209182019101611dda565b6127cc612ea3565b6127d4612ea3565b6116a4846127e28587612a6f565b612aef565b60006127f1612ea3565b602083015160001061280257600080fd5b50508051604080518082019091528251600202815260209283015160001901928101929092527f8000000000000000000000000000000000000000000000000000000000000000900491565b6000612858612ea3565b600384015415801561286c57506005840154155b1561287a5760009150611fe5565b50604080518082018252838152610100602080830191909152825180840184526003870154815283518085019094526004870154845260058701548483015290810192909252906128cd90859083612b68565b9150611fe5565b60006128de612efb565b60006128e8612ea3565b60208601516001106128f957600080fd5b60008781526001890160209081526040808320815160608101909252909290918391908201908390600290835b82821015612974576040805180820182526003840286018054825282518084019093526001808201548452600290910154602084810191909152808301939093529083529092019101612926565b50505050815250509250612987866127e7565b845191935091506129ab908990846002811061299f57fe5b6020020151838861261a565b835183600281106129b857fe5b60200201526129c8888885612bef565b98975050505050505050565b6129dc612ea3565b60208301518211156129ed57600080fd5b60208084015183900390820152915160029190910a02815290565b600080612a1483612c1e565b8351516000828152600196870160209081526040909120825181559181015180519783019790975595860151600282015593518501518051600386015585015180516004860155909401516005909301929092555090919050565b6000806000808460200151866020015110612a8e578460200151612a94565b85602001515b855187519194501891507f800000000000000000000000000000000000000000000000000000000000000090505b82841015612ae65780821615612ad757612ae6565b60019093019290800190612ac2565b50505092915050565b612af7612ea3565b612aff612ea3565b83602001518311158015612b1557506101008311155b1515612b2057600080fd5b60208201839052821515612b375760008252612b4b565b835160001961010085900360020a01191682525b60208085015184900390820152925160029290920a909102825291565b6000612b72612ea3565b612b7a612ea3565b602080860151810151908501511015612b9257600080fd5b612ba08486602001516127c4565b602081015191935091501515612bb95784519250612be6565b6020808601518101519083015110612be157612bda86866000015183612c93565b9250612be6565b600092505b50509392505050565b6000828152600184016020526040812081612c0a8282612f0f565b5050612c168483612a08565b949350505050565b8051600090612c3390825b602002015161275a565b8251612c40906001612c29565b6040805160208082019490945280820192909252805180830382018152606090920190819052815191929091829184019080838360208310611df95780518252601f199092019160209182019101611dda565b6000612c9d612efb565b6000612ca7612ea3565b6020850151600110612cb857600080fd5b60008681526001880160209081526040808320815160608101909252909290918391908201908390600290835b82821015612d33576040805180820182526003840286018054825282518084019093526001808201548452600290910154602084810191909152808301939093529083529092019101612ce5565b50505050815250509250612d46856127e7565b84519193509150612d699088908460028110612d5e57fe5b602002015183612b68565b979650505050505050565b61010060405190810160405280600080191681526020016000600160a060020a0316815260200160008152602001600081526020016060815260200160001515815260200160608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612e0957805160ff1916838001178555612e36565b82800160010185558215612e36579182015b82811115612e36578251825591602001919060010190612e1b565b50612e42929150612f39565b5090565b50805460008255906000526020600020908101906117689190612f53565b50805460008255600802906000526020600020908101906117689190612f76565b50805460008255906000526020600020908101906117689190612f39565b604080518082019091526000808252602082015290565b60408051606081019091526000815260208101612ed5612ea3565b905290565b61200060405190810160405280610100906020820280388339509192915050565b60c060405190810160405280612ed5612ff4565b50600080825560018201819055600282018190556003820181905560048201819055600590910155565b610a0a91905b80821115612e425760008155600101612f3f565b610a0a91905b80821115612e42576000612f6d8282613022565b50600101612f59565b610a0a91905b80821115612e4257600080825560018201805473ffffffffffffffffffffffffffffffffffffffff191690556002820181905560038201819055612fc36004830182613022565b60058201805460ff19169055612fdd600683016000613022565b612feb600783016000613022565b50600801612f7c565b60c0604051908101604052806002905b61300c612eba565b8152602001906001900390816130045790505090565b50805460018160011615610100020316600290046000825580601f106130485750611768565b601f0160209004906000526020600020908101906117689190612f395600a165627a7a72305820b76b529409d88370ae5444d14f855873d89530745f14fbb56a4a26cabc67f0600029', 'sourceMap': '554:6701:6:-;;;1379:40;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;385:8:23;:21;;-1:-1:-1;;;;;;385:21:23;396:10;385:21;;;;;417:28;;;-1:-1:-1;;;;;436:8:23;;;;417:28;;;;;;;;;;;;554:6701:6;;;;;;', 'deployedSourceMap': '554:6701:6:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1150:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1150:25:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1150:25:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;855:171:23;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;855:171:23;-1:-1:-1;;;;;855:171:23;;;;;;;4457:103:6;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4457:103:6;;;;;;;;;;;;;;;;;;;;4142:87;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4142:87:6;;;;4884:177;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4884:177:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;4884:177:6;;;;;;;;;;;;;;;;;;4668:210;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4668:210:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4668:210:6;;-1:-1:-1;4668:210:6;;-1:-1:-1;;;;;;;4668:210:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;4668:210:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4668:210:6;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;4668:210:6;;;;;;;;;;;;;;;;;;;;3900:136;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3900:136:6;;;;4342:109;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4342:109:6;;;;1935:959;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1935:959:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1935:959:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1935:959:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1935:959:6;;;;-1:-1:-1;1935:959:6;-1:-1:-1;1935:959:6;;-1:-1:-1;1935:959:6;;;;;;;;-1:-1:-1;1935:959:6;;-1:-1:-1;1935:959:6;;-1:-1:-1;;;;;;;1935:959:6;1181:30;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1181:30:6;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1181:30:6;-1:-1:-1;;;;;1181:30:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1181:30:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1181:30:6;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1181:30:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1181:30:6;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1181:30:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1426:503;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1426:503:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1426:503:6;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1426:503:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1426:503:6;;;;-1:-1:-1;1426:503:6;-1:-1:-1;1426:503:6;;-1:-1:-1;1426:503:6;;;;;;;;-1:-1:-1;1426:503:6;;-1:-1:-1;1426:503:6;;-1:-1:-1;;;;;;;1426:503:6;4042:94;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4042:94:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4042:94:6;;-1:-1:-1;4042:94:6;;-1:-1:-1;;;;;;;4042:94:6;3177:717;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3177:717:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3177:717:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3177:717:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3177:717:6;;-1:-1:-1;3177:717:6;;;;-1:-1:-1;3177:717:6;-1:-1:-1;3177:717:6;;;;;;;;;;-1:-1:-1;;3177:717:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3177:717:6;;;;-1:-1:-1;3177:717:6;-1:-1:-1;3177:717:6;;-1:-1:-1;3177:717:6;;;;;;;;-1:-1:-1;3177:717:6;;-1:-1:-1;3177:717:6;;-1:-1:-1;;;;;;;3177:717:6;5067:116;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;5067:116:6;-1:-1:-1;;;;;5067:116:6;;;;;664:75:23;;8:9:-1;5:2;;;30:1;27;20:12;5:2;664:75:23;;;;;;;;-1:-1:-1;;;;;664:75:23;;;;;;;;;;;;;;4235:101:6;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4235:101:6;;;;4566:96;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4566:96:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4566:96:6;;-1:-1:-1;4566:96:6;;-1:-1:-1;;;;;;;4566:96:6;2900:271;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2900:271:6;-1:-1:-1;;;;;2900:271:6;;;;;;;1150:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1150:25:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1150:25:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;855:171:23:-;586:8;;-1:-1:-1;;;;;586:8:23;572:10;:22;564:31;;;;;;-1:-1:-1;;;;;932:23:23;;;;924:32;;;;;;962:8;:20;;-1:-1:-1;;962:20:23;-1:-1:-1;;;;;962:20:23;;;;;;;;;;;993:28;;;1012:8;;;;993:28;;;;;;;;;;;;;855:171;:::o;4457:103:6:-;4503:7;4529:24;:10;:22;:24::i;:::-;4522:31;;4457:103;;:::o;4142:87::-;4213:9;;4142:87;:::o;4884:177::-;5025:28;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;5025:28:6;;;;;;4949:16;;4967:19;;5005:49;;:10;;:49;:19;:49;:::i;:::-;4998:56;;;;4884:177;;;:::o;4668:210::-;4719:12;4733:16;4719:12;4809:24;:9;4828:4;4809:24;:18;:24;:::i;:::-;4782:51;;-1:-1:-1;4782:51:6;-1:-1:-1;4852:19:6;:9;4866:4;4852:19;:13;:19;:::i;:::-;4843:28;4668:210;;-1:-1:-1;4668:210:6;-1:-1:-1;4668:210:6:o;3900:136::-;586:8:23;;-1:-1:-1;;;;;586:8:23;572:10;:22;564:31;;;;;;3957:21:6;:19;:21::i;:::-;3988:18;:16;:18::i;:::-;4016:13;:11;:13::i;:::-;3900:136::o;4342:109::-;4391:7;4417:27;:13;:25;:27::i;1935:959::-;2065:22;586:8:23;;2262:28:6;;;;2065:22;;-1:-1:-1;;;;;586:8:23;572:10;:22;564:31;;;;;;2090:36:6;2107:9;2118:7;2090:16;:36::i;:::-;2065:61;-1:-1:-1;;;;;;2180:30:6;;;;2172:79;;;;;-1:-1:-1;;;;;2172:79:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2363:36;;;;;2378:4;2363:36;;;;;;-1:-1:-1;;;;;2363:36:6;;;;;;;;;;;;;;;;;;;;;;:14;;;;;;2378:4;2384:7;;2393:5;;2363:36;;;;;;;;;;;;-1:-1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;2363:36:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2363:36:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2363:36:6;;;;;;39:16:-1;36:1;17:17;2:54;101:4;2363:36:6;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;13:2;5:11;;2:2;;;29:1;26;19:12;2:2;2363:36:6;;;;;;20:11:-1;15:3;12:20;9:2;;;45:1;42;35:12;9:2;64:21;;126:4;117:14;;142:31;;;139:2;;;186:1;183;176:12;139:2;218:10;;268:11;251:29;;293:43;;;290:58;-1:-1;239:118;236:2;;;370:1;367;360:12;236:2;0:382;;2363:36:6;;;;;;2345:54;;2444:36;:27;:15;:25;:27::i;:::-;:34;:36::i;:::-;2623:12;;2409:71;;-1:-1:-1;2638:1:6;2623:16;:21;2615:86;;;;;-1:-1:-1;;;;;2615:86:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2760:1:6;2746:142;2768:12;;2783:1;;2768:16;2763:1;:22;2746:142;;;2806:71;2819:22;:5;2825:1;2829;2825:5;2819:12;;;;;;;;;;;;;;;;;;:20;:22::i;:::-;2843:26;:5;2849:1;2853;2849:5;2857:1;2849:9;2843:16;;;;;;;;;:26;2871:5;2806:12;:71::i;:::-;2787:3;;2746:142;;;1935:959;;;;;;;;:::o;1181:30::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1181:30:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1181:30:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;1181:30:6;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1181:30:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1181:30:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;1181:30:6;;;;;;;;;;;;;;;;-1:-1:-1;;1181:30:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1181:30:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1426:503::-;1542:18;586:8:23;;1542:18:6;;1767:22;;-1:-1:-1;;;;;586:8:23;572:10;:22;564:31;;;;;;1635:32:6;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1635:25:6;;;;;1661:5;;1635:32;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1635:32:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1635:32:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1635:32:6;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1635:32:6;;;;;;;1685:21;;1635:32;;-1:-1:-1;1635:32:6;-1:-1:-1;1685:26:6;;1677:80;;;;;-1:-1:-1;;;;;1677:80:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1792:22;1806:7;1792:13;:22::i;:::-;1848:28;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;1848:28:6;;;;;;1767:47;;-1:-1:-1;1824:59:6;;1767:47;;1878:4;1824:12;:59::i;:::-;1893:29;:8;1906:15;1893:29;:12;:29;:::i;:::-;1426:503;;;;;;:::o;4042:94::-;4096:5;1274:9;:7;:9::i;:::-;-1:-1:-1;;;;;1260:23:6;:10;-1:-1:-1;;;;;1260:23:6;;:51;;;-1:-1:-1;1287:24:6;:8;1300:10;1287:24;:12;:24;:::i;:::-;1252:103;;;;;;;-1:-1:-1;;;;;1252:103:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4120:9;4125:3;4120:4;:9::i;:::-;4113:16;4042:94;-1:-1:-1;;4042:94:6:o;3177:717::-;3409:19;3440:27;;:::i;:::-;3715:18;586:8:23;;-1:-1:-1;;;;;586:8:23;572:10;:22;564:31;;;;;;3470:205:6;;;;;;;;;;;-1:-1:-1;;;;;3470:205:6;;;;;;;;;;3544:9;;;3470:205;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3685:7;27:10:-1;;23:18;;;45:23;;;-1:-1;3685:20:6;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3685:20:6;;;;;;;;;;;;;;;;;;;;;;3470:205;;-1:-1:-1;23:18;;3470:205:6;;3685:20;;;;;;;;;;:::i;:::-;-1:-1:-1;3685:20:6;;;;;;;;;-1:-1:-1;;3685:20:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;3685:20:6;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;3736:22;:6;:20;:22::i;:::-;3786:28;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;3816:5:6;;;;;;3786:28;;;3816:5;;;;;;;;;;;;3715:43;;-1:-1:-1;3768:54:6;;:10;;:54;:17;:54;:::i;:::-;3858:1;3844:9;;:16;;;:13;:16;:::i;:::-;3832:9;:28;3877:10;3177:717;-1:-1:-1;;;;;;;;;3177:717:6:o;5067:116::-;-1:-1:-1;;;;;5162:14:6;5136:7;5162:14;;;:5;:14;;;;;;;5067:116::o;664:75:23:-;704:7;726:8;-1:-1:-1;;;;;726:8:23;664:75;:::o;4235:101:6:-;4280:7;4306:23;:9;:21;:23::i;4566:96::-;4612:5;4636:19;:9;4650:4;4636:19;:13;:19;:::i;2900:271::-;586:8:23;;-1:-1:-1;;;;;586:8:23;572:10;:22;564:31;;;;;;-1:-1:-1;;;;;3004:12:6;;;;;;:5;:12;;;;;;:21;-1:-1:-1;2996:61:6;;;;;-1:-1:-1;;;;;2996:61:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3071:12:6;;;;;;:5;:12;;;;;;:17;3067:67;;;3104:7;27:10:-1;;39:1;23:18;;45:23;;-1:-1;3104:19:6;;;;;;;;-1:-1:-1;;3104:19:6;-1:-1:-1;;;;;3104:19:6;;;;;3067:67;-1:-1:-1;;;;;3143:12:6;;;;;;;:5;:12;;;;;:21;2900:271::o;1456:105:28:-;1545:9;;;;1456:105::o;2797:176::-;2868:15;2885:19;2923:43;2945:4;2961:3;2951:14;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;2951:14:28;;;;;;;;;;;;;;;;2923:21;:43::i;:::-;2916:50;;;;2797:176;;;;;:::o;527:133::-;593:5;617:36;626:4;632:20;642:4;648:3;632:9;:20::i;:::-;617:8;:36::i;:::-;610:43;527:133;-1:-1:-1;;;527:133:28:o;5189:103:6:-;5245:13;5238:20;;;;;;;;;;;;;;;;5268:17;;5275:10;;5268:17;:::i;5298:94::-;5344:14;5351:7;;5344:14;:::i;:::-;5375:10;5368:17;;;;;;;;;;;;;;5298:94::o;5398:162::-;5444:6;5439:91;5460:7;:14;5456:18;;5439:91;;;5502:5;:17;5508:7;5516:1;5508:10;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5508:10:6;5502:17;;;;;;;;;;;;5495:24;5508:10;5476:3;5439:91;;;5539:14;5546:7;;5539:14;:::i;:::-;5398:162;:::o;5566:499::-;5660:22;5694:19;5723:22;5780:24;5882:6;5748:22;5762:7;5748:13;:22::i;:::-;5723:47;;5807:15;5812:9;5807:4;:15::i;:::-;5780:42;;5837:11;:18;5859:2;5837:24;5833:173;;;-1:-1:-1;5891:1:6;5877:119;5898:2;5894:1;:6;5877:119;;;5975:1;5979;5975:5;5948:11;5960:1;5948:14;;;;;;;;;;;;;;;5940:41;;;;;-1:-1:-1;;;5948:14:6;;;;;;;:21;;5940:41;5925:56;;;;;5902:3;;5877:119;;;6025:33;;;;;;;;;;;;;;-1:-1:-1;;;;;6025:20:6;;;;;:33;;;;;;;;;;;;;;;:20;:33;;;5:2:-1;;;;30:1;27;20:12;5:2;6025:33:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6025:33:6;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;6025:33:6;;5566:499;-1:-1:-1;;;;;;;5566:499:6:o;490:284:30:-;551:7;;:::i;:::-;643:11;581:4;:11;596:1;581:16;577:55;;;619:13;;;;;;;;;-1:-1:-1;619:13:30;;;;;;;;-1:-1:-1;612:20:30;;577:55;-1:-1:-1;;739:28:30;;;;;;;;;747:11;;739:28;;707:4;697:15;;;739:28;;;;;;490:284;;;;;:::o;838:474::-;898:23;965:10;1042:11;1107:12;1134:6;941:12;948:4;941:6;:12::i;:::-;933:21;;;;;;;;978:14;987:4;978:8;:14::i;:::-;965:27;;1025:5;1011:20;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;1002:29;;1070:27;1085:4;:11;;;1070:14;:27::i;:::-;1056:4;:11;;;:41;1042:55;;1143:1;1134:10;;1129:177;1150:5;1146:1;:9;1129:177;;;1186:19;1198:6;1186:11;:19::i;:::-;1176:29;;1231:24;;;;;;;;;1239:7;1231:24;;;;1248:6;1231:24;;;1219:6;1226:1;1219:9;;;;;;;;;;;;;;;;;;:36;1279:16;;;;1157:3;;1129:177;;;838:474;;;;;;;:::o;5440:392::-;5501:5;5518:11;5569:8;5622:19;5669:12;5532:27;5547:4;:11;;;5532:14;:27::i;:::-;5518:41;;5591:6;5580:4;:8;;;:17;5569:28;;5654:3;5644:14;;;;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;5644:14:30;;5622:36;;5735:6;5729:4;5725:17;5714:28;;5762:40;5781:6;5767:4;:11;;;:20;5789:7;5798:3;5762:4;:40::i;:::-;-1:-1:-1;5819:6:30;5440:392;-1:-1:-1;;;;5440:392:30:o;6071:310:6:-;6159:10;6158:11;:30;;;;;6187:1;6173:4;:11;:15;6158:30;6154:193;;;6279:7;;6290:8;;6279:4;;6284:1;;6279:7;;;;;;;;;;;-1:-1:-1;;;6279:7:6;;;;;:19;;;;6271:65;;;;;-1:-1:-1;;;;;6271:65:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6356:18;6361:4;6367:6;6356:4;:18::i;:::-;6071:310;;;:::o;6931:322::-;6992:23;7058:15;7181:6;7082:7;7058:32;;7123:2;:9;7135:1;7123:13;7113:24;;;;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;7113:24:6;;7100:37;;7147:19;:10;7158:1;7147:13;;;;;;;;;;;;;;:19;;;;;;;;;;;7190:1;7181:10;;7176:70;7197:10;:17;7193:1;:21;7176:70;;;7237:2;7244:1;7240;:5;7237:9;;;;;;;;;;;;;;;-1:-1:-1;;;7237:9:6;;-1:-1:-1;;;7237:9:6;7221:10;7232:1;7221:13;;;;;;;;;;;;;;:25;;;;;;;;;;-1:-1:-1;7216:3:6;;7176:70;;;6931:322;;;;;:::o;244:167:20:-;-1:-1:-1;;;;;316:21:20;;;;308:30;;;;;;353:18;357:4;363:7;353:3;:18::i;:::-;352:19;344:28;;;;;;-1:-1:-1;;;;;379:20:20;:11;:20;;;;;;;;;;;:27;;-1:-1:-1;;379:27:20;402:4;379:27;;;244:167::o;725:166::-;809:4;-1:-1:-1;;;;;831:21:20;;;;823:30;;;;;;-1:-1:-1;;;;;;866:20:20;:11;:20;;;;;;;;;;;;;;;725:166::o;6387:121:6:-;6437:5;6453:12;6460:4;6453:6;:12::i;:::-;6482:19;:9;6496:4;6482:19;:13;:19;:::i;3478:327:9:-;3547:7;3630;:14;;;3662:7;:12;;;3692:7;:12;;;3722:7;:13;;;3753:7;:21;;;3596:192;;;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;3596:192:9;;;;;;;;;;-1:-1:-1;3596:192:9;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;3596:192:9;;;;;-1:-1:-1;3596:192:9;;;;;;;-1:-1:-1;3596:192:9;;-1:-1:-1;;;3596:192:9;;;;;;;;;;;26:21:-1;;;22:32;;6:49;;3596:192:9;;;;;;;;3573:225;;3596:192;;-1:-1:-1;3596:192:9;-1:-1:-1;3596:192:9;;3573:225;;;;;3596:192;3573:225;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;;;;365:33;;3573:225:9;;;;;;;;;;;;-1:-1:-1;;;;;3478:327:9:o;8195:604:28:-;8273:16;;:::i;:::-;8330:17;8443:15;;:::i;:::-;8292:28;;;;;;;;;8310:3;8300:14;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;8300:14:28;;;;;;;;;;;;;;;;8292:28;;;;;;;8316:3;8292:28;;;8273:47;;8360:5;8350:16;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;8350:16:28;;;;;;;;;;;;;-1:-1:-1;8376:22:28;;;;;;;;;;:30;;8350:16;;-1:-1:-1;8376:30:28;;-1:-1:-1;8376:22:28;-1:-1:-1;8376:30:28;;;;-1:-1:-1;8376:30:28;:::i;:::-;-1:-1:-1;8472:13:28;;;:18;:23;:58;;;;-1:-1:-1;8499:26:28;;;;:31;8472:58;8468:265;;;8580:7;;;:11;;;8605:18;;;8468:265;;;8674:48;;;;;;;;8694:13;;;8674:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8688:4;;8709:1;8712:9;8674:13;:48::i;:::-;8670:52;;8468:265;8754:11;8763:1;8754:8;:11::i;:::-;8742:9;;;:23;8775:17;;:13;;;:17;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;8195:604:28:o;1272:131:22:-;1330:7;1357:5;;;1376:6;;;;1368:15;;;;;;1397:1;1390:8;;1272:131;;;;;;:::o;2979:1225:28:-;3071:15;3088:19;3119:16;;:::i;:::-;3171:15;;:::i;:::-;3212:28;;:::i;:::-;3250:11;3271:16;3324:21;;:::i;:::-;3359;;:::i;:::-;3734:9;3757:19;;:::i;:::-;4111:6;3138:23;;;;;;;;;3146:9;3138:23;;;;;;;3157:3;3138:23;;;3119:42;;3189:4;:13;;3171:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3297:705;3413:35;3437:1;3440;:7;;;3413:23;:35::i;:::-;3487:7;;;;;:14;;;3470:13;;;;3394:54;;-1:-1:-1;3394:54:28;;-1:-1:-1;3470:31:28;3462:40;;;;;;3520:13;;;;:18;3516:90;;;3586:5;;3516:90;3629:13;;;;3619:23;;;;3682:3;:12;;;3670:25;;3656:39;;;;;3675:1;3709:11;;3805:26;3824:6;3805:18;:26::i;:::-;3790:41;;;;;;;;3871:47;3880:4;:10;;:18;3891:1;:6;;;3880:18;;;;;;;;;;;;;;;;;:27;;3912:4;3908:1;:8;3880:37;;;;;;;;;3871:47;;;;;;;;3880:37;;;;;;;;;3871:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:8;:47::i;:::-;3854:13;;;;3845:8;;:23;;;;;;;;;;:73;;;;;;;;;;;;;3936:4;:10;;:18;3947:1;:6;;;3936:18;;;;;;;;;;;;;;;;;:27;;3964:4;3936:33;;;;;;;;;3932:37;;;;;;;;3936:33;;;;;;;;;3932:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3987:4;;-1:-1:-1;3932:37:28;;-1:-1:-1;3987:4:28;;3297:705;;;4029:1;4015:11;:15;4011:187;;;4080:11;4066:26;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;4066:26:28;;4054:38;;4120:1;4111:10;;4106:81;4127:11;4123:1;:15;4106:81;;;4176:8;4185:1;4176:11;;;;;;;;;;;4161:9;4171:1;4161:12;;;;;;;;;;;;;;;;;;:26;4140:3;;4106:81;;;2979:1225;;;;;;;;;;;;;;;:::o;10812:148::-;10883:7;10909:44;10932:4;10948:3;10938:14;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;10938:14:28;;;;;;;;;;;;;;;;10909:22;:44::i;1318:132::-;1421:11;:22;;;;;;;;;;;;1414:29;;;;;;;;;;;;-1:-1:-1;;1414:29:28;;;;;;;;;;;;;;;;;;;;;;;;;;1397:5;;1414:29;;;1421:22;1414:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1318:132;;;;:::o;1445:288:30:-;1556:11;;;;1617:13;;1505:4;;1609:22;;;;280:4;1655:24;;;;1651:54;;;1700:5;1693:12;;;;1651:54;-1:-1:-1;1722:4:30;;1445:288;-1:-1:-1;;;1445:288:30:o;1802:373::-;1864:4;1880:10;1904:12;1970:11;1893:1;1880:14;;1933:27;1948:4;:11;;;1933:14;:27::i;:::-;1919:11;;;;1998:8;;1919:41;;;;-1:-1:-1;1984:22:30;;-1:-1:-1;2016:130:30;2033:6;2023:7;:16;2016:130;;;2074:20;2086:7;2074:11;:20::i;:::-;2128:7;;;;;2064:30;;;;2016:130;;;-1:-1:-1;2163:5:30;;1802:373;-1:-1:-1;;;1802:373:30:o;3505:539::-;3641:13;;3565:4;;3633:22;;188:4;3679:26;;3675:362;;;3727:1;3720:8;;;;3675:362;234:4;3747:25;;;:83;;-1:-1:-1;280:4:30;3777:25;;;;;:52;;-1:-1:-1;326:4:30;3806:23;;3777:52;3743:294;;;3851:1;3844:8;;;;3743:294;280:4;3871:24;;3867:170;;;-1:-1:-1;;3935:35:30;;;-1:-1:-1;3928:42:30;;3867:170;-1:-1:-1;;4004:33:30;;;-1:-1:-1;3997:40:30;;2224:1229;2361:13;;2281:8;;2353:22;;188:4;2399:26;;2395:1052;;;2446:1;2439:8;;;;2395:1052;234:4;2475:25;;2471:976;;;-1:-1:-1;;2521:30:30;;;-1:-1:-1;2514:37:30;;2471:976;280:4;2571:24;;2567:880;;;2664:4;2657:5;2653:16;2743:1;2735:6;2731:14;2721:24;;2898:7;2894:2;2890:16;2885:3;2881:26;2872:6;2866:13;2862:46;2991:1;2982:7;2978:15;2969:7;2965:29;2958:36;;2620:388;;;;;326:4;3037:23;;3033:414;;;-1:-1:-1;;3083:28:30;;;-1:-1:-1;3076:35:30;;3033:414;3249:1;3237:14;;;;3288:13;3316:2;3312:16;;;3205:4;3312:16;3307:3;3303:26;3284:46;;3394:29;;;-1:-1:-1;;3394:29:30;;2224:1229;-1:-1:-1;2224:1229:30:o;5987:667::-;6387:9;6103:194;364:2;6110:16;;6103:194;;6200:10;;6187:24;;364:2;6239:16;;;;6269:17;;;;-1:-1:-1;;6128:16:30;;;;6103:194;;;-1:-1:-1;6479:10:30;;6550:11;;364:2;6407:15;;;;6399:3;:24;-1:-1:-1;;6399:28:30;6491:9;;6475:26;;;6546:22;;6616:21;;;;6603:35;;6446:202::o;6514:131:6:-;6586:12;6593:4;6586:6;:12::i;:::-;6608:30;:9;6625:4;6631:6;6608:30;:16;:30;:::i;:::-;6514:131;;:::o;6651:193::-;6708:23;:13;6726:4;6708:23;:17;:23;:::i;:::-;:30;:35;6704:134;;;6759:10;27::-1;;39:1;23:18;;45:23;;;-1:-1;6759:21:6;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;6821:5:6;;;;;;;;;;;;;;;;;6794:33;;:13;;6815:4;;6794:33;:20;:33;:::i;9236:1122:28:-;9333:6;;:::i;:::-;9398:21;;:::i;:::-;9429;;:::i;:::-;9526:19;9936:9;9959:19;;:::i;:::-;10047:24;;:::i;:::-;9373:7;;;;;:14;;;9359:10;;;;:28;;9351:37;;;;;;9479;9503:3;9508:1;:7;;;9479:23;:37::i;:::-;9559:13;;;;9460:56;;-1:-1:-1;9460:56:28;-1:-1:-1;9559:18:28;9555:753;;;9664:5;9650:19;;9555:753;;;9707:7;;;;;:14;;;9690:13;;;;:31;9686:622;;9802:42;9816:4;9822:1;:6;;;9830;9838:5;9802:13;:42::i;:::-;9788:56;;9686:622;;;10007:26;10026:6;10007:18;:26::i;:::-;10113:19;;;;;;;;;;;;;;;;;;10085;;9992:41;;-1:-1:-1;9992:41:28;;-1:-1:-1;10113:19:28;9992:41;10085:25;;;;;;;;;;:47;;;;10178:62;;;;;;;;;10185:1;:6;;;10178:62;;;;;;;10193:46;10212:1;:7;;;10221:6;:13;;;10237:1;10221:17;10193:18;:46::i;:::-;10178:62;;10146:19;;10166:1;:8;;;10146:29;;;;;;;;;;:94;10268:29;10280:4;10286:10;10268:11;:29::i;:::-;10254:43;;9686:622;-1:-1:-1;;10324:27:28;;;;;;;;;;;;-1:-1:-1;10324:27:28;;;;;;;-1:-1:-1;10324:27:28;9236:1122;-1:-1:-1;;;;;9236:1122:28:o;2129:150::-;2234:6;;2242:7;;;;;:14;;;;2258:12;;2223:48;;;;;;;;;;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;2223:48:28;;;;;;;;2213:59;;2187:7;;2223:48;;;2213:59;;;;;2223:48;2213:59;66:2:-1;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;302:183:29;382:14;;:::i;:::-;398:19;;:::i;:::-;436:42;444:5;451:26;464:5;471;451:12;:26::i;:::-;436:7;:42::i;2069:197::-;2125:13;2140:12;;:::i;:::-;2172:8;;;;2183:1;-1:-1:-1;2164:21:29;;;;;;-1:-1:-1;;2208:6:29;;2224:34;;;;;;;;;2232:6;;2208:13;2232:11;2224:34;;;2245:8;;;;-1:-1:-1;;2245:12:29;2224:34;;;;;;;2208:13;;;;2069:197::o;10966:343:28:-;11058:7;11194:16;;:::i;:::-;11081:13;;;:18;:23;:58;;;;-1:-1:-1;11108:26:28;;;;:31;11081:58;11077:226;;;11162:1;;-1:-1:-1;11155:8:28;;11077:226;-1:-1:-1;11213:23:28;;;;;;;;;;;11232:3;11213:23;;;;;;;;11257:35;;;;;;;11275:13;;;11257:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11213:23;11257:35;;11269:4;;11213:23;11257:11;:35::i;:::-;11250:42;;;;8805:425;8910:7;8962:15;;:::i;:::-;9010:9;9029:19;;:::i;:::-;8937:10;;;;8950:1;-1:-1:-1;8929:23:28;;;;;;8980:20;;;;:10;;;:20;;;;;;;;8962:38;;;;;;;;;;8980:20;;8962:38;;;;;;8980:20;;8962:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9073:23;9092:3;9073:18;:23::i;:::-;9145:10;;9058:38;;-1:-1:-1;9058:38:28;-1:-1:-1;9125:50:28;;9139:4;;9058:38;9145:16;;;;;;;;;;;9163:4;9169:5;9125:13;:50::i;:::-;9106:10;;9117:4;9106:16;;;;;;;;;;:69;9192:31;9205:4;9211:8;9221:1;9192:12;:31::i;:::-;9185:38;8805:425;-1:-1:-1;;;;;;;;8805:425:28:o;1723:197:29:-;1792:9;;:::i;:::-;1831:8;;;;1821:18;;;1813:27;;;;;;1861:8;;;;;:17;;;1850:8;;;:28;1897:6;;:16;;;;;;1888:25;;1850:1;1723:197::o;10364:247:28:-;10438:15;10465:9;10477:7;10482:1;10477:4;:7::i;:::-;10522:10;;:13;:10;10494:13;;;:10;;;;10522:13;10494;;;;;;;:41;;;;;;;;;;;;;;;;;;;;;;;;;10573:10;;:13;;;10545:41;;10494:25;10545;;:41;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10465:19:28;;10603:1;-1:-1:-1;10364:247:28:o;1141:438:29:-;1208:11;1231;1362:9;1405;1256:1;:8;;;1245:1;:8;;;:19;:41;;1278:1;:8;;;1245:41;;;1267:1;:8;;;1245:41;1388:6;;1379;;1231:55;;-1:-1:-1;1379:15:29;;-1:-1:-1;1417:8:29;;-1:-1:-1;1435:138:29;1451:6;1442;:15;1435:138;;;1496:11;;;1495:18;1491:45;;1531:5;;1491:45;1459:8;;;;;1550:12;;;;1435:138;;;1141:438;;;;;;;:::o;643:418::-;704:14;;:::i;:::-;720;;:::i;:::-;761:1;:8;;;754:3;:15;;:29;;;;;780:3;773;:10;;754:29;746:38;;;;;;;;794:13;;;:19;;;827:8;;823:155;;;873:1;851:24;;823:155;;;920:6;;-1:-1:-1;;951:3:29;:9;;;939:22;;938:28;929:38;920:47;906:61;;823:155;1003:8;;;;;:14;;;987:13;;;:30;1041:6;;:13;;;;;;;;1027:27;;643:418;:::o;11665:654:28:-;11750:7;11815:21;;:::i;:::-;11846;;:::i;:::-;11790:7;;;;;:14;;;11776:10;;;;:28;;11768:37;;;;;;11896;11920:3;11925:1;:7;;;11896:23;:37::i;:::-;11947:13;;;;11877:56;;-1:-1:-1;11877:56:28;-1:-1:-1;11947:18:28;11943:370;;;12045:6;;;-1:-1:-1;12038:13:28;;11943:370;12089:7;;;;;:14;;;12072:13;;;;:31;12068:245;;12177:33;12189:4;12195:1;:6;;;12203;12177:11;:33::i;:::-;12170:40;;;;12068:245;12300:1;;-1:-1:-1;12068:245:28;11665:654;;;;;;;:::o;10617:189::-;10709:15;10743:19;;;:10;;;:19;;;;;10709:15;10736:26;10743:19;10709:15;10736:26;:::i;:::-;;;10779:20;10791:4;10797:1;10779:11;:20::i;:::-;10772:27;10617:189;-1:-1:-1;;;;10617:189:28:o;2336:158::-;2446:10;;2390:7;;2437:23;;2390:7;2446:13;;;;;2437:8;:23::i;:::-;2471:10;;2462:23;;2482:1;2471:13;;2462:23;2426:60;;;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;6:49;;2426:60:28;;;;;;;;2416:71;;2426:60;;;;;;2416:71;;;;2426:60;2416:71;66:2:-1;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;11315:344:28;11408:7;11460:15;;:::i;:::-;11508:9;11527:19;;:::i;:::-;11435:10;;;;11448:1;-1:-1:-1;11427:23:28;;;;;;11478:20;;;;:10;;;:20;;;;;;;;11460:38;;;;;;;;;;11478:20;;11460:38;;;;;;11478:20;;11460:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11571:23;11590:3;11571:18;:23::i;:::-;11629:10;;11556:38;;-1:-1:-1;11556:38:28;-1:-1:-1;11611:41:28;;11623:4;;11556:38;11629:16;;;;;;;;;;;11647:4;11611:11;:41::i;:::-;11604:48;11315:344;-1:-1:-1;;;;;;;11315:344:28:o;554:6701:6:-;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;554:6701:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;554:6701:6;;;-1:-1:-1;554:6701:6;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;554:6701:6;;;;;;;;:::o;:::-;;;;;;;;;;-1:-1:-1;554:6701:6;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;-1:-1;554:6701:6;;;-1:-1:-1;;554:6701:6:o;:::-;;;;;;;;;;;;:::i;:::-;-1:-1:-1;554:6701:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;554:6701:6;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;554:6701:6;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i', 'source': "pragma solidity ^0.4.24;\n\nimport {PatriciaTree} from \"solidity-patricia-tree/contracts/tree.sol\";\nimport \"openzeppelin-solidity/contracts/ownership/Secondary.sol\";\nimport \"openzeppelin-solidity/contracts/access/Roles.sol\";\nimport \"openzeppelin-solidity/contracts/math/SafeMath.sol\";\nimport \"solidity-rlp/contracts/RLPReader.sol\";\nimport \"./interfaces/IStateTree.sol\";\nimport \"./interfaces/IMerkluxReducerRegistry.sol\";\nimport \"./interfaces/IMerkluxStoreForVM.sol\";\nimport {Action} from \"./Types.sol\";\n\n/**\n * @title MerkluxTree data structure for\n *\n */\ncontract MerkluxStore is Secondary, IMerkluxStoreForVM, IStateTree {\n    using SafeMath for uint256;\n    using PatriciaTree for PatriciaTree.Tree;\n    using Roles for Roles.Role;\n    using RLPReader for RLPReader.RLPItem;\n    using RLPReader for bytes;\n    using Action for Action.Object;\n    bytes constant EXIST = \"1\";\n\n    uint256 private actionNum;\n    Roles.Role private reducers;\n    PatriciaTree.Tree private stateTree;\n    PatriciaTree.Tree private referenceTree;\n    PatriciaTree.Tree private actionTree;\n    address[] private callers;\n    mapping(address => uint256) private nonce;\n    bytes[] public references;\n    Action.Object[] public actions;\n\n    modifier onlyReducers() {\n        require(msg.sender == primary() || reducers.has(msg.sender), \"MerkluxStore: only allowed for reducers\");\n        _;\n    }\n\n    constructor() public Secondary() {\n    }\n\n\n    function deployReducer(IMerkluxReducerRegistry _registry, string _action, bytes _data) public onlyPrimary {\n        bytes32 reducerKey;\n        address deployedAddress;\n        (reducerKey, deployedAddress) = _registry.registerReducer(_data);\n        require(bytes(_action).length != 0, \"MerkluxStore: action should not be a null\");\n        bytes memory actionKey = _appendPrefix(_action);\n        _updateState(actionKey, abi.encodePacked(reducerKey), true);\n        reducers.add(deployedAddress);\n    }\n\n    function runReducer(IMerkluxReducerRegistry _registry, address _sender, string _action, bytes _data) public onlyPrimary {\n        MerkluxReducer reducer = _retrieveReducer(_registry, _action);\n        // Not a registered reducer\n        require(address(reducer) != address(0), \"MerkluxStore: reducer does not exist\");\n\n        bytes memory rlpEncodedPairs;\n\n        // Get pairs to update from reducer\n        rlpEncodedPairs = reducer.reduce(this, _sender, _data);\n        RLPReader.RLPItem[] memory pairs = rlpEncodedPairs.toRlpItem().toList();\n        // length should be an even number\n        // Reducer should returns rlp encoded list which length is an even number\n        require(pairs.length & 1 == 0, \"MerkluxStore: reducer should return rlp encoded list\");\n\n        // Update key value pairs\n        for (uint i = 0; i < (pairs.length / 2); i++) {\n            _updateState(pairs[i * 2].toBytes(), pairs[i * 2 + 1].toBytes(), false);\n        }\n    }\n\n    function increaseAccountActionNonce(address _user, uint256 _nonce) public onlyPrimary {\n        require(nonce[_user] < _nonce, \"MerkluxStore: invalid nonce\");\n        if (nonce[_user] == 0) {\n            callers.push(_user);\n        }\n        nonce[_user] = _nonce;\n    }\n\n    function putAction(\n        bytes32 _prevBlockHash,\n        address _from,\n        uint256 _nonce,\n        string _action,\n        bool _deployReducer,\n        bytes _data,\n        bytes _signature\n    ) public onlyPrimary returns (bytes32 _actionHash) {\n        Action.Object memory action = Action.Object(\n            _prevBlockHash,\n            _from,\n            actionNum,\n            _nonce,\n            _action,\n            _deployReducer,\n            _data,\n            _signature\n        );\n        actions.push(action);\n        bytes32 actionHash = action.getActionHash();\n        actionTree.insert(abi.encodePacked(actionHash), EXIST);\n        actionNum = actionNum.add(1);\n        return actionHash;\n    }\n\n    function resetCurrentData() public onlyPrimary {\n        _resetReferenceData();\n        _resetActionData();\n        _resetNonce();\n    }\n\n    function read(bytes key) public onlyReducers returns (bytes) {\n        return _get(key);\n    }\n\n    function getActionNum() public view returns (uint256) {\n        return actionNum;\n    }\n\n    function getStateRoot() public view returns (bytes32) {\n        return stateTree.getRootHash();\n    }\n\n    function getReferenceRoot() public view returns (bytes32) {\n        return referenceTree.getRootHash();\n    }\n\n    function getActionRoot() public view returns (bytes32) {\n        return actionTree.getRootHash();\n    }\n\n    function get(bytes _key) public view returns (bytes) {\n        return stateTree.get(_key);\n    }\n\n    function getProof(bytes _key) public view returns (bytes _value, uint _branchMask, bytes32[] _siblings) {\n        (_branchMask, _siblings) = stateTree.getProof(_key);\n        _value = stateTree.get(_key);\n    }\n\n    function getActionProof(bytes32 actionHash) public view returns (uint _branchMask, bytes32[] _siblings) {\n        return actionTree.getProof(abi.encodePacked(actionHash));\n    }\n\n    function getAccountActionNonce(address _sender) public view returns (uint256) {\n        return nonce[_sender];\n    }\n\n    function _resetReferenceData() private {\n        delete referenceTree;\n        delete references;\n    }\n\n    function _resetActionData() private {\n        delete actions;\n        delete actionTree;\n    }\n\n    function _resetNonce() private {\n        for (uint i = 0; i < callers.length; i++) {\n            delete nonce[callers[i]];\n        }\n        delete callers;\n    }\n\n    function _retrieveReducer(IMerkluxReducerRegistry _registry, string _action) private returns (MerkluxReducer reducer) {\n        bytes32 reducerHash;\n        bytes memory actionKey = _appendPrefix(_action);\n        bytes memory storedValue = _get(actionKey);\n\n        if (storedValue.length == 32) {\n            for (uint i = 0; i < 32; i++) {\n                reducerHash |= bytes32(storedValue[i] & 0xFF) >> (i * 8);\n            }\n        }\n        reducer = _registry.getReducer(reducerHash);\n    }\n\n    function _updateState(bytes _key, bytes _value, bool _isReducer) private {\n        if (!_isReducer && _key.length > 1) {\n            // Reducer cannot be overwritten through this function\n            require(_key[0] != byte(38), \"Prefix & is reserved for reducers\");\n        }\n        _set(_key, _value);\n    }\n\n    function _get(bytes memory _key) private returns (bytes){\n        _refer(_key);\n        return stateTree.get(_key);\n    }\n\n    function _set(bytes memory _key, bytes memory _value) private {\n        _refer(_key);\n        stateTree.insert(_key, _value);\n    }\n\n    function _refer(bytes memory _key) private {\n        if (referenceTree.get(_key).length == 0) {\n            references.push(_key);\n            referenceTree.insert(_key, EXIST);\n        }\n    }\n\n    /**\n     * @dev\n     * @return _reducerKey always starts with 0x0026\n     */\n    function _appendPrefix(string _action) private pure returns (bytes memory _actionKey) {\n        // add '&' as a prefix\n        bytes memory _a = bytes(_action);\n        _actionKey = new bytes(_a.length + 1);\n        _actionKey[0] = \"&\";\n        for (uint i = 1; i < _actionKey.length; i++) _actionKey[i] = _a[i - 1];\n    }\n}\n" }, 'MerkluxStoreForCase': { 'contractName': 'MerkluxStoreForCase', 'abi': [{ 'constant': true, 'inputs': [{ 'name': '', 'type': 'uint256' }], 'name': 'references', 'outputs': [{ 'name': '', 'type': 'bytes' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': 'recipient', 'type': 'address' }], 'name': 'transferPrimary', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': true, 'inputs': [{ 'name': '', 'type': 'uint256' }], 'name': 'actions', 'outputs': [{ 'name': 'base', 'type': 'bytes32' }, { 'name': 'from', 'type': 'address' }, { 'name': 'actionNum', 'type': 'uint256' }, { 'name': 'nonce', 'type': 'uint256' }, { 'name': 'action', 'type': 'string' }, { 'name': 'deployReducer', 'type': 'bool' }, { 'name': 'data', 'type': 'bytes' }, { 'name': 'signature', 'type': 'bytes' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'primary', 'outputs': [{ 'name': '', 'type': 'address' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'inputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'constructor' }, { 'anonymous': false, 'inputs': [], 'name': 'RegReducer', 'type': 'event' }, { 'anonymous': false, 'inputs': [{ 'indexed': false, 'name': 'recipient', 'type': 'address' }], 'name': 'PrimaryTransferred', 'type': 'event' }, { 'constant': false, 'inputs': [{ 'name': '_stateRoot', 'type': 'bytes32' }], 'name': 'initialize', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': '_actionNum', 'type': 'uint256' }], 'name': 'setActionNum', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': '_key', 'type': 'bytes' }, { 'name': '_value', 'type': 'bytes' }, { 'name': '_branchMask', 'type': 'uint256' }, { 'name': '_siblings', 'type': 'bytes32[]' }], 'name': 'commitBranch', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': '_reducer', 'type': 'address' }], 'name': 'registerDeployedReducer', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': '_registry', 'type': 'address' }, { 'name': '_action', 'type': 'string' }, { 'name': '_data', 'type': 'bytes' }], 'name': 'deployReducer', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': '_registry', 'type': 'address' }, { 'name': '_sender', 'type': 'address' }, { 'name': '_action', 'type': 'string' }, { 'name': '_data', 'type': 'bytes' }], 'name': 'runReducer', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': '_user', 'type': 'address' }, { 'name': '_nonce', 'type': 'uint256' }], 'name': 'increaseAccountActionNonce', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': '_prevBlockHash', 'type': 'bytes32' }, { 'name': '_from', 'type': 'address' }, { 'name': '_nonce', 'type': 'uint256' }, { 'name': '_action', 'type': 'string' }, { 'name': '_deployReducer', 'type': 'bool' }, { 'name': '_data', 'type': 'bytes' }, { 'name': '_signature', 'type': 'bytes' }], 'name': 'putAction', 'outputs': [{ 'name': '_actionHash', 'type': 'bytes32' }], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [], 'name': 'resetCurrentData', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': 'key', 'type': 'bytes' }], 'name': 'read', 'outputs': [{ 'name': '', 'type': 'bytes' }], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'getActionNum', 'outputs': [{ 'name': '', 'type': 'uint256' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'getStateRoot', 'outputs': [{ 'name': '', 'type': 'bytes32' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'getReferenceRoot', 'outputs': [{ 'name': '', 'type': 'bytes32' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'getActionRoot', 'outputs': [{ 'name': '', 'type': 'bytes32' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [{ 'name': '_key', 'type': 'bytes' }], 'name': 'get', 'outputs': [{ 'name': '', 'type': 'bytes' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [{ 'name': '_key', 'type': 'bytes' }], 'name': 'getProof', 'outputs': [{ 'name': 'branchMask', 'type': 'uint256' }, { 'name': '_siblings', 'type': 'bytes32[]' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [{ 'name': 'actionHash', 'type': 'bytes32' }], 'name': 'getActionProof', 'outputs': [{ 'name': 'branchMask', 'type': 'uint256' }, { 'name': '_siblings', 'type': 'bytes32[]' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [{ 'name': '_sender', 'type': 'address' }], 'name': 'getAccountActionNonce', 'outputs': [{ 'name': '', 'type': 'uint256' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }], 'bytecode': '', 'deployedBytecode': '', 'sourceMap': '631:7440:7:-;;;1533:40;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;385:8:23;:21;;-1:-1:-1;;;;;;385:21:23;396:10;385:21;;;;;417:28;;;-1:-1:-1;;;;;436:8:23;;;;417:28;;;;;;;;;;;;631:7440:7;;;;;;', 'deployedSourceMap': '631:7440:7:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1295:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1295:25:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1295:25:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;855:171:23;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;855:171:23;-1:-1:-1;;;;;855:171:23;;;;;;;5347:103:7;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5347:103:7;;;;;;;;;;;;;;;;;;;;5032:87;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5032:87:7;;;;5701:176;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;5701:176:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;5701:176:7;;;;;;;;;;;;;;;;;;5558:137;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;5558:137:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5558:137:7;;-1:-1:-1;5558:137:7;;-1:-1:-1;;;;;;;5558:137:7;4790:136;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4790:136:7;;;;5232:109;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5232:109:7;;;;2848:928;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2848:928:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2848:928:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2848:928:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2848:928:7;;;;-1:-1:-1;2848:928:7;-1:-1:-1;2848:928:7;;-1:-1:-1;2848:928:7;;;;;;;;-1:-1:-1;2848:928:7;;-1:-1:-1;2848:928:7;;-1:-1:-1;;;;;;;2848:928:7;1326:30;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1326:30:7;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1326:30:7;-1:-1:-1;;;;;1326:30:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1326:30:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1326:30:7;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1326:30:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1326:30:7;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1326:30:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2363:479;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2363:479:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2363:479:7;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2363:479:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2363:479:7;;;;-1:-1:-1;2363:479:7;-1:-1:-1;2363:479:7;;-1:-1:-1;2363:479:7;;;;;;;;-1:-1:-1;2363:479:7;;-1:-1:-1;2363:479:7;;-1:-1:-1;;;;;;;2363:479:7;4932:94;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4932:94:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4932:94:7;;-1:-1:-1;4932:94:7;;-1:-1:-1;;;;;;;4932:94:7;1579:108;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1579:108:7;;;;;4067:717;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4067:717:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4067:717:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4067:717:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4067:717:7;;-1:-1:-1;4067:717:7;;;;-1:-1:-1;4067:717:7;-1:-1:-1;4067:717:7;;;;;;;;;;-1:-1:-1;;4067:717:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4067:717:7;;;;-1:-1:-1;4067:717:7;-1:-1:-1;4067:717:7;;-1:-1:-1;4067:717:7;;;;;;;;-1:-1:-1;4067:717:7;;-1:-1:-1;4067:717:7;;-1:-1:-1;;;;;;;4067:717:7;1864:326;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1864:326:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1864:326:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1864:326:7;;;;-1:-1:-1;1864:326:7;-1:-1:-1;1864:326:7;;-1:-1:-1;1864:326:7;;;;;;;;-1:-1:-1;;1864:326:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1864:326:7;;-1:-1:-1;1864:326:7;;;-1:-1:-1;1864:326:7;;-1:-1:-1;1864:326:7;;;;;;;;;;;;-1:-1:-1;1864:326:7;;-1:-1:-1;1864:326:7;;-1:-1:-1;;;;;;;1864:326:7;5883:116;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;5883:116:7;-1:-1:-1;;;;;5883:116:7;;;;;664:75:23;;8:9:-1;5:2;;;30:1;27;20:12;5:2;664:75:23;;;;;;;;-1:-1:-1;;;;;664:75:23;;;;;;;;;;;;;;5125:101:7;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5125:101:7;;;;5456:96;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;5456:96:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5456:96:7;;-1:-1:-1;5456:96:7;;-1:-1:-1;;;;;;;5456:96:7;3782:279;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3782:279:7;-1:-1:-1;;;;;3782:279:7;;;;;;;1693:165;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1693:165:7;;;;;2221:136;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2221:136:7;-1:-1:-1;;;;;2221:136:7;;;;;1295:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1295:25:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1295:25:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;855:171:23:-;586:8;;-1:-1:-1;;;;;586:8:23;572:10;:22;564:31;;;;;;-1:-1:-1;;;;;932:23:23;;;;924:32;;;;;;962:8;:20;;-1:-1:-1;;962:20:23;-1:-1:-1;;;;;962:20:23;;;;;;;;;;;993:28;;;1012:8;;;;993:28;;;;;;;;;;;;;855:171;:::o;5347:103:7:-;5393:7;5419:24;:10;:22;:24::i;:::-;5412:31;;5347:103;;:::o;5032:87::-;5103:9;;5032:87;:::o;5701:176::-;5841:28;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;5841:28:7;;;;;;5766:15;;5783:19;;5821:49;;:10;;:49;:19;:49;:::i;:::-;5814:56;;;;5701:176;;;:::o;5558:137::-;5609:15;5626:19;5664:24;:9;5683:4;5664:24;:18;:24;:::i;4790:136::-;586:8:23;;-1:-1:-1;;;;;586:8:23;572:10;:22;564:31;;;;;;4847:21:7;:19;:21::i;:::-;4878:18;:16;:18::i;:::-;4906:13;:11;:13::i;:::-;4790:136::o;5232:109::-;5281:7;5307:27;:13;:25;:27::i;2848:928::-;2978:22;586:8:23;;3164:28:7;;;;2978:22;;-1:-1:-1;;;;;586:8:23;572:10;:22;564:31;;;;;;3003:36:7;3020:9;3031:7;3003:16;:36::i;:::-;2978:61;-1:-1:-1;;;;;;3093:30:7;;;;3085:68;;;;;-1:-1:-1;;;;;3085:68:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;3265:36;;;;;3280:4;3265:36;;;;;;-1:-1:-1;;;;;3265:36:7;;;;;;;;;;;;;;;;;;;;;;:14;;;;;;3280:4;3286:7;;3295:5;;3265:36;;;;;;;;;;;;-1:-1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;3265:36:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3265:36:7;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3265:36:7;;;;;;39:16:-1;36:1;17:17;2:54;101:4;3265:36:7;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;13:2;5:11;;2:2;;;29:1;26;19:12;2:2;3265:36:7;;;;;;20:11:-1;15:3;12:20;9:2;;;45:1;42;35:12;9:2;64:21;;126:4;117:14;;142:31;;;139:2;;;186:1;183;176:12;139:2;218:10;;268:11;251:29;;293:43;;;290:58;-1:-1;239:118;236:2;;;370:1;367;360:12;236:2;0:382;;3265:36:7;;;;;;3247:54;;3346:36;:27;:15;:25;:27::i;:::-;:34;:36::i;:::-;3525:12;;3311:71;;-1:-1:-1;3540:1:7;3525:16;:21;3517:66;;;;;-1:-1:-1;;;;;3517:66:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3642:1:7;3628:142;3650:12;;3665:1;;3650:16;3645:1;:22;3628:142;;;3688:71;3701:22;:5;3707:1;3711;3707:5;3701:12;;;;;;;;;;;;;;;;;;:20;:22::i;:::-;3725:26;:5;3731:1;3735;3731:5;3739:1;3731:9;3725:16;;;;;;;;;:26;3753:5;3688:12;:71::i;:::-;3669:3;;3628:142;;;2848:928;;;;;;;;:::o;1326:30::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1326:30:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1326:30:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;1326:30:7;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1326:30:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1326:30:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;1326:30:7;;;;;;;;;;;;;;;;-1:-1:-1;;1326:30:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1326:30:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2363:479::-;2479:18;586:8:23;;2479:18:7;;2680:22;;-1:-1:-1;;;;;586:8:23;572:10;:22;564:31;;;;;;2572:32:7;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2572:25:7;;;;;2598:5;;2572:32;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;2572:32:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2572:32:7;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2572:32:7;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2572:32:7;;;;;;;2622:21;;2572:32;;-1:-1:-1;2572:32:7;-1:-1:-1;2622:26:7;;2614:56;;;;;-1:-1:-1;;;;;2614:56:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;2705:22;2719:7;2705:13;:22::i;:::-;2761:28;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;2761:28:7;;;;;;2680:47;;-1:-1:-1;2737:59:7;;2680:47;;2791:4;2737:12;:59::i;:::-;2806:29;:8;2819:15;2806:29;:12;:29;:::i;:::-;2363:479;;;;;;:::o;4932:94::-;4986:5;1420:9;:7;:9::i;:::-;-1:-1:-1;;;;;1406:23:7;:10;-1:-1:-1;;;;;1406:23:7;;:51;;;-1:-1:-1;1433:24:7;:8;1446:10;1433:24;:12;:24;:::i;:::-;1398:111;;;;;;;-1:-1:-1;;;;;1398:111:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5010:9;5015:3;5010:4;:9::i;:::-;5003:16;;1519:1;4932:94;;;:::o;1579:108::-;586:8:23;;-1:-1:-1;;;;;586:8:23;572:10;:22;564:31;;;;;;1648:32:7;:9;1669:10;1648:32;:20;:32;:::i;:::-;1579:108;:::o;4067:717::-;4299:19;4330:27;;:::i;:::-;4605:18;586:8:23;;-1:-1:-1;;;;;586:8:23;572:10;:22;564:31;;;;;;4360:205:7;;;;;;;;;;;-1:-1:-1;;;;;4360:205:7;;;;;;;;;;4434:9;;;4360:205;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4575:7;27:10:-1;;23:18;;;45:23;;;-1:-1;4575:20:7;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4575:20:7;;;;;;;;;;;;;;;;;;;;;;4360:205;;-1:-1:-1;23:18;;4360:205:7;;4575:20;;;;;;;;;;:::i;:::-;-1:-1:-1;4575:20:7;;;;;;;;;-1:-1:-1;;4575:20:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;4575:20:7;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;4626:22;:6;:20;:22::i;:::-;4676:28;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;4706:5:7;;;;;;4676:28;;;4706:5;;;;;;;;;;;;4605:43;;-1:-1:-1;4658:54:7;;:10;;:54;:17;:54;:::i;:::-;4748:1;4734:9;;:16;;;:13;:16;:::i;:::-;4722:9;:28;4767:10;4067:717;-1:-1:-1;;;;;;;;;4067:717:7:o;1864:326::-;586:8:23;;-1:-1:-1;;;;;586:8:23;572:10;:22;564:31;;;;;;1980:60:7;:9;2003:4;2009:6;2017:11;2030:9;1980:60;:22;:60;:::i;:::-;2054:23;:13;2072:4;2054:23;:17;:23;:::i;:::-;:30;:35;2050:134;;;2105:10;27::-1;;39:1;23:18;;45:23;;;-1:-1;2105:21:7;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;2167:5:7;;;;;;;;;;;;;;;;;2140:33;;:13;;2161:4;;2140:33;:20;:33;:::i;:::-;1864:326;;;;:::o;5883:116::-;-1:-1:-1;;;;;5978:14:7;5952:7;5978:14;;;:5;:14;;;;;;;5883:116::o;664:75:23:-;704:7;726:8;-1:-1:-1;;;;;726:8:23;664:75;:::o;5125:101:7:-;5170:7;5196:23;:9;:21;:23::i;5456:96::-;5502:5;5526:19;:9;5540:4;5526:19;:13;:19;:::i;3782:279::-;586:8:23;;-1:-1:-1;;;;;586:8:23;572:10;:22;564:31;;;;;;-1:-1:-1;;;;;3886:12:7;;;;;;:5;:12;;;;;;:21;-1:-1:-1;3878:69:7;;;;;-1:-1:-1;;;;;3878:69:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3961:12:7;;;;;;:5;:12;;;;;;:17;3957:67;;;3994:7;27:10:-1;;39:1;23:18;;45:23;;-1:-1;3994:19:7;;;;;;;;-1:-1:-1;;3994:19:7;-1:-1:-1;;;;;3994:19:7;;;;;3957:67;-1:-1:-1;;;;;4033:12:7;;;;;;;:5;:12;;;;;:21;3782:279::o;1693:165::-;586:8:23;;-1:-1:-1;;;;;586:8:23;572:10;:22;564:31;;;;;;1772:9:7;;:14;1764:55;;;;;-1:-1:-1;;;;;1764:55:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;1829:9;:22;1693:165::o;2221:136::-;586:8:23;;-1:-1:-1;;;;;586:8:23;572:10;:22;564:31;;;;;;2301:22:7;:8;2314;2301:22;:12;:22;:::i;:::-;2338:12;;;;;;;2221:136;:::o;1456:105:28:-;1545:9;;;;1456:105::o;2797:176::-;2868:15;2885:19;2923:43;2945:4;2961:3;2951:14;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;2951:14:28;;;;;;;;;;;;;;;;2923:21;:43::i;:::-;2916:50;;;;2797:176;;;;;:::o;6494::25:-;6565:15;6582:19;6620:43;6642:4;6658:3;6648:14;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;6648:14:25;;;;;;;;;;;;;;;;6620:21;:43::i;6005:103:7:-;6061:13;6054:20;;;;;;;;;;;;;;;;6084:17;;6091:10;;6084:17;:::i;6114:94::-;6160:14;6167:7;;6160:14;:::i;:::-;6191:10;6184:17;;;;;;;;;;;;;;6114:94::o;6214:162::-;6260:6;6255:91;6276:7;:14;6272:18;;6255:91;;;6318:5;:17;6324:7;6332:1;6324:10;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6324:10:7;6318:17;;;;;;;;;;;;6311:24;6324:10;6292:3;6255:91;;;6355:14;6362:7;;6355:14;:::i;6382:499::-;6476:22;6510:19;6539:22;6596:24;6698:6;6564:22;6578:7;6564:13;:22::i;:::-;6539:47;;6623:15;6628:9;6623:4;:15::i;:::-;6596:42;;6653:11;:18;6675:2;6653:24;6649:173;;;-1:-1:-1;6707:1:7;6693:119;6714:2;6710:1;:6;6693:119;;;6791:1;6795;6791:5;6764:11;6776:1;6764:14;;;;;;;;;;;;;;;6756:41;;;;;-1:-1:-1;;;6764:14:7;;;;;;;:21;;6756:41;6741:56;;;;;6718:3;;6693:119;;;6841:33;;;;;;;;;;;;;;-1:-1:-1;;;;;6841:20:7;;;;;:33;;;;;;;;;;;;;;;:20;:33;;;5:2:-1;;;;30:1;27;20:12;5:2;6841:33:7;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6841:33:7;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;6841:33:7;;6382:499;-1:-1:-1;;;;;;;6382:499:7:o;490:284:30:-;551:7;;:::i;:::-;643:11;581:4;:11;596:1;581:16;577:55;;;619:13;;;;;;;;;-1:-1:-1;619:13:30;;;;;;;;-1:-1:-1;612:20:30;;577:55;-1:-1:-1;;739:28:30;;;;;;;;;747:11;;739:28;;707:4;697:15;;;739:28;;;;;;490:284;;;;;:::o;838:474::-;898:23;965:10;1042:11;1107:12;1134:6;941:12;948:4;941:6;:12::i;:::-;933:21;;;;;;;;978:14;987:4;978:8;:14::i;:::-;965:27;;1025:5;1011:20;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;1002:29;;1070:27;1085:4;:11;;;1070:14;:27::i;:::-;1056:4;:11;;;:41;1042:55;;1143:1;1134:10;;1129:177;1150:5;1146:1;:9;1129:177;;;1186:19;1198:6;1186:11;:19::i;:::-;1176:29;;1231:24;;;;;;;;;1239:7;1231:24;;;;1248:6;1231:24;;;1219:6;1226:1;1219:9;;;;;;;;;;;;;;;;;;:36;1279:16;;;;1157:3;;1129:177;;;838:474;;;;;;;:::o;5440:392::-;5501:5;5518:11;5569:8;5622:19;5669:12;5532:27;5547:4;:11;;;5532:14;:27::i;:::-;5518:41;;5591:6;5580:4;:8;;;:17;5569:28;;5654:3;5644:14;;;;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;5644:14:30;;5622:36;;5735:6;5729:4;5725:17;5714:28;;5762:40;5781:6;5767:4;:11;;;:20;5789:7;5798:3;5762:4;:40::i;:::-;-1:-1:-1;5819:6:30;5440:392;-1:-1:-1;;;;5440:392:30:o;6887:310:7:-;6975:10;6974:11;:30;;;;;7003:1;6989:4;:11;:15;6974:30;6970:193;;;7095:7;;7106:8;;7095:4;;7100:1;;7095:7;;;;;;;;;;;-1:-1:-1;;;7095:7:7;;;;;:19;;;;7087:65;;;;;-1:-1:-1;;;;;7087:65:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7172:18;7177:4;7183:6;7172:4;:18::i;:::-;6887:310;;;:::o;7747:322::-;7808:23;7874:15;7997:6;7898:7;7874:32;;7939:2;:9;7951:1;7939:13;7929:24;;;;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;7929:24:7;;7916:37;;7963:19;:10;7974:1;7963:13;;;;;;;;;;;;;;:19;;;;;;;;;;;8006:1;7997:10;;7992:70;8013:10;:17;8009:1;:21;7992:70;;;8053:2;8060:1;8056;:5;8053:9;;;;;;;;;;;;;;;-1:-1:-1;;;8053:9:7;;-1:-1:-1;;;8053:9:7;8037:10;8048:1;8037:13;;;;;;;;;;;;;;:25;;;;;;;;;;-1:-1:-1;8032:3:7;;7992:70;;;7747:322;;;;;:::o;244:167:20:-;-1:-1:-1;;;;;316:21:20;;;;308:30;;;;;;353:18;357:4;363:7;353:3;:18::i;:::-;352:19;344:28;;;;;;-1:-1:-1;;;;;379:20:20;:11;:20;;;;;;;;;;;:27;;-1:-1:-1;;379:27:20;402:4;379:27;;;244:167::o;725:166::-;809:4;-1:-1:-1;;;;;831:21:20;;;;823:30;;;;;;-1:-1:-1;;;;;;866:20:20;:11;:20;;;;;;;;;;;;;;;725:166::o;7203:121:7:-;7253:5;7269:12;7276:4;7269:6;:12::i;:::-;7298:19;:9;7312:4;7298:19;:13;:19;:::i;554:137:25:-;634:9;;;;:23;626:32;;;;;;668:9;;;;:16;554:137::o;3478:327:9:-;3547:7;3630;:14;;;3662:7;:12;;;3692:7;:12;;;3722:7;:13;;;3753:7;:21;;;3596:192;;;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;3596:192:9;;;;;;;;;;-1:-1:-1;3596:192:9;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;3596:192:9;;;;;-1:-1:-1;3596:192:9;;;;;;;-1:-1:-1;3596:192:9;;-1:-1:-1;;;3596:192:9;;;;;;;;;;;26:21:-1;;;22:32;;6:49;;3596:192:9;;;;;;;;3573:225;;3596:192;;-1:-1:-1;3596:192:9;-1:-1:-1;3596:192:9;;3573:225;;;;;3596:192;3573:225;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;;;;365:33;;3573:225:9;;;;;;;;;;;;-1:-1:-1;;;;;3478:327:9:o;8195:604:28:-;8273:16;;:::i;:::-;8330:17;8443:15;;:::i;:::-;8292:28;;;;;;;;;8310:3;8300:14;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;8300:14:28;;;;;;;;;;;;;;;;8292:28;;;;;;;8316:3;8292:28;;;8273:47;;8360:5;8350:16;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;8350:16:28;;;;;;;;;;;;;-1:-1:-1;8376:22:28;;;;;;;;;;:30;;8350:16;;-1:-1:-1;8376:30:28;;-1:-1:-1;8376:22:28;-1:-1:-1;8376:30:28;;;;-1:-1:-1;8376:30:28;:::i;:::-;-1:-1:-1;8472:13:28;;;:18;:23;:58;;;;-1:-1:-1;8499:26:28;;;;:31;8472:58;8468:265;;;8580:7;;;:11;;;8605:18;;;8468:265;;;8674:48;;;;;;;;8694:13;;;8674:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8688:4;;8709:1;8712:9;8674:13;:48::i;:::-;8670:52;;8468:265;8754:11;8763:1;8754:8;:11::i;:::-;8742:9;;;:23;8775:17;;:13;;;:17;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;8195:604:28:o;1272:131:22:-;1330:7;1357:5;;;1376:6;;;;1368:15;;;;;;1397:1;1390:8;;1272:131;;;;;;:::o;697:1559:25:-;818:16;;:::i;:::-;875:15;;:::i;:::-;1003:6;1102:11;1267:8;1409:28;;:::i;:::-;1563:17;1691:25;837:28;;;;;;;;;855:3;845:14;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;845:14:25;;;;;;;;;;;;;;;;837:28;;;;;;;861:3;837:28;;;818:47;;919:5;909:16;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;909:16:25;;;;;;;;;;;;;;;;900:1;:6;;:25;;;;;;;;;;;;;957:5;935:4;:11;;:19;947:1;:6;;;935:19;;;;;;;;;;;;;;;;;:27;;;;;;;;;;;;:::i;:::-;;1012:1;1003:10;;998:1128;1015:15;;998:1128;;1116:30;1135:10;1116:18;:30::i;:::-;1102:44;;1187:6;1181:1;1176:17;;;;1174:20;1160:34;;;;1223:30;1237:1;1246:6;1240:3;:12;1223:13;:30::i;:::-;1212:7;;;1208:45;;;;;-1:-1:-1;1306:27:25;;:18;:27::i;:::-;1295:7;;;1289:44;;-1:-1:-1;1469:11:25;1295:1;1469:8;:11::i;:::-;1451:10;1462:3;1451:15;;;;;;;;;;:29;1525:15;;1516:8;;1525:19;;;-1:-1:-1;;1525:23:25;;1516:33;;;;;;;;;;;;;;1494:10;1509:3;1505:1;:7;1494:19;;;;;;;;;;;;;;;;;:55;;;;1604:13;;1619;;;;1593:40;;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;6:49;;1593:40:25;;;;;;;;1583:51;;1593:40;;;;;;1583:51;;;;1593:40;1583:51;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;1583:51:25;;;;;;;;;;;;;;;;1563:71;;1719:4;:10;;:21;1730:9;1719:21;;;;;;;;;;;;;;;;;1691:49;;1805:1;1778:10;:19;;1798:3;1778:24;;;;;;;;;:28;;:24;;;;;;;;;:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1866:38;;:10;;1886:7;;;;;1866:28;;;;;;:36;;;;;;;;:28;;;;;;;;;:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:38::i;:::-;1862:148;;;1971:15;;1962:8;;-1:-1:-1;;1971:19:25;;;:23;;1962:33;;;;;;;;;;;;;;;1924:10;1944:1;:7;;;1924:28;;;;;;;;;;:71;1862:148;2085:13;;;2100;;;;2074:40;;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;6:49;;2074:40:25;;;;;;;;2064:51;;2074:40;;;;2064:51;;;;;2074:40;2064:51;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;2064:51:25;;;;;;;;;;;2055:6;;;:60;;;;-1:-1:-1;;;274:1;1032:3:25;;;;;998:1128;;;2135:7;;;:11;;;2177;2135:1;2177:8;:11::i;:::-;2164:9;;;;:24;2156:33;;;;;;2211:11;2220:1;2211:8;:11::i;:::-;2199:9;;;:23;-1:-1:-1;;2232:17:25;;:13;;;:17;-1:-1:-1;;;2232:17:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;697:1559:25:o;527:133:28:-;593:5;617:36;626:4;632:20;642:4;648:3;632:9;:20::i;:::-;617:8;:36::i;:::-;610:43;527:133;-1:-1:-1;;;527:133:28:o;4668::25:-;4734:5;4758:36;4767:4;4773:20;4783:4;4789:3;4773:9;:20::i;2979:1225:28:-;3071:15;3088:19;3119:16;;:::i;:::-;3171:15;;:::i;:::-;3212:28;;:::i;:::-;3250:11;3271:16;3324:21;;:::i;:::-;3359;;:::i;:::-;3734:9;3757:19;;:::i;:::-;4111:6;3138:23;;;;;;;;;3146:9;3138:23;;;;;;;3157:3;3138:23;;;3119:42;;3189:4;:13;;3171:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3297:705;3413:35;3437:1;3440;:7;;;3413:23;:35::i;:::-;3487:7;;;;;:14;;;3470:13;;;;3394:54;;-1:-1:-1;3394:54:28;;-1:-1:-1;3470:31:28;3462:40;;;;;;3520:13;;;;:18;3516:90;;;3586:5;;3516:90;3629:13;;;;3619:23;;;;3682:3;:12;;;3670:25;;3656:39;;;;;3675:1;3709:11;;3805:26;3824:6;3805:18;:26::i;:::-;3790:41;;;;;;;;3871:47;3880:4;:10;;:18;3891:1;:6;;;3880:18;;;;;;;;;;;;;;;;;:27;;3912:4;3908:1;:8;3880:37;;;;;;;;;3871:47;;;;;;;;3880:37;;;;;;;;;3871:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:8;:47::i;:::-;3854:13;;;;3845:8;;:23;;;;;;;;;;:73;;;;;;;;;;;;;3936:4;:10;;:18;3947:1;:6;;;3936:18;;;;;;;;;;;;;;;;;:27;;3964:4;3936:33;;;;;;;;;3932:37;;;;;;;;3936:33;;;;;;;;;3932:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3987:4;;-1:-1:-1;3932:37:28;;-1:-1:-1;3987:4:28;;3297:705;;;4029:1;4015:11;:15;4011:187;;;4080:11;4066:26;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;4066:26:28;;4054:38;;4120:1;4111:10;;4106:81;4127:11;4123:1;:15;4106:81;;;4176:8;4185:1;4176:11;;;;;;;;;;;4161:9;4171:1;4161:12;;;;;;;;;;;;;;;;;;:26;4140:3;;4106:81;;;2979:1225;;;;;;;;;;;;;;;:::o;6676::25:-;6768:15;6785:19;6816:16;;:::i;:::-;6868:15;;:::i;:::-;6909:28;;:::i;:::-;6947:11;6968:16;7021:21;;:::i;:::-;7056;;:::i;:::-;7431:9;7454:19;;:::i;:::-;7808:6;6835:23;;;;;;;;;6843:9;6835:23;;;;;;;6854:3;6835:23;;;6816:42;;6886:4;:13;;6868:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6994:705;7110:35;7134:1;7137;:7;;;7110:23;:35::i;:::-;7184:7;;;;:14;;;;;7167:13;;;;7091:54;;-1:-1:-1;7091:54:25;;-1:-1:-1;7167:31:25;7159:40;;;;;;7217:13;;;;:18;7213:90;;;7283:5;;7213:90;7326:13;;;;7316:23;;;;7379:3;:12;;;7367:25;;7353:39;;;;;7372:1;7406:11;;7502:26;7521:6;7502:18;:26::i;:::-;7487:41;;;;;;;;7568:47;7577:4;:10;;:18;7588:1;:6;;;7577:18;;;;;;;;;;;;;;;;;:27;;7609:4;7605:1;:8;7577:37;;;;;;;;;7568:47;;;;;;;;7577:37;;;;;;;;;7568:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:8;:47::i;:::-;7551:13;;;;7542:8;;:23;;;;;;;;;;:73;;;;;;;;;;;;;7633:4;:10;;:18;7644:1;:6;;;7633:18;;;;;;;;;;;;;;;;;:27;;7661:4;7633:33;;;;;;;;;7629:37;;;;;;;;7633:33;;;;;;;;;7629:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7684:4;;-1:-1:-1;7629:37:25;;-1:-1:-1;7684:4:25;;6994:705;;;7726:1;7712:11;:15;7708:187;;;7777:11;7763:26;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;7763:26:25;;7751:38;;7817:1;7808:10;;7803:81;7824:11;7820:1;:15;7803:81;;;7873:8;7882:1;7873:11;;;;;;;;;;;7858:9;7868:1;7858:12;;;;;;;;;;;;;;;;;;:26;7837:3;;7803:81;;1445:288:30;1556:11;;;;1617:13;;1505:4;;1609:22;;;;280:4;1655:24;;;;1651:54;;;1700:5;1693:12;;;;1651:54;-1:-1:-1;1722:4:30;;1445:288;-1:-1:-1;;;1445:288:30:o;1802:373::-;1864:4;1880:10;1904:12;1970:11;1893:1;1880:14;;1933:27;1948:4;:11;;;1933:14;:27::i;:::-;1919:11;;;;1998:8;;1919:41;;;;-1:-1:-1;1984:22:30;;-1:-1:-1;2016:130:30;2033:6;2023:7;:16;2016:130;;;2074:20;2086:7;2074:11;:20::i;:::-;2128:7;;;;;2064:30;;;;2016:130;;;-1:-1:-1;2163:5:30;;1802:373;-1:-1:-1;;;1802:373:30:o;3505:539::-;3641:13;;3565:4;;3633:22;;188:4;3679:26;;3675:362;;;3727:1;3720:8;;;;3675:362;234:4;3747:25;;;:83;;-1:-1:-1;280:4:30;3777:25;;;;;:52;;-1:-1:-1;326:4:30;3806:23;;3777:52;3743:294;;;3851:1;3844:8;;;;3743:294;280:4;3871:24;;3867:170;;;-1:-1:-1;;3935:35:30;;;-1:-1:-1;3928:42:30;;3867:170;-1:-1:-1;;4004:33:30;;;-1:-1:-1;3997:40:30;;2224:1229;2361:13;;2281:8;;2353:22;;188:4;2399:26;;2395:1052;;;2446:1;2439:8;;;;2395:1052;234:4;2475:25;;2471:976;;;-1:-1:-1;;2521:30:30;;;-1:-1:-1;2514:37:30;;2471:976;280:4;2571:24;;2567:880;;;2664:4;2657:5;2653:16;2743:1;2735:6;2731:14;2721:24;;2898:7;2894:2;2890:16;2885:3;2881:26;2872:6;2866:13;2862:46;2991:1;2982:7;2978:15;2969:7;2965:29;2958:36;;2620:388;;;;;326:4;3037:23;;3033:414;;;-1:-1:-1;;3083:28:30;;;-1:-1:-1;3076:35:30;;3033:414;3249:1;3237:14;;;;3288:13;3316:2;3312:16;;;3205:4;3312:16;3307:3;3303:26;3284:46;;3394:29;;;-1:-1:-1;;3394:29:30;;2224:1229;-1:-1:-1;2224:1229:30:o;5987:667::-;6387:9;6103:194;364:2;6110:16;;6103:194;;6200:10;;6187:24;;364:2;6239:16;;;;6269:17;;;;-1:-1:-1;;6128:16:30;;;;6103:194;;;-1:-1:-1;6479:10:30;;6550:11;;364:2;6407:15;;;;6399:3;:24;-1:-1:-1;;6399:28:30;6491:9;;6475:26;;;6546:22;;6616:21;;;;6603:35;;6446:202::o;7330:131:7:-;7402:12;7409:4;7402:6;:12::i;:::-;7424:30;:9;7441:4;7447:6;7424:30;:16;:30;:::i;:::-;7330:131;;:::o;7467:193::-;7524:23;:13;7542:4;7524:23;:17;:23;:::i;:::-;:30;:35;7520:134;;;7575:10;27::-1;;39:1;23:18;;45:23;;;-1:-1;7575:21:7;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;7637:5:7;;;;;;;;;;;;;;;;;7610:33;;:13;;7631:4;;7610:33;:20;:33;:::i;9236:1122:28:-;9333:6;;:::i;:::-;9398:21;;:::i;:::-;9429;;:::i;:::-;9526:19;9936:9;9959:19;;:::i;:::-;10047:24;;:::i;:::-;9373:7;;;;;:14;;;9359:10;;;;:28;;9351:37;;;;;;9479;9503:3;9508:1;:7;;;9479:23;:37::i;:::-;9559:13;;;;9460:56;;-1:-1:-1;9460:56:28;-1:-1:-1;9559:18:28;9555:753;;;9664:5;9650:19;;9555:753;;;9707:7;;;;;:14;;;9690:13;;;;:31;9686:622;;9802:42;9816:4;9822:1;:6;;;9830;9838:5;9802:13;:42::i;:::-;9788:56;;9686:622;;;10007:26;10026:6;10007:18;:26::i;:::-;10113:19;;;;;;;;;;;;;;;;;;10085;;9992:41;;-1:-1:-1;9992:41:28;;-1:-1:-1;10113:19:28;9992:41;10085:25;;;;;;;;;;:47;;;;10178:62;;;;;;;;;10185:1;:6;;;10178:62;;;;;;;10193:46;10212:1;:7;;;10221:6;:13;;;10237:1;10221:17;10193:18;:46::i;:::-;10178:62;;10146:19;;10166:1;:8;;;10146:29;;;;;;;;;;:94;10268:29;10280:4;10286:10;10268:11;:29::i;:::-;10254:43;;9686:622;-1:-1:-1;;10324:27:28;;;;;;;;;;;;-1:-1:-1;10324:27:28;;;;;;;-1:-1:-1;10324:27:28;9236:1122;-1:-1:-1;;;;;9236:1122:28:o;2129:150::-;2234:6;;2242:7;;;;;:14;;;;2258:12;;2223:48;;;;;;;;;;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;2223:48:28;;;;;;;;2213:59;;2187:7;;2223:48;;;2213:59;;;;;2223:48;2213:59;66:2:-1;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;2460:639:26;2520:8;;;;;2548:13;;;2540:22;;;;;;2604:8;;-1:-1:-1;2686:1:26;;-1:-1:-1;2666:132:26;2699:2;2689:7;:12;2666:132;;;2732:13;2746:2;:12;;;2732:27;;;;;;;;-1:-1:-1;;;2732:27:26;:32;;;2763:1;-1:-1:-1;;;2732:32:26;;;2728:59;;;2782:5;;2728:59;2703:9;;;;;2666:132;;;2836:13;2850:2;:12;;;2836:27;;;;;;;;-1:-1:-1;;;2836:27:26;-1:-1:-1;;;2830:34:26;;2825:40;;2807:58;;2887:1;2875:13;;2909:1;2903:7;;2898:154;2918:3;2912;:9;2898:154;;;2950:17;;;2949:24;2945:70;;3012:3;3002:7;2998:1;:11;:17;2991:24;;;;2945:70;2923:6;;;;;3029:12;;2898:154;;;3061:13;643:418;704:14;;:::i;:::-;720;;:::i;:::-;761:1;:8;;;754:3;:15;;:29;;;;;780:3;773;:10;;754:29;746:38;;;;;;;;794:13;;;:19;;;827:8;;823:155;;;873:1;851:24;;823:155;;;920:6;;-1:-1:-1;;951:3:26;:9;;;939:22;;938:28;929:38;920:47;906:61;;823:155;1003:8;;;;;:14;;;987:13;;;:30;1041:6;;:13;;;;;;;;1027:27;;643:418;:::o;2069:197::-;2125:13;2140:12;;:::i;:::-;2172:8;;;;2183:1;-1:-1:-1;2164:21:26;;;;;;-1:-1:-1;;2208:6:26;;2224:34;;;;;;;;;2232:6;;2208:13;2232:11;2224:34;;;2245:8;;;;-1:-1:-1;;2245:12:26;2224:34;;;;;;;-1:-1:-1;;;2208:13:26;;;2069:197::o;5708:268:25:-;5766:7;5794:11;:1;:9;:11::i;:::-;5793:12;5785:21;;;;;;5820:11;:1;:9;:11::i;:::-;5816:154;;;5875:6;;;;;5883:7;;;;;:14;;;;5899:12;;5864:48;;;;;;;;;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;5864:48:25;;;;;;;;5854:59;;5864:48;;;;;;5854:59;;;;5864:48;5854:59;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;5854:59:25;;;;;;;;;;;;;;;;5847:66;;;;5816:154;-1:-1:-1;5951:8:25;;5944:15;;361:135:24;436:11;;412:4;;436:25;:52;;;;-1:-1:-1;;465:9:24;;;:23;;361:135::o;10812:148:28:-;10883:7;10909:44;10932:4;10948:3;10938:14;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;10938:14:28;;;;;;;;;;;;;;;;10909:22;:44::i;1318:132::-;1421:11;:22;;;;;;;;;;;;1414:29;;;;;;;;;;;;-1:-1:-1;;1414:29:28;;;;;;;;;;;;;;;;;;;;;;;;;;1397:5;;1414:29;;;1421:22;1414:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1318:132;;;;:::o;14079:148:25:-;14150:7;14176:44;14199:4;14215:3;14205:14;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;14205:14:25;;;;;;;;;;;;;;;;14176:22;:44::i;302:183:29:-;382:14;;:::i;:::-;398:19;;:::i;:::-;436:42;444:5;451:26;464:5;471;451:12;:26::i;:::-;436:7;:42::i;302:183:26:-;382:14;;:::i;:::-;398:19;;:::i;:::-;436:42;444:5;451:26;464:5;471;451:12;:26::i;4058:604:25:-;4136:16;;:::i;:::-;4193:17;4306:15;;:::i;:::-;4155:28;;;;;;;;;4173:3;4163:14;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;4163:14:25;;;;;;;;;;;;;;;;4155:28;;;;;;;4179:3;4155:28;;;4136:47;;4223:5;4213:16;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;4213:16:25;;;;;;;;;;;;;-1:-1:-1;4239:22:25;;;;;;;;;;:30;;4213:16;;-1:-1:-1;4239:30:25;;-1:-1:-1;4239:22:25;-1:-1:-1;4239:30:25;;;;-1:-1:-1;4239:30:25;:::i;:::-;-1:-1:-1;4335:18:25;;;;:23;:58;;;;-1:-1:-1;4362:26:25;;;;:31;4335:58;4331:265;;;4443:7;;;:11;;;4468:6;;;:18;;;4331:265;;;4537:48;;;;;;;;4557:13;;;4537:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4551:4;;4572:1;4575:9;4537:13;:48::i;:::-;4533:52;;4331:265;4617:11;4626:1;4617:8;:11::i;:::-;4605:9;;;:23;4638:17;;:13;;;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;4058:604:25:o;8805:425:28:-;8910:7;8962:15;;:::i;:::-;9010:9;9029:19;;:::i;:::-;8937:10;;;;8950:1;-1:-1:-1;8929:23:28;;;;;;8980:20;;;;:10;;;:20;;;;;;;;8962:38;;;;;;;;;;8980:20;;8962:38;;;;;;8980:20;;8962:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9073:23;9092:3;9073:18;:23::i;:::-;9145:10;;9058:38;;-1:-1:-1;9058:38:28;-1:-1:-1;9125:50:28;;9139:4;;9058:38;9145:16;;;;;;;;;;;9163:4;9169:5;9125:13;:50::i;:::-;9106:10;;9117:4;9106:16;;;;;;;;;;:69;9192:31;9205:4;9211:8;9221:1;9192:12;:31::i;:::-;9185:38;8805:425;-1:-1:-1;;;;;;;;8805:425:28:o;1723:197:29:-;1792:9;;:::i;:::-;1831:8;;;;1821:18;;;1813:27;;;;;;1861:8;;;;;:17;;;1850:8;;;:28;1897:6;;:16;;;;;;1888:25;;1850:1;1723:197::o;10364:247:28:-;10438:15;10465:9;10477:7;10482:1;10477:4;:7::i;:::-;10522:10;;:13;:10;10494:13;;;:10;;;;10522:13;10494;;;;;;;:41;;;;;;;;;;;;;;;;;;;;;;;;;10573:10;;:13;;;10545:41;;10494:25;10545;;:41;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10465:19:28;;10603:1;-1:-1:-1;10364:247:28:o;502:106:24:-;577:9;;;:23;;;502:106::o;10966:343:28:-;11058:7;11194:16;;:::i;:::-;11081:13;;;:18;:23;:58;;;;-1:-1:-1;11108:26:28;;;;:31;11081:58;11077:226;;;11162:1;;-1:-1:-1;11155:8:28;;11077:226;-1:-1:-1;11213:23:28;;;;;;;;;;;11232:3;11213:23;;;;;;;;11257:35;;;;;;;11275:13;;;11257:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11213:23;11257:35;;11269:4;;11213:23;11257:11;:35::i;:::-;11250:42;;;;14233:343:25;14325:7;14461:16;;:::i;:::-;14348:18;;;;:23;:58;;;;-1:-1:-1;14375:26:25;;;;:31;14348:58;14344:226;;;14429:1;;-1:-1:-1;14422:8:25;;14344:226;-1:-1:-1;14480:23:25;;;;;;;;;;;14499:3;14480:23;;;;;;;;14524:35;;;;;;;14542:13;;;14524:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14480:23;14524:35;;14536:4;;14480:23;14524:11;:35::i;1141:438:29:-;1208:11;1231;1362:9;1405;1256:1;:8;;;1245:1;:8;;;:19;:41;;1278:1;:8;;;1245:41;;;1267:1;:8;;;1245:41;1388:6;;1379;;1231:55;;-1:-1:-1;1379:15:29;;-1:-1:-1;;;;1417:8:29;-1:-1:-1;1435:138:29;1451:6;1442;:15;1435:138;;;1496:11;;;1495:18;1491:45;;1531:5;;1491:45;1459:8;;;;;1550:12;;;;1435:138;;;1141:438;;;;;;;:::o;::26:-;1208:11;1231;1362:9;1405;1256:1;:8;;;1245:1;:8;;;:19;:41;;1278:1;:8;;;1245:41;;;1267:1;:8;;;1245:41;1388:6;;1379;;1231:55;;-1:-1:-1;1379:15:26;;-1:-1:-1;;;;1417:8:26;-1:-1:-1;1435:138:26;1451:6;1442;:15;1435:138;;;1496:11;;;1495:18;1491:45;;1531:5;;1491:45;1459:8;;;;;1550:12;;;;1435:138;;12445:1180:25;12542:6;;:::i;:::-;12647:21;;:::i;:::-;12678;;:::i;:::-;12775:19;13200:9;13223:19;;:::i;:::-;13311:24;;:::i;:::-;12622:1;:7;;;:14;;;12608:3;:10;;;:28;;12600:37;;;;;;;;12728;12752:3;12757:1;:7;;;12728:23;:37::i;:::-;12808:13;;;;12709:56;;-1:-1:-1;12709:56:25;-1:-1:-1;12808:18:25;12804:770;;;12913:5;12899:19;;12804:770;;;12956:1;:7;;;:14;;;12939:6;:13;;;:31;;:46;;;;;12974:11;:1;:9;:11::i;:::-;12935:639;;;13066:42;13080:4;13086:1;:6;;;13094;13102:5;13066:13;:42::i;:::-;13052:56;;12935:639;;;13271:26;13290:6;13271:18;:26::i;:::-;13256:41;;-1:-1:-1;13256:41:25;-1:-1:-1;13377:20:25;13385:5;13256:41;13377:7;:20::i;:::-;13349:19;;13369:4;13349:25;;;;;;;;;;:48;;;;13443:63;13451:1;:6;;;13459:46;13478:1;:7;;;13487:6;:13;;;13503:1;13487:17;13459:18;:46::i;:::-;13443:7;:63::i;:::-;13411:19;;13431:1;:8;;;13411:29;;;;;;;;;;:95;13534:29;13546:4;13552:10;13534:11;:29::i;:::-;13520:43;;12935:639;13590:28;13598:11;13611:6;13590:7;:28::i;:::-;13583:35;12445:1180;-1:-1:-1;;;;;;;;;;;12445:1180:25:o;10617:189:28:-;10709:15;10743:19;;;:10;;;:19;;;;;10709:15;10736:26;10743:19;10709:15;10736:26;:::i;:::-;;;10779:20;10791:4;10797:1;10779:11;:20::i;:::-;10772:27;10617:189;-1:-1:-1;;;;10617:189:28:o;2336:158::-;2446:10;;2390:7;;2437:23;;2390:7;2446:13;;;;;2437:8;:23::i;:::-;2471:10;;2462:23;;2482:1;2471:13;;2462:23;2426:60;;;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;6:49;;2426:60:28;;;;;;;;2416:71;;2426:60;;;;;;2416:71;;;;2426:60;2416:71;66:2:-1;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;11665:654:28;11750:7;11815:21;;:::i;:::-;11846;;:::i;:::-;11790:7;;;;;:14;;;11776:10;;;;:28;;11768:37;;;;;;11896;11920:3;11925:1;:7;;;11896:23;:37::i;:::-;11947:13;;;;11877:56;;-1:-1:-1;11877:56:28;-1:-1:-1;11947:18:28;11943:370;;;12045:6;;;-1:-1:-1;12038:13:28;;11943:370;12089:7;;;;;:14;;;12072:13;;;;:31;12068:245;;12177:33;12189:4;12195:1;:6;;;12203;12177:11;:33::i;:::-;12170:40;;;;12068:245;12300:1;;-1:-1:-1;12068:245:28;11665:654;;;;;;;:::o;14932::25:-;15017:7;15082:21;;:::i;:::-;15113;;:::i;:::-;15057:1;:7;;;:14;;;15043:3;:10;;;:28;;15035:37;;;;;;;;15163;15187:3;15192:1;:7;;;15163:23;:37::i;:::-;15214:13;;;;15144:56;;-1:-1:-1;15144:56:25;-1:-1:-1;15214:18:25;15210:370;;;15312:1;:6;;;15305:13;;;;15210:370;15356:1;:7;;;:14;;;15339:6;:13;;;:31;;15335:245;;;15444:33;15456:4;15462:1;:6;;;15470;15444:11;:33::i;12004:435::-;12109:7;12171:15;;:::i;:::-;12219:9;12238:19;;:::i;:::-;12189:20;;;;:10;;;:20;;;;;;;;12171:38;;;;;;;;;;12189:20;;12171:38;;;;;;12189:20;;12171:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12282:23;12301:3;12282:18;:23::i;:::-;12354:10;;12267:38;;-1:-1:-1;12267:38:25;-1:-1:-1;12334:50:25;;12348:4;;12267:38;12354:16;;;;;;;;;;;12372:4;12378:5;12334:13;:50::i;:::-;12315:10;;12326:4;12315:16;;;;;;;;;;:69;12401:31;12414:4;12420:8;12430:1;12401:12;:31::i;11858:140::-;11927:15;;:::i;:::-;11953:6;;;:13;;;;11976:7;;;:15;11953:1;11858:140::o;13631:247::-;13705:15;13732:9;13744:7;13749:1;13744:4;:7::i;:::-;13789:10;;:13;:10;13761:13;;;:10;;;;13789:13;13761;;;;;;;;:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13840:10;;:13;;;13812:41;;13761:25;13812;;:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;13732:19:25;13870:1;-1:-1:-1;13631:247:25:o;11315:344:28:-;11408:7;11460:15;;:::i;:::-;11508:9;11527:19;;:::i;:::-;11435:10;;;;11448:1;-1:-1:-1;11427:23:28;;;;;;11478:20;;;;:10;;;:20;;;;;;;;11460:38;;;;;;;;;;11478:20;;11460:38;;;;;;11478:20;;11460:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11571:23;11590:3;11571:18;:23::i;:::-;11629:10;;11556:38;;-1:-1:-1;11556:38:28;-1:-1:-1;11611:41:28;;11623:4;;11556:38;11629:16;;;;;;;;;;;11647:4;11611:11;:41::i;:::-;11604:48;11315:344;-1:-1:-1;;;;;;;11315:344:28:o;14582::25:-;14675:7;14727:15;;:::i;:::-;14775:9;14794:19;;:::i;:::-;14702:10;;;;14715:1;-1:-1:-1;14694:23:25;;;;;;14745:20;;;;:10;;;:20;;;;;;;;14727:38;;;;;;;;;;14745:20;;14727:38;;;;;;14745:20;;14727:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14838:23;14857:3;14838:18;:23::i;:::-;14896:10;;14823:38;;-1:-1:-1;14823:38:25;-1:-1:-1;14878:41:25;;14890:4;;14823:38;14896:16;;;;;;;;;;;14914:4;14878:11;:41::i;13884:189::-;13976:15;14010:19;;;:10;;;:19;;;;;13976:15;14003:26;14010:19;13976:15;14003:26;:::i;:::-;;;14046:20;14058:4;14064:1;14046:11;:20::i;6033:158::-;6143:10;;6087:7;;6134:23;;6087:7;6143:13;;;;;6134:8;:23::i;:::-;6168:10;;6159:23;;6179:1;6168:13;;631:7440:7;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;631:7440:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;631:7440:7;;;-1:-1:-1;631:7440:7;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;631:7440:7;;;;;;;;:::o;:::-;;;;;;;;;;-1:-1:-1;631:7440:7;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;-1:-1:-1;631:7440:7;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;105:10:-1;631:7440:7;88:34:-1;-1:-1;631:7440:7;;;-1:-1:-1;;631:7440:7:o;:::-;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;-1:-1;631:7440:7;;;-1:-1:-1;;631:7440:7:o;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;-1:-1:-1;631:7440:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;631:7440:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;631:7440:7;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;631:7440:7;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i', 'source': "pragma solidity ^0.4.24;\n\nimport {PartialMerkleTree} from \"solidity-partial-tree/contracts/tree.sol\";\nimport {PatriciaTree} from \"solidity-patricia-tree/contracts/tree.sol\";\nimport \"openzeppelin-solidity/contracts/ownership/Secondary.sol\";\nimport \"openzeppelin-solidity/contracts/access/Roles.sol\";\nimport \"openzeppelin-solidity/contracts/math/SafeMath.sol\";\nimport \"solidity-rlp/contracts/RLPReader.sol\";\nimport \"./interfaces/IStateTree.sol\";\nimport \"./interfaces/IMerkluxReducerRegistry.sol\";\nimport \"./interfaces/IMerkluxStoreForVM.sol\";\nimport {Action} from \"./Types.sol\";\n\n\n/**\n * @title MerkluxTree data structure for\n *\n */\ncontract MerkluxStoreForCase is Secondary, IMerkluxStoreForVM, IStateTree {\n    using SafeMath for uint256;\n    using PartialMerkleTree for PartialMerkleTree.Tree;\n    using PatriciaTree for PatriciaTree.Tree;\n    using Roles for Roles.Role;\n    using RLPReader for RLPReader.RLPItem;\n    using RLPReader for bytes;\n    using Action for Action.Object;\n    bytes constant EXIST = \"1\";\n\n    uint256 private actionNum;\n    Roles.Role private reducers;\n    PartialMerkleTree.Tree private stateTree;\n    PatriciaTree.Tree private referenceTree;\n    PatriciaTree.Tree private actionTree;\n    address[] private callers;\n    mapping(address => uint256) private nonce;\n    bytes[] public references;\n    Action.Object[] public actions;\n\n\n    modifier onlyReducers() {\n        require(msg.sender == primary() || reducers.has(msg.sender), \"Only registered reducers can call this function\");\n        _;\n    }\n\n    constructor() public Secondary() {\n    }\n\n    function initialize(bytes32 _stateRoot) public onlyPrimary {\n        stateTree.initialize(_stateRoot);\n    }\n\n    function setActionNum(uint256 _actionNum) public onlyPrimary {\n        require(actionNum == 0, \"Action number is already set\");\n        actionNum = _actionNum;\n    }\n\n    function commitBranch(bytes _key, bytes _value, uint _branchMask, bytes32[] _siblings) public onlyPrimary {\n        stateTree.commitBranch(_key, _value, _branchMask, _siblings);\n        if (referenceTree.get(_key).length == 0) {\n            references.push(_key);\n            referenceTree.insert(_key, EXIST);\n        }\n    }\n\n    event RegReducer();\n\n    function registerDeployedReducer(address _reducer) public onlyPrimary {\n        reducers.add(_reducer);\n        emit RegReducer();\n    }\n\n    function deployReducer(IMerkluxReducerRegistry _registry, string _action, bytes _data) public onlyPrimary {\n        bytes32 reducerKey;\n        address deployedAddress;\n        (reducerKey, deployedAddress) = _registry.registerReducer(_data);\n        require(bytes(_action).length != 0, \"Action is invalid\");\n        bytes memory actionKey = _appendPrefix(_action);\n        _updateState(actionKey, abi.encodePacked(reducerKey), true);\n        reducers.add(deployedAddress);\n    }\n\n    function runReducer(IMerkluxReducerRegistry _registry, address _sender, string _action, bytes _data) public onlyPrimary {\n        MerkluxReducer reducer = _retrieveReducer(_registry, _action);\n        // Not a registered reducer\n        require(address(reducer) != address(0), \"Reducer is not registered\");\n\n        bytes memory rlpEncodedPairs;\n\n        // Get pairs to update from reducer\n        rlpEncodedPairs = reducer.reduce(this, _sender, _data);\n        RLPReader.RLPItem[] memory pairs = rlpEncodedPairs.toRlpItem().toList();\n        // length should be an even number\n        // Reducer should returns rlp encoded list which length is an even number\n        require(pairs.length & 1 == 0, \"Reducer returns invalid rlp data\");\n\n        // Update key value pairs\n        for (uint i = 0; i < (pairs.length / 2); i++) {\n            _updateState(pairs[i * 2].toBytes(), pairs[i * 2 + 1].toBytes(), false);\n        }\n    }\n\n    function increaseAccountActionNonce(address _user, uint256 _nonce) public onlyPrimary {\n        require(nonce[_user] < _nonce, \"Nonce should be greater than before\");\n        if (nonce[_user] == 0) {\n            callers.push(_user);\n        }\n        nonce[_user] = _nonce;\n    }\n\n    function putAction(\n        bytes32 _prevBlockHash,\n        address _from,\n        uint256 _nonce,\n        string _action,\n        bool _deployReducer,\n        bytes _data,\n        bytes _signature\n    ) public onlyPrimary returns (bytes32 _actionHash) {\n        Action.Object memory action = Action.Object(\n            _prevBlockHash,\n            _from,\n            actionNum,\n            _nonce,\n            _action,\n            _deployReducer,\n            _data,\n            _signature\n        );\n        actions.push(action);\n        bytes32 actionHash = action.getActionHash();\n        actionTree.insert(abi.encodePacked(actionHash), EXIST);\n        actionNum = actionNum.add(1);\n        return actionHash;\n    }\n\n    function resetCurrentData() public onlyPrimary {\n        _resetReferenceData();\n        _resetActionData();\n        _resetNonce();\n    }\n\n    function read(bytes key) public onlyReducers returns (bytes) {\n        return _get(key);\n    }\n\n    function getActionNum() public view returns (uint256) {\n        return actionNum;\n    }\n\n    function getStateRoot() public view returns (bytes32) {\n        return stateTree.getRootHash();\n    }\n\n    function getReferenceRoot() public view returns (bytes32) {\n        return referenceTree.getRootHash();\n    }\n\n    function getActionRoot() public view returns (bytes32) {\n        return actionTree.getRootHash();\n    }\n\n    function get(bytes _key) public view returns (bytes) {\n        return stateTree.get(_key);\n    }\n\n    function getProof(bytes _key) public view returns (uint branchMask, bytes32[] _siblings) {\n        return stateTree.getProof(_key);\n    }\n\n    function getActionProof(bytes32 actionHash) public view returns (uint branchMask, bytes32[] _siblings) {\n        return actionTree.getProof(abi.encodePacked(actionHash));\n    }\n\n    function getAccountActionNonce(address _sender) public view returns (uint256) {\n        return nonce[_sender];\n    }\n\n    function _resetReferenceData() private {\n        delete referenceTree;\n        delete references;\n    }\n\n    function _resetActionData() private {\n        delete actions;\n        delete actionTree;\n    }\n\n    function _resetNonce() private {\n        for (uint i = 0; i < callers.length; i++) {\n            delete nonce[callers[i]];\n        }\n        delete callers;\n    }\n\n    function _retrieveReducer(IMerkluxReducerRegistry _registry, string _action) private returns (MerkluxReducer reducer) {\n        bytes32 reducerHash;\n        bytes memory actionKey = _appendPrefix(_action);\n        bytes memory storedValue = _get(actionKey);\n\n        if (storedValue.length == 32) {\n            for (uint i = 0; i < 32; i++) {\n                reducerHash |= bytes32(storedValue[i] & 0xFF) >> (i * 8);\n            }\n        }\n        reducer = _registry.getReducer(reducerHash);\n    }\n\n    function _updateState(bytes _key, bytes _value, bool _isReducer) private {\n        if (!_isReducer && _key.length > 1) {\n            // Reducer cannot be overwritten through this function\n            require(_key[0] != byte(38), \"Prefix & is reserved for reducers\");\n        }\n        _set(_key, _value);\n    }\n\n    function _get(bytes memory _key) private returns (bytes){\n        _refer(_key);\n        return stateTree.get(_key);\n    }\n\n    function _set(bytes memory _key, bytes memory _value) private {\n        _refer(_key);\n        stateTree.insert(_key, _value);\n    }\n\n    function _refer(bytes memory _key) private {\n        if (referenceTree.get(_key).length == 0) {\n            references.push(_key);\n            referenceTree.insert(_key, EXIST);\n        }\n    }\n\n    /**\n     * @dev\n     * @return _reducerKey always starts with 0x0026\n     */\n    function _appendPrefix(string _action) private pure returns (bytes memory _actionKey) {\n        // add '&' as a prefix\n        bytes memory _a = bytes(_action);\n        _actionKey = new bytes(_a.length + 1);\n        _actionKey[0] = \"&\";\n        for (uint i = 1; i < _actionKey.length; i++) _actionKey[i] = _a[i - 1];\n    }\n}\n\n" }, 'MerkluxVM': { 'contractName': 'MerkluxVM', 'abi': [{ 'anonymous': false, 'inputs': [{ 'indexed': false, 'name': '_actionHash', 'type': 'bytes32' }], 'name': 'Dispatched', 'type': 'event' }, { 'anonymous': false, 'inputs': [{ 'indexed': false, 'name': '_blockHash', 'type': 'bytes32' }, { 'indexed': false, 'name': '_signature', 'type': 'bytes' }], 'name': 'Sealed', 'type': 'event' }, { 'constant': false, 'inputs': [{ 'name': '_signature', 'type': 'bytes' }], 'name': 'seal', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'getBlockHashToSeal', 'outputs': [{ 'name': '', 'type': 'bytes32' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'getDataForNewAction', 'outputs': [{ 'name': 'prevBlockHash', 'type': 'bytes32' }, { 'name': 'nonce', 'type': 'uint256' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [{ 'name': '_blockHash', 'type': 'bytes32' }], 'name': 'getBlock', 'outputs': [{ 'name': '_previousBlock', 'type': 'bytes32' }, { 'name': '_actionNum', 'type': 'uint256' }, { 'name': '_state', 'type': 'bytes32' }, { 'name': '_references', 'type': 'bytes32' }, { 'name': '_actions', 'type': 'bytes32' }, { 'name': '_sealer', 'type': 'address' }, { 'name': '_signature', 'type': 'bytes' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }], 'bytecode': '0x', 'deployedBytecode': '0x', 'sourceMap': '', 'deployedSourceMap': '', 'source': 'pragma solidity ^0.4.24;\n\nimport "openzeppelin-solidity/contracts/ownership/Secondary.sol";\nimport "openzeppelin-solidity/contracts/cryptography/ECDSA.sol";\nimport "openzeppelin-solidity/contracts/math/SafeMath.sol";\nimport "./interfaces/IMerkluxReducerRegistry.sol";\nimport "./interfaces/IMerkluxProvider.sol";\nimport "./interfaces/IMerkluxStoreForVM.sol";\nimport {Block, Chain} from "./Types.sol";\n\n\n\n/**\n * @title Merklux\n * @dev Merklux is a state management smart contract to control the state with a\n * unidirectional data flow. It can be used for state verifications accross evm\n * based block chains.\n */\n\ncontract MerkluxVM is IMerkluxProvider {\n    using Block for Block.Object;\n    using Chain for Chain.Object;\n    using SafeMath for uint256;\n    using ECDSA for bytes32;\n\n    // Every action dispatches increment the actionNureduce    uint256 public actionNum;\n\n    event Dispatched(bytes32 _actionHash);\n    event Sealed(bytes32 _blockHash, bytes _signature);\n\n    function reduce(\n        string _action,\n        bytes _data,\n        bytes32 _prevBlock,\n        uint256 _nonce,\n        bool _deployReducer,\n        bytes _signature\n    ) internal {\n        IMerkluxReducerRegistry registry = getRegistry();\n        IMerkluxStoreForVM store = getStore();\n        // only accept when prev block is same\n        require(_isRecent(_prevBlock), "MerkluxVM: Not a recent tx, update prev block");\n        // check the signature\n        address _from = keccak256(\n            abi.encodePacked(\n                _action,\n                _data,\n                _prevBlock,\n                _nonce,\n                _deployReducer\n            )\n        ).toEthSignedMessageHash().recover(_signature);\n\n        // increase nonce\n        store.increaseAccountActionNonce(_from, _nonce);\n\n        // update state tree & reference tree\n        if (_deployReducer) {\n            store.deployReducer(registry, _action, _data);\n        } else {\n            store.runReducer(registry, _from, _action, _data);\n        }\n\n        // record action\n        bytes32 actionHash = store.putAction(\n            _prevBlock,\n            _from,\n            _nonce,\n            _action,\n            _deployReducer,\n            _data,\n            _signature\n        );\n        emit Dispatched(actionHash);\n    }\n\n    // TODO set modifier to allow only the pseudo-randomly selected snapshot submitter\n    function seal(bytes _signature) external {\n        Block.Object memory candidate = _getBlockCandidate(msg.sender);\n        Chain.Object storage chain = getChain();\n        IMerkluxStoreForVM store = getStore();\n\n        candidate.signature = _signature;\n        // Check signature\n        require(candidate.isSealed(), "MerkluxVM: Signature is invalid");\n        bytes32 blockHash = candidate.getBlockHash();\n        chain.addBlock(candidate);\n        emit Sealed(blockHash, _signature);\n        store.resetCurrentData();\n    }\n\n    function getBlockHashToSeal() public view returns (bytes32) {\n        return _getBlockCandidate(msg.sender).getBlockHash();\n    }\n\n    function getDataForNewAction() public view returns (bytes32 prevBlockHash, uint256 nonce) {\n\n        Chain.Object storage chain = getChain();\n        IMerkluxStoreForVM store = getStore();\n        return (chain.getLastBlockHash(), store.getAccountActionNonce(msg.sender).add(1));\n    }\n\n    function getBlock(bytes32 _blockHash) public view returns (\n        bytes32 _previousBlock,\n        uint256 _actionNum,\n        bytes32 _state,\n        bytes32 _references,\n        bytes32 _actions,\n        address _sealer,\n        bytes memory _signature\n    ) {\n        Chain.Object storage chain = getChain();\n        return chain.getBlockWithHash(_blockHash);\n    }\n\n    function _isRecent(bytes32 _hash) private view returns (bool){\n        Chain.Object storage chain = getChain();\n        return (chain.getLastBlockHash() == _hash);\n    }\n\n    function _getBlockCandidate(address _sealer) private view returns (Block.Object memory candidate) {\n        Chain.Object storage chain = getChain();\n        IMerkluxStoreForVM store = getStore();\n        candidate.previousBlock = chain.getLastBlockHash();\n        candidate.actionNum = store.getActionNum();\n        candidate.state = store.getStateRoot();\n        candidate.references = store.getReferenceRoot();\n        candidate.actions = store.getActionRoot();\n        candidate.sealer = _sealer;\n        return candidate;\n    }\n}\n' }, 'Migrations': { 'contractName': 'Migrations', 'abi': [{ 'constant': true, 'inputs': [], 'name': 'last_completed_migration', 'outputs': [{ 'name': '', 'type': 'uint256' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': true, 'inputs': [], 'name': 'owner', 'outputs': [{ 'name': '', 'type': 'address' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'inputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'constructor' }, { 'constant': false, 'inputs': [{ 'name': 'completed', 'type': 'uint256' }], 'name': 'setCompleted', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': 'new_address', 'type': 'address' }], 'name': 'upgrade', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }], 'bytecode': '0x608060405234801561001057600080fd5b5060008054600160a060020a0319163317905561023c806100326000396000f3006080604052600436106100615763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630900f0108114610066578063445df0ac146100965780638da5cb5b146100bd578063fdacd576146100fb575b600080fd5b34801561007257600080fd5b5061009473ffffffffffffffffffffffffffffffffffffffff60043516610113565b005b3480156100a257600080fd5b506100ab6101c5565b60408051918252519081900360200190f35b3480156100c957600080fd5b506100d26101cb565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561010757600080fd5b506100946004356101e7565b6000805473ffffffffffffffffffffffffffffffffffffffff163314156101c1578190508073ffffffffffffffffffffffffffffffffffffffff1663fdacd5766001546040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b1580156101a857600080fd5b505af11580156101bc573d6000803e3d6000fd5b505050505b5050565b60015481565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff1633141561020d5760018190555b505600a165627a7a723058208abb26050d08f3f086919a3f912bcbcca09d9e37167430a232292f72f49cd51b0029', 'deployedBytecode': '0x6080604052600436106100615763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630900f0108114610066578063445df0ac146100965780638da5cb5b146100bd578063fdacd576146100fb575b600080fd5b34801561007257600080fd5b5061009473ffffffffffffffffffffffffffffffffffffffff60043516610113565b005b3480156100a257600080fd5b506100ab6101c5565b60408051918252519081900360200190f35b3480156100c957600080fd5b506100d26101cb565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561010757600080fd5b506100946004356101e7565b6000805473ffffffffffffffffffffffffffffffffffffffff163314156101c1578190508073ffffffffffffffffffffffffffffffffffffffff1663fdacd5766001546040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b1580156101a857600080fd5b505af11580156101bc573d6000803e3d6000fd5b505050505b5050565b60015481565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff1633141561020d5760018190555b505600a165627a7a723058208abb26050d08f3f086919a3f912bcbcca09d9e37167430a232292f72f49cd51b0029', 'sourceMap': '26:520:15:-;;;121:56;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;152:5:15;:18;;-1:-1:-1;;;;;;152:18:15;160:10;152:18;;;26:520;;;;;;', 'deployedSourceMap': '26:520:15:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;369:175;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;369:175:15;;;;;;;;;78:36;;8:9:-1;5:2;;;30:1;27;20:12;5:2;78:36:15;;;;;;;;;;;;;;;;;;;;52:20;;8:9:-1;5:2;;;30:1;27;20:12;5:2;52:20:15;;;;;;;;;;;;;;;;;;;;;;;254:109;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;254:109:15;;;;;369:175;435:19;233:5;;;;219:10;:19;215:26;;;468:11;435:45;;490:8;:21;;;512:24;;490:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;490:47:15;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;490:47:15;;;;215:26;369:175;;:::o;78:36::-;;;;:::o;52:20::-;;;;;;:::o;254:109::-;233:5;;;;219:10;:19;215:26;;;320:24;:36;;;215:26;254:109;:::o', 'source': 'pragma solidity ^0.4.0;\n\n\ncontract Migrations {\n    address public owner;\n    uint public last_completed_migration;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier restricted() {\n        if (msg.sender == owner) _;\n    }\n\n    function setCompleted(uint completed) public restricted {\n        last_completed_migration = completed;\n    }\n\n    function upgrade(address new_address) public restricted {\n        Migrations upgraded = Migrations(new_address);\n        upgraded.setCompleted(last_completed_migration);\n    }\n}\n' }, 'PartialMerkleTree': { 'contractName': 'PartialMerkleTree', 'abi': [{ 'constant': true, 'inputs': [{ 'name': 'rootHash', 'type': 'bytes32' }, { 'name': 'key', 'type': 'bytes' }, { 'name': 'value', 'type': 'bytes' }, { 'name': 'branchMask', 'type': 'uint256' }, { 'name': 'siblings', 'type': 'bytes32[]' }], 'name': 'verifyProof', 'outputs': [], 'payable': false, 'stateMutability': 'pure', 'type': 'function' }, { 'constant': true, 'inputs': [{ 'name': 'rootHash', 'type': 'bytes32' }, { 'name': 'key', 'type': 'bytes' }, { 'name': 'potentialSiblingLabel', 'type': 'bytes32' }, { 'name': 'potentialSiblingValue', 'type': 'bytes32' }, { 'name': 'branchMask', 'type': 'uint256' }, { 'name': 'siblings', 'type': 'bytes32[]' }], 'name': 'verifyNonInclusionProof', 'outputs': [], 'payable': false, 'stateMutability': 'pure', 'type': 'function' }], 'bytecode': '0x610967610030600b82828239805160001a6073146000811461002057610022565bfe5b5030600052607381538281f30073000000000000000000000000000000000000000030146080604052600436106100625763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166398108c268114610067578063f7e498f614610104575b600080fd5b60408051602060046024803582810135601f81018590048502860185019096528585526101029583359536956044949193909101919081908401838280828437505060408051602060608901358a01803582810280850184018652818552999c8b359c848d01359c968701359b919a509850608090950196509294508101928291850190849080828437509497506101d39650505050505050565b005b60408051602060046024803582810135601f810185900485028601850190965285855261010295833595369560449491939091019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020808901358a01803580830284810184018652818552999c8b359c909b909a9501985092965081019450909250829190850190849080828437509497506103e69650505050505050565b6101db6108e5565b6101e36108fc565b60008060006101f0610920565b60408051908101604052808c6040518082805190602001908083835b6020831061022b5780518252601f19909201916020918201910161020c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191681526020016101008152509550600093505b87156103bd5761027d88610638565b92508260019060020a021988169750610299868460ff03610716565b604087018190529096506102ac9061078f565b604087015291508315156102d357604085018051602090810185905290518b905285018990525b6102dc856107f6565b8183600281106102e857fe5b6020020152865187908581036000190190811061030157fe5b90602001906020020151818360010360028110151561031c57fe5b6020908102919091019190915281518282015160408051808501939093528281019190915280518083038201815260609092019081905281519192909182918401908083835b602083106103815780518252601f199092019160209182019101610362565b51815160209384036101000a6000190180199092169116179052604051919093018190039020918901919091525050506001939093019261026e565b604085018690526103cd856107f6565b8c146103d857600080fd5b505050505050505050505050565b6103ee6108e5565b6103f66108fc565b6000806000610403610920565b60408051908101604052808b6040518082805190602001908083835b6020831061043e5780518252601f19909201916020918201910161041f565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191681526020016101008152509550886040518082805190602001908083835b602083106104ac5780518252601f19909201916020918201910161048d565b51815160209384036101000a600019018019909216911617905260405191909301819003902091890191909152506000955050505b8715610610576104f088610638565b92508260019060020a02198816975061050c868460ff03610716565b6040870181905290965061051f9061078f565b6040870152915061052f856107f6565b81836002811061053b57fe5b6020020152865187908581036000190190811061055457fe5b90602001906020020151818360010360028110151561056f57fe5b6020908102919091019190915281518282015160408051808501939093528281019190915280518083038201815260609092019081905281519192909182918401908083835b602083106105d45780518252601f1990920191602091820191016105b5565b51815160209384036101000a600019018019909216911617905260405191909301819003902091890191909152505050600193909301926104e1565b60408501869052610620856107f6565b8b1461062b57600080fd5b5050505050505050505050565b60008080808085151561064a57600080fd5b859350600092505b60208310156106b35783601f8490036020811061066b57fe5b1a60f860020a027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916600060f860020a021415156106a8576106b3565b600190920191610652565b83601f849003602081106106c357fe5b1a60f860020a0260f860020a900460ff16915060019050600094505b61010085101561070b57818116156106fe57848360080201945061070d565b60019094019380016106df565bfe5b50505050919050565b61071e6108e5565b6107266108e5565b8360200151831115801561073c57506101008311155b151561074757600080fd5b6020820183905282151561075e5760008252610772565b835160001961010085900360020a01191682525b60208085015184900390820152925160029290920a909102825291565b60006107996108e5565b60208301516000106107aa57600080fd5b50508051604080518082019091528251600202815260209283015160001901928101929092527f8000000000000000000000000000000000000000000000000000000000000000900491565b6000610801826108c2565b1561080b57600080fd5b610814826108dc565b156108b957602080830151604080850151808401519051825180860194909452838301919091526060808401919091528151808403909101815260809092019081905281519192909182918401908083835b602083106108855780518252601f199092019160209182019101610866565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902090506108bd565b5080515b919050565b80516000901580156108d657506020820151155b92915050565b60200151151590565b604080518082019091526000808252602082015290565b604080516080810182526000808252602082015290810161091b6108e5565b905290565b604080518082018252906002908290803883395091929150505600a165627a7a7230582052a311842649475602ad58c14fce2b5782d0d84ef25c7b4875a030bfd37bc0760029', 'deployedBytecode': '0x73000000000000000000000000000000000000000030146080604052600436106100625763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166398108c268114610067578063f7e498f614610104575b600080fd5b60408051602060046024803582810135601f81018590048502860185019096528585526101029583359536956044949193909101919081908401838280828437505060408051602060608901358a01803582810280850184018652818552999c8b359c848d01359c968701359b919a509850608090950196509294508101928291850190849080828437509497506101d39650505050505050565b005b60408051602060046024803582810135601f810185900485028601850190965285855261010295833595369560449491939091019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020808901358a01803580830284810184018652818552999c8b359c909b909a9501985092965081019450909250829190850190849080828437509497506103e69650505050505050565b6101db6108e5565b6101e36108fc565b60008060006101f0610920565b60408051908101604052808c6040518082805190602001908083835b6020831061022b5780518252601f19909201916020918201910161020c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191681526020016101008152509550600093505b87156103bd5761027d88610638565b92508260019060020a021988169750610299868460ff03610716565b604087018190529096506102ac9061078f565b604087015291508315156102d357604085018051602090810185905290518b905285018990525b6102dc856107f6565b8183600281106102e857fe5b6020020152865187908581036000190190811061030157fe5b90602001906020020151818360010360028110151561031c57fe5b6020908102919091019190915281518282015160408051808501939093528281019190915280518083038201815260609092019081905281519192909182918401908083835b602083106103815780518252601f199092019160209182019101610362565b51815160209384036101000a6000190180199092169116179052604051919093018190039020918901919091525050506001939093019261026e565b604085018690526103cd856107f6565b8c146103d857600080fd5b505050505050505050505050565b6103ee6108e5565b6103f66108fc565b6000806000610403610920565b60408051908101604052808b6040518082805190602001908083835b6020831061043e5780518252601f19909201916020918201910161041f565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191681526020016101008152509550886040518082805190602001908083835b602083106104ac5780518252601f19909201916020918201910161048d565b51815160209384036101000a600019018019909216911617905260405191909301819003902091890191909152506000955050505b8715610610576104f088610638565b92508260019060020a02198816975061050c868460ff03610716565b6040870181905290965061051f9061078f565b6040870152915061052f856107f6565b81836002811061053b57fe5b6020020152865187908581036000190190811061055457fe5b90602001906020020151818360010360028110151561056f57fe5b6020908102919091019190915281518282015160408051808501939093528281019190915280518083038201815260609092019081905281519192909182918401908083835b602083106105d45780518252601f1990920191602091820191016105b5565b51815160209384036101000a600019018019909216911617905260405191909301819003902091890191909152505050600193909301926104e1565b60408501869052610620856107f6565b8b1461062b57600080fd5b5050505050505050505050565b60008080808085151561064a57600080fd5b859350600092505b60208310156106b35783601f8490036020811061066b57fe5b1a60f860020a027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916600060f860020a021415156106a8576106b3565b600190920191610652565b83601f849003602081106106c357fe5b1a60f860020a0260f860020a900460ff16915060019050600094505b61010085101561070b57818116156106fe57848360080201945061070d565b60019094019380016106df565bfe5b50505050919050565b61071e6108e5565b6107266108e5565b8360200151831115801561073c57506101008311155b151561074757600080fd5b6020820183905282151561075e5760008252610772565b835160001961010085900360020a01191682525b60208085015184900390820152925160029290920a909102825291565b60006107996108e5565b60208301516000106107aa57600080fd5b50508051604080518082019091528251600202815260209283015160001901928101929092527f8000000000000000000000000000000000000000000000000000000000000000900491565b6000610801826108c2565b1561080b57600080fd5b610814826108dc565b156108b957602080830151604080850151808401519051825180860194909452838301919091526060808401919091528151808403909101815260809092019081905281519192909182918401908083835b602083106108855780518252601f199092019160209182019101610866565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902090506108bd565b5080515b919050565b80516000901580156108d657506020820151155b92915050565b60200151151590565b604080518082019091526000808252602082015290565b604080516080810182526000808252602082015290810161091b6108e5565b905290565b604080518082018252906002908290803883395091929150505600a165627a7a7230582052a311842649475602ad58c14fce2b5782d0d84ef25c7b4875a030bfd37bc0760029', 'sourceMap': '165:15423:25:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24', 'deployedSourceMap': '165:15423:25:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10812:1040;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;10812:1040:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10812:1040:25;-1:-1:-1;10812:1040:25;;;;;-1:-1:-1;10812:1040:25;;-1:-1:-1;10812:1040:25;;;;;;;;;;;;;;-1:-1:-1;10812:1040:25;;-1:-1:-1;10812:1040:25;;-1:-1:-1;;;;;;;10812:1040:25;;;9975:831;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;9975:831:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9975:831:25;;;;-1:-1:-1;9975:831:25;-1:-1:-1;9975:831:25;;-1:-1:-1;9975:831:25;;;;;;;;-1:-1:-1;;9975:831:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9975:831:25;;-1:-1:-1;9975:831:25;;;-1:-1:-1;9975:831:25;;-1:-1:-1;9975:831:25;;;;;;;;;;;;-1:-1:-1;9975:831:25;;-1:-1:-1;9975:831:25;;-1:-1:-1;;;;;;;9975:831:25;10812:1040;10995:16;;:::i;:::-;11052:15;;:::i;:::-;11082:6;11130:11;11295:8;11375:28;;:::i;:::-;11014;;;;;;;;;11032:3;11022:14;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;11022:14:25;;;;;;;;;;;;;;;;11014:28;;;;;;;11038:3;11014:28;;;10995:47;;11091:1;11082:10;;11077:706;11094:15;;11077:706;;11144:30;11163:10;11144:18;:30::i;:::-;11130:44;;11215:6;11209:1;11204:17;;;;11202:20;11188:34;;;;11251:30;11265:1;11274:6;11268:3;:12;11251:13;:30::i;:::-;11240:7;;;11236:45;;;;;-1:-1:-1;11334:27:25;;:18;:27::i;:::-;11323:7;;;11317:44;;-1:-1:-1;11421:6:25;;11417:170;;;11447:7;;;;;:14;;;;:23;;;11488:7;;:36;;;11542:6;;:30;;;11417:170;11618:11;11627:1;11618:8;:11::i;:::-;11600:10;11611:3;11600:15;;;;;;;;;;:29;11674:15;;11665:8;;11674:19;;;-1:-1:-1;;11674:23:25;;11665:33;;;;;;;;;;;;;;11643:10;11658:3;11654:1;:7;11643:19;;;;;;;;;;;;;;;;;:55;;;;11742:13;;11757;;;;11731:40;;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;6:49;;11731:40:25;;;;;;;;11721:51;;11731:40;;;;;;11721:51;;;;11731:40;11721:51;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;11721:51:25;;;;;;;;;;;11712:6;;;:60;;;;-1:-1:-1;;;274:1;11111:3:25;;;;;11077:706;;;11792:7;;;:11;;;11833;11792:1;11833:8;:11::i;:::-;11821:23;;11813:32;;;;;;10812:1040;;;;;;;;;;;;:::o;9975:831::-;10097:16;;:::i;:::-;10154:15;;:::i;:::-;10219:6;10267:11;10432:8;10512:28;;:::i;:::-;10116;;;;;;;;;10134:3;10124:14;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;10124:14:25;;;;;;;;;;;;;;;;10116:28;;;;;;;10140:3;10116:28;;;10097:47;;10198:5;10188:16;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;10188:16:25;;;;;;;;;;;10179:6;;;:25;;;;-1:-1:-1;;;;;;10214:523:25;10231:15;;10214:523;;10281:30;10300:10;10281:18;:30::i;:::-;10267:44;;10352:6;10346:1;10341:17;;;;10339:20;10325:34;;;;10388:30;10402:1;10411:6;10405:3;:12;10388:13;:30::i;:::-;10377:7;;;10373:45;;;;;-1:-1:-1;10471:27:25;;:18;:27::i;:::-;10460:7;;;10454:44;;-1:-1:-1;10572:11:25;10460:1;10572:8;:11::i;:::-;10554:10;10565:3;10554:15;;;;;;;;;;:29;10628:15;;10619:8;;10628:19;;;-1:-1:-1;;10628:23:25;;10619:33;;;;;;;;;;;;;;10597:10;10612:3;10608:1;:7;10597:19;;;;;;;;;;;;;;;;;:55;;;;10696:13;;10711;;;;10685:40;;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;6:49;;10685:40:25;;;;;;;;10675:51;;10685:40;;;;;;10675:51;;;;10685:40;10675:51;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;10675:51:25;;;;;;;;;;;10666:6;;;:60;;;;-1:-1:-1;;;274:1;10248:3:25;;;;;10214:523;;;10746:7;;;:11;;;10787;10746:1;10787:8;:11::i;:::-;10775:23;;10767:32;;;;;;9975:831;;;;;;;;;;;:::o;2460:639:26:-;2520:8;;;;;2548:13;;;2540:22;;;;;;2604:8;;-1:-1:-1;2686:1:26;;-1:-1:-1;2666:132:26;2699:2;2689:7;:12;2666:132;;;2732:13;2746:2;:12;;;2732:27;;;;;;;;-1:-1:-1;;;2732:27:26;:32;;;2763:1;-1:-1:-1;;;2732:32:26;;;2728:59;;;2782:5;;2728:59;2703:9;;;;;2666:132;;;2836:13;2850:2;:12;;;2836:27;;;;;;;;-1:-1:-1;;;2836:27:26;-1:-1:-1;;;2830:34:26;;2825:40;;2807:58;;2887:1;2875:13;;2909:1;2903:7;;2898:154;2918:3;2912;:9;2898:154;;;2950:17;;;2949:24;2945:70;;3012:3;3002:7;2998:1;:11;:17;2991:24;;;;2945:70;2923:6;;;;;3029:12;;2898:154;;;3061:13;2460:639;;;;;;;;:::o;643:418::-;704:14;;:::i;:::-;720;;:::i;:::-;761:1;:8;;;754:3;:15;;:29;;;;;780:3;773;:10;;754:29;746:38;;;;;;;;794:13;;;:19;;;827:8;;823:155;;;873:1;851:24;;823:155;;;920:6;;-1:-1:-1;;951:3:26;:9;;;939:22;;938:28;929:38;920:47;906:61;;823:155;1003:8;;;;;:14;;;987:13;;;:30;1041:6;;:13;;;;;;;;1027:27;;643:418;:::o;2069:197::-;2125:13;2140:12;;:::i;:::-;2172:8;;;;2183:1;-1:-1:-1;2164:21:26;;;;;;-1:-1:-1;;2208:6:26;;2224:34;;;;;;;;;2232:6;;2208:13;2232:11;2224:34;;;2245:8;;;;-1:-1:-1;;2245:12:26;2224:34;;;;;;;2208:13;;;;2069:197::o;5708:268:25:-;5766:7;5794:11;:1;:9;:11::i;:::-;5793:12;5785:21;;;;;;5820:11;:1;:9;:11::i;:::-;5816:154;;;5875:6;;;;;5883:7;;;;;:14;;;;5899:12;;5864:48;;;;;;;;;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;5864:48:25;;;;;;;;5854:59;;5864:48;;;;;;5854:59;;;;5864:48;5854:59;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;5854:59:25;;;;;;;;;;;;;;;;5847:66;;;;5816:154;-1:-1:-1;5951:8:25;;5816:154;5708:268;;;:::o;361:135:24:-;436:11;;412:4;;436:25;:52;;;;-1:-1:-1;465:9:24;;;;:23;436:52;428:61;361:135;-1:-1:-1;;361:135:24:o;502:106::-;577:9;;;:23;;;502:106::o;165:15423:25:-;;;;;;;;;;-1:-1:-1;165:15423:25;;;;;;;;:::o;:::-;;;;;;;;;-1:-1:-1;165:15423:25;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;105:10:-1;165:15423:25;88:34:-1;-1:-1;165:15423:25;;;-1:-1:-1;;165:15423:25:o', 'source': "pragma solidity ^0.4.24;\n\nimport {Utils} from \"./utils.sol\";\nimport {D} from \"./data.sol\";\n\n/**\n MIT License\n Based on patricia-trie implementation of chriseth\n */\n\nlibrary PartialMerkleTree {\n    using D for D.Edge;\n\n    struct Tree {\n        // Mapping of hash of key to value\n        mapping(bytes32 => bytes) values;\n\n        // Particia tree nodes (hash to decoded contents)\n        mapping(bytes32 => D.Node) nodes;\n        // The current root hash, keccak256(node(path_M('')), path_M(''))\n        bytes32 root;\n        D.Edge rootEdge;\n    }\n\n    function initialize(Tree storage tree, bytes32 root) internal {\n        require(tree.root == bytes32(0));\n        tree.root = root;\n    }\n\n    function commitBranch(Tree storage tree, bytes key, bytes value, uint branchMask, bytes32[] siblings) internal {\n        D.Label memory k = D.Label(keccak256(key), 256);\n        D.Edge memory e;\n        e.node = keccak256(value);\n        tree.values[e.node] = value;\n        // e.node(0x083d)\n        for (uint i = 0; branchMask != 0; i++) {\n            // retrieve edge data with branch mask\n            uint bitSet = Utils.lowestBitSet(branchMask);\n            branchMask &= ~(uint(1) << bitSet);\n            (k, e.label) = Utils.splitAt(k, 255 - bitSet);\n            uint bit;\n            (bit, e.label) = Utils.chopFirstBit(e.label);\n\n            // find upper node with retrieved edge & sibling\n            bytes32[2] memory edgeHashes;\n            edgeHashes[bit] = edgeHash(e);\n            edgeHashes[1 - bit] = siblings[siblings.length - i - 1];\n            bytes32 upperNode = keccak256(abi.encode(edgeHashes[0], edgeHashes[1]));\n\n            // Update sibling information\n            D.Node storage parentNode = tree.nodes[upperNode];\n            // Put edge\n            parentNode.children[bit] = e;\n            // Put sibling edge if needed\n            if (parentNode.children[1 - bit].isEmpty()) {\n                parentNode.children[1 - bit].header = siblings[siblings.length - i - 1];\n            }\n            // go to upper edge\n            e.node = keccak256(abi.encode(edgeHashes[0], edgeHashes[1]));\n        }\n        e.label = k;\n        require(tree.root == edgeHash(e));\n        tree.root = edgeHash(e);\n        tree.rootEdge = e;\n    }\n\n    function commitBranchOfNonInclusion(\n        Tree storage tree,\n        bytes key,\n        bytes32 potentialSiblingLabel,\n        bytes32 potentialSiblingValue,\n        uint branchMask,\n        bytes32[] siblings\n    ) internal {\n        D.Label memory k = D.Label(keccak256(key), 256);\n        D.Edge memory e;\n        // e.node(0x083d)\n        for (uint i = 0; branchMask != 0; i++) {\n            // retrieve edge data with branch mask\n            uint bitSet = Utils.lowestBitSet(branchMask);\n            branchMask &= ~(uint(1) << bitSet);\n            (k, e.label) = Utils.splitAt(k, 255 - bitSet);\n            uint bit;\n            (bit, e.label) = Utils.chopFirstBit(e.label);\n\n            if (i == 0) {\n                e.label.length = bitSet;\n                e.label.data = potentialSiblingLabel;\n                e.node = potentialSiblingValue;\n            }\n\n            // find upper node with retrieved edge & sibling\n            bytes32[2] memory edgeHashes;\n            edgeHashes[bit] = edgeHash(e);\n            edgeHashes[1 - bit] = siblings[siblings.length - i - 1];\n            bytes32 upperNode = keccak256(abi.encode(edgeHashes[0], edgeHashes[1]));\n\n            // Update sibling information\n            D.Node storage parentNode = tree.nodes[upperNode];\n\n\n            // Put edge\n            parentNode.children[bit] = e;\n            // Put sibling edge if needed\n            if (parentNode.children[1 - bit].isEmpty()) {\n                parentNode.children[1 - bit].header = siblings[siblings.length - i - 1];\n            }\n            // go to upper edge\n            e.node = keccak256(abi.encode(edgeHashes[0], edgeHashes[1]));\n        }\n        e.label = k;\n        require(tree.root == edgeHash(e));\n        tree.root = edgeHash(e);\n        tree.rootEdge = e;\n    }\n\n    function insert(Tree storage tree, bytes key, bytes value) internal {\n        D.Label memory k = D.Label(keccak256(key), 256);\n        bytes32 valueHash = keccak256(value);\n        tree.values[valueHash] = value;\n        // keys.push(key);\n        D.Edge memory e;\n        if (tree.rootEdge.node == 0 && tree.rootEdge.label.length == 0)\n        {\n            // Empty Trie\n            e.label = k;\n            e.node = valueHash;\n        }\n        else\n        {\n            e = _insertAtEdge(tree, tree.rootEdge, k, valueHash);\n        }\n        tree.root = edgeHash(e);\n        tree.rootEdge = e;\n    }\n\n    function get(Tree storage tree, bytes key) internal view returns (bytes) {\n        return getValue(tree, _findNode(tree, key));\n    }\n\n    function safeGet(Tree storage tree, bytes key) internal view returns (bytes value) {\n        bytes32 valueHash = _findNode(tree, key);\n        require(valueHash != bytes32(0));\n        value = getValue(tree, valueHash);\n        require(valueHash == keccak256(value));\n    }\n\n    function doesInclude(Tree storage tree, bytes key) internal view returns (bool) {\n        return doesIncludeHashedKey(tree, keccak256(key));\n    }\n\n    function doesIncludeHashedKey(Tree storage tree, bytes32 hashedKey) internal view returns (bool) {\n        bytes32 valueHash = _findNodeWithHashedKey(tree, hashedKey);\n        return (valueHash != bytes32(0));\n    }\n\n    function getValue(Tree storage tree, bytes32 valueHash) internal view returns (bytes) {\n        return tree.values[valueHash];\n    }\n\n    function getRootHash(Tree storage tree) internal view returns (bytes32) {\n        return tree.root;\n    }\n\n    function edgeHash(D.Edge memory e) internal pure returns (bytes32) {\n        require(!e.isEmpty());\n        if (e.hasNode()) {\n            return keccak256(abi.encode(e.node, e.label.length, e.label.data));\n        } else {\n            return e.header;\n        }\n    }\n\n    // Returns the hash of the encoding of a node.\n    function hash(D.Node memory n) internal pure returns (bytes32) {\n        return keccak256(abi.encode(edgeHash(n.children[0]), edgeHash(n.children[1])));\n    }\n\n    // Returns the Merkle-proof for the given key\n    // Proof format should be:\n    //  - uint branchMask - bitmask with high bits at the positions in the key\n    //                    where we have branch nodes (bit in key denotes direction)\n    //  - bytes32[] hashes - hashes of sibling edges\n    function getProof(Tree storage tree, bytes key) internal view returns (uint branchMask, bytes32[] _siblings) {\n        return getProofWithHashedKey(tree, keccak256(key));\n    }\n\n    function getProofWithHashedKey(Tree storage tree, bytes32 hashedKey) internal view returns (uint branchMask, bytes32[] _siblings) {\n        D.Label memory k = D.Label(hashedKey, 256);\n        D.Edge memory e = tree.rootEdge;\n        bytes32[256] memory siblings;\n        uint length;\n        uint numSiblings;\n        while (true) {\n            D.Label memory prefix;\n            D.Label memory suffix;\n            (prefix, suffix) = Utils.splitCommonPrefix(k, e.label);\n            require(prefix.length == e.label.length);\n            if (suffix.length == 0) {\n                // Found it\n                break;\n            }\n            length += prefix.length;\n            branchMask |= uint(1) << (255 - length);\n            length += 1;\n            uint head;\n            D.Label memory tail;\n            (head, tail) = Utils.chopFirstBit(suffix);\n            siblings[numSiblings++] = edgeHash(tree.nodes[e.node].children[1 - head]);\n            e = tree.nodes[e.node].children[head];\n            k = tail;\n        }\n        if (numSiblings > 0)\n        {\n            _siblings = new bytes32[](numSiblings);\n            for (uint i = 0; i < numSiblings; i++)\n                _siblings[i] = siblings[i];\n        }\n    }\n\n    function getNonInclusionProof(Tree storage tree, bytes key) internal view returns (\n        bytes32 potentialSiblingLabel,\n        bytes32 potentialSiblingValue,\n        uint branchMask,\n        bytes32[] _siblings\n    ) {\n        return getNonInclusionProofWithHashedKey(tree, keccak256(key));\n    }\n\n    function getNonInclusionProofWithHashedKey(Tree storage tree, bytes32 hashedKey) internal view returns (\n        bytes32 potentialSiblingLabel,\n        bytes32 potentialSiblingValue,\n        uint branchMask,\n        bytes32[] _siblings\n    ){\n        uint length;\n        uint numSiblings;\n\n        // Start from root edge\n        D.Label memory label = D.Label(hashedKey, 256);\n        D.Edge memory e = tree.rootEdge;\n        bytes32[256] memory siblings;\n\n        while (true) {\n            // Find at edge\n            require(label.length >= e.label.length);\n            D.Label memory prefix;\n            D.Label memory suffix;\n            (prefix, suffix) = Utils.splitCommonPrefix(label, e.label);\n\n            // suffix.length == 0 means that the key exists. Thus the length of the suffix should be not zero\n            require(suffix.length != 0);\n\n            if (prefix.length >= e.label.length) {\n                // Partial matched, keep finding\n                length += prefix.length;\n                branchMask |= uint(1) << (255 - length);\n                length += 1;\n                uint head;\n                (head, label) = Utils.chopFirstBit(suffix);\n                siblings[numSiblings++] = edgeHash(tree.nodes[e.node].children[1 - head]);\n                e = tree.nodes[e.node].children[head];\n            } else {\n                // Found the potential sibling. Set data to return\n                potentialSiblingLabel = e.label.data;\n                potentialSiblingValue = e.node;\n                break;\n            }\n        }\n        if (numSiblings > 0)\n        {\n            _siblings = new bytes32[](numSiblings);\n            for (uint i = 0; i < numSiblings; i++)\n                _siblings[i] = siblings[i];\n        }\n    }\n\n    function verifyProof(bytes32 rootHash, bytes key, bytes value, uint branchMask, bytes32[] siblings) public pure {\n        D.Label memory k = D.Label(keccak256(key), 256);\n        D.Edge memory e;\n        e.node = keccak256(value);\n        for (uint i = 0; branchMask != 0; i++) {\n            uint bitSet = Utils.lowestBitSet(branchMask);\n            branchMask &= ~(uint(1) << bitSet);\n            (k, e.label) = Utils.splitAt(k, 255 - bitSet);\n            uint bit;\n            (bit, e.label) = Utils.chopFirstBit(e.label);\n            bytes32[2] memory edgeHashes;\n            edgeHashes[bit] = edgeHash(e);\n            edgeHashes[1 - bit] = siblings[siblings.length - i - 1];\n            e.node = keccak256(abi.encode(edgeHashes[0], edgeHashes[1]));\n        }\n        e.label = k;\n        require(rootHash == edgeHash(e));\n    }\n\n    function verifyNonInclusionProof(bytes32 rootHash, bytes key, bytes32 potentialSiblingLabel, bytes32 potentialSiblingValue, uint branchMask, bytes32[] siblings) public pure {\n        D.Label memory k = D.Label(keccak256(key), 256);\n        D.Edge memory e;\n        for (uint i = 0; branchMask != 0; i++) {\n            uint bitSet = Utils.lowestBitSet(branchMask);\n            branchMask &= ~(uint(1) << bitSet);\n            (k, e.label) = Utils.splitAt(k, 255 - bitSet);\n            uint bit;\n            (bit, e.label) = Utils.chopFirstBit(e.label);\n            bytes32[2] memory edgeHashes;\n            if (i == 0) {\n                e.label.length = bitSet;\n                e.label.data = potentialSiblingLabel;\n                e.node = potentialSiblingValue;\n            }\n            edgeHashes[bit] = edgeHash(e);\n            edgeHashes[1 - bit] = siblings[siblings.length - i - 1];\n            e.node = keccak256(abi.encode(edgeHashes[0], edgeHashes[1]));\n        }\n        e.label = k;\n        require(rootHash == edgeHash(e));\n    }\n\n    function newEdge(bytes32 node, D.Label label) internal pure returns (D.Edge memory e){\n        e.node = node;\n        e.label = label;\n    }\n\n    function _insertAtNode(Tree storage tree, bytes32 nodeHash, D.Label key, bytes32 value) private returns (bytes32) {\n        //        require(key.length > 1);\n        D.Node memory n = tree.nodes[nodeHash];\n        uint head;\n        D.Label memory tail;\n        (head, tail) = Utils.chopFirstBit(key);\n        n.children[head] = _insertAtEdge(tree, n.children[head], tail, value);\n        return _replaceNode(tree, nodeHash, n);\n    }\n\n    function _insertAtEdge(Tree storage tree, D.Edge e, D.Label key, bytes32 value) private returns (D.Edge) {\n        //        require(e.hasNode());\n        require(key.length >= e.label.length);\n        D.Label memory prefix;\n        D.Label memory suffix;\n        (prefix, suffix) = Utils.splitCommonPrefix(key, e.label);\n        bytes32 newNodeHash;\n        if (suffix.length == 0) {\n            // Full match with the key, update operation\n            newNodeHash = value;\n        } else if (prefix.length >= e.label.length && e.hasNode()) {\n            // Partial match, just follow the path\n            newNodeHash = _insertAtNode(tree, e.node, suffix, value);\n        } else {\n            // Mismatch, so let us create a new branch node.\n            uint head;\n            D.Label memory tail;\n            (head, tail) = Utils.chopFirstBit(suffix);\n            D.Node memory branchNode;\n            branchNode.children[head] = newEdge(value, tail);\n            branchNode.children[1 - head] = newEdge(e.node, Utils.removePrefix(e.label, prefix.length + 1));\n            newNodeHash = _insertNode(tree, branchNode);\n        }\n        return newEdge(newNodeHash, prefix);\n    }\n\n    function _insertNode(Tree storage tree, D.Node memory n) private returns (bytes32 newHash) {\n        bytes32 h = hash(n);\n        tree.nodes[h].children[0] = n.children[0];\n        tree.nodes[h].children[1] = n.children[1];\n        return h;\n    }\n\n    function _replaceNode(Tree storage tree, bytes32 oldHash, D.Node memory n) private returns (bytes32 newHash) {\n        delete tree.nodes[oldHash];\n        return _insertNode(tree, n);\n    }\n\n    function _findNode(Tree storage tree, bytes key) private view returns (bytes32) {\n        return _findNodeWithHashedKey(tree, keccak256(key));\n    }\n\n    function _findNodeWithHashedKey(Tree storage tree, bytes32 hashedKey) private view returns (bytes32) {\n        if (tree.rootEdge.node == 0 && tree.rootEdge.label.length == 0) {\n            return 0;\n        } else {\n            D.Label memory k = D.Label(hashedKey, 256);\n            return _findAtEdge(tree, tree.rootEdge, k);\n        }\n    }\n\n    function _findAtNode(Tree storage tree, bytes32 nodeHash, D.Label key) private view returns (bytes32) {\n        require(key.length > 1);\n        D.Node memory n = tree.nodes[nodeHash];\n        uint head;\n        D.Label memory tail;\n        (head, tail) = Utils.chopFirstBit(key);\n        return _findAtEdge(tree, n.children[head], tail);\n    }\n\n    function _findAtEdge(Tree storage tree, D.Edge e, D.Label key) private view returns (bytes32){\n        require(key.length >= e.label.length);\n        D.Label memory prefix;\n        D.Label memory suffix;\n        (prefix, suffix) = Utils.splitCommonPrefix(key, e.label);\n        if (suffix.length == 0) {\n            // Full match with the key, update operation\n            return e.node;\n        } else if (prefix.length >= e.label.length) {\n            // Partial match, just follow the path\n            return _findAtNode(tree, e.node, suffix);\n        } else {\n            // Mismatch, return empty bytes\n            return bytes32(0);\n        }\n    }\n}\n\n" }, 'PatriciaTree': { 'contractName': 'PatriciaTree', 'abi': [{ 'constant': true, 'inputs': [{ 'name': 'rootHash', 'type': 'bytes32' }, { 'name': 'key', 'type': 'bytes' }, { 'name': 'value', 'type': 'bytes' }, { 'name': 'branchMask', 'type': 'uint256' }, { 'name': 'siblings', 'type': 'bytes32[]' }], 'name': 'verifyProof', 'outputs': [], 'payable': false, 'stateMutability': 'pure', 'type': 'function' }, { 'constant': true, 'inputs': [{ 'name': 'rootHash', 'type': 'bytes32' }, { 'name': 'key', 'type': 'bytes' }, { 'name': 'potentialSiblingLabel', 'type': 'bytes32' }, { 'name': 'potentialSiblingValue', 'type': 'bytes32' }, { 'name': 'branchMask', 'type': 'uint256' }, { 'name': 'siblings', 'type': 'bytes32[]' }], 'name': 'verifyNonInclusionProof', 'outputs': [], 'payable': false, 'stateMutability': 'pure', 'type': 'function' }], 'bytecode': '0x610907610030600b82828239805160001a6073146000811461002057610022565bfe5b5030600052607381538281f30073000000000000000000000000000000000000000030146080604052600436106100625763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166398108c268114610067578063f7e498f614610104575b600080fd5b60408051602060046024803582810135601f81018590048502860185019096528585526101029583359536956044949193909101919081908401838280828437505060408051602060608901358a01803582810280850184018652818552999c8b359c848d01359c968701359b919a509850608090950196509294508101928291850190849080828437509497506101d39650505050505050565b005b60408051602060046024803582810135601f810185900485028601850190965285855261010295833595369560449491939091019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020808901358a01803580830284810184018652818552999c8b359c909b909a9501985092965081019450909250829190850190849080828437509497506103e09650505050505050565b6101db610889565b6101e36108a0565b60008060006101f06108c0565b60408051908101604052808c6040518082805190602001908083835b6020831061022b5780518252601f19909201916020918201910161020c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191681526020016101008152509550600093505b87156103b75761027d8861062e565b92508260019060020a021988169750610299868460ff0361070c565b602087018190529096506102ac90610785565b602087015291508315156102cf5760208086018051909101849052518a90528885525b6102d8856107ec565b8183600281106102e457fe5b602002015286518790858103600019019081106102fd57fe5b90602001906020020151818360010360028110151561031857fe5b6020908102919091019190915281518282015160408051808501939093528281019190915280518083038201815260609092019081905281519192909182918401908083835b6020831061037d5780518252601f19909201916020918201910161035e565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912088525050506001939093019261026e565b602085018690526103c7856107ec565b8c146103d257600080fd5b505050505050505050505050565b6103e8610889565b6103f06108a0565b60008060006103fd6108c0565b60408051908101604052808b6040518082805190602001908083835b602083106104385780518252601f199092019160209182019101610419565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191681526020016101008152509550886040518082805190602001908083835b602083106104a65780518252601f199092019160209182019101610487565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091208852506000955050505b8715610606576104e88861062e565b92508260019060020a021988169750610504868460ff0361070c565b6020870181905290965061051790610785565b60208701529150610527856107ec565b81836002811061053357fe5b6020020152865187908581036000190190811061054c57fe5b90602001906020020151818360010360028110151561056757fe5b6020908102919091019190915281518282015160408051808501939093528281019190915280518083038201815260609092019081905281519192909182918401908083835b602083106105cc5780518252601f1990920191602091820191016105ad565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091208852505050600193909301926104d9565b60208501869052610616856107ec565b8b1461062157600080fd5b5050505050505050505050565b60008080808085151561064057600080fd5b859350600092505b60208310156106a95783601f8490036020811061066157fe5b1a60f860020a027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916600060f860020a0214151561069e576106a9565b600190920191610648565b83601f849003602081106106b957fe5b1a60f860020a0260f860020a900460ff16915060019050600094505b61010085101561070157818116156106f4578483600802019450610703565b60019094019380016106d5565bfe5b50505050919050565b610714610889565b61071c610889565b8360200151831115801561073257506101008311155b151561073d57600080fd5b602082018390528215156107545760008252610768565b835160001961010085900360020a01191682525b60208085015184900390820152925160029290920a909102825291565b600061078f610889565b60208301516000106107a057600080fd5b50508051604080518082019091528251600202815260209283015160001901928101929092527f8000000000000000000000000000000000000000000000000000000000000000900491565b8051602080830151808201519051604080518085019590955284810192909252606080850191909152815180850390910181526080909301908190528251600093928291908401908083835b602083106108575780518252601f199092019160209182019101610838565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912095945050505050565b604080518082019091526000808252602082015290565b604080516060810190915260008152602081016108bb610889565b905290565b604080518082018252906002908290803883395091929150505600a165627a7a723058205638850c2bc555d37a3f5cafa09444a32c25811595e8510a3cfa24878453d4ac0029', 'deployedBytecode': '0x73000000000000000000000000000000000000000030146080604052600436106100625763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166398108c268114610067578063f7e498f614610104575b600080fd5b60408051602060046024803582810135601f81018590048502860185019096528585526101029583359536956044949193909101919081908401838280828437505060408051602060608901358a01803582810280850184018652818552999c8b359c848d01359c968701359b919a509850608090950196509294508101928291850190849080828437509497506101d39650505050505050565b005b60408051602060046024803582810135601f810185900485028601850190965285855261010295833595369560449491939091019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020808901358a01803580830284810184018652818552999c8b359c909b909a9501985092965081019450909250829190850190849080828437509497506103e09650505050505050565b6101db610889565b6101e36108a0565b60008060006101f06108c0565b60408051908101604052808c6040518082805190602001908083835b6020831061022b5780518252601f19909201916020918201910161020c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191681526020016101008152509550600093505b87156103b75761027d8861062e565b92508260019060020a021988169750610299868460ff0361070c565b602087018190529096506102ac90610785565b602087015291508315156102cf5760208086018051909101849052518a90528885525b6102d8856107ec565b8183600281106102e457fe5b602002015286518790858103600019019081106102fd57fe5b90602001906020020151818360010360028110151561031857fe5b6020908102919091019190915281518282015160408051808501939093528281019190915280518083038201815260609092019081905281519192909182918401908083835b6020831061037d5780518252601f19909201916020918201910161035e565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912088525050506001939093019261026e565b602085018690526103c7856107ec565b8c146103d257600080fd5b505050505050505050505050565b6103e8610889565b6103f06108a0565b60008060006103fd6108c0565b60408051908101604052808b6040518082805190602001908083835b602083106104385780518252601f199092019160209182019101610419565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191681526020016101008152509550886040518082805190602001908083835b602083106104a65780518252601f199092019160209182019101610487565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091208852506000955050505b8715610606576104e88861062e565b92508260019060020a021988169750610504868460ff0361070c565b6020870181905290965061051790610785565b60208701529150610527856107ec565b81836002811061053357fe5b6020020152865187908581036000190190811061054c57fe5b90602001906020020151818360010360028110151561056757fe5b6020908102919091019190915281518282015160408051808501939093528281019190915280518083038201815260609092019081905281519192909182918401908083835b602083106105cc5780518252601f1990920191602091820191016105ad565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091208852505050600193909301926104d9565b60208501869052610616856107ec565b8b1461062157600080fd5b5050505050505050505050565b60008080808085151561064057600080fd5b859350600092505b60208310156106a95783601f8490036020811061066157fe5b1a60f860020a027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916600060f860020a0214151561069e576106a9565b600190920191610648565b83601f849003602081106106b957fe5b1a60f860020a0260f860020a900460ff16915060019050600094505b61010085101561070157818116156106f4578483600802019450610703565b60019094019380016106d5565bfe5b50505050919050565b610714610889565b61071c610889565b8360200151831115801561073257506101008311155b151561073d57600080fd5b602082018390528215156107545760008252610768565b835160001961010085900360020a01191682525b60208085015184900390820152925160029290920a909102825291565b600061078f610889565b60208301516000106107a057600080fd5b50508051604080518082019091528251600202815260209283015160001901928101929092527f8000000000000000000000000000000000000000000000000000000000000000900491565b8051602080830151808201519051604080518085019590955284810192909252606080850191909152815180850390910181526080909301908190528251600093928291908401908083835b602083106108575780518252601f199092019160209182019101610838565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912095945050505050565b604080518082019091526000808252602082015290565b604080516060810190915260008152602081016108bb610889565b905290565b604080518082018252906002908290803883395091929150505600a165627a7a723058205638850c2bc555d37a3f5cafa09444a32c25811595e8510a3cfa24878453d4ac0029', 'sourceMap': '168:12153:28:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24', 'deployedSourceMap': '168:12153:28:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7115:1040;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;7115:1040:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7115:1040:28;-1:-1:-1;7115:1040:28;;;;;-1:-1:-1;7115:1040:28;;-1:-1:-1;7115:1040:28;;;;;;;;;;;;;;-1:-1:-1;7115:1040:28;;-1:-1:-1;7115:1040:28;;-1:-1:-1;;;;;;;7115:1040:28;;;6278:831;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6278:831:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6278:831:28;;;;-1:-1:-1;6278:831:28;-1:-1:-1;6278:831:28;;-1:-1:-1;6278:831:28;;;;;;;;-1:-1:-1;;6278:831:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6278:831:28;;-1:-1:-1;6278:831:28;;;-1:-1:-1;6278:831:28;;-1:-1:-1;6278:831:28;;;;;;;;;;;;-1:-1:-1;6278:831:28;;-1:-1:-1;6278:831:28;;-1:-1:-1;;;;;;;6278:831:28;7115:1040;7298:16;;:::i;:::-;7355:15;;:::i;:::-;7385:6;7433:11;7598:8;7678:28;;:::i;:::-;7317;;;;;;;;;7335:3;7325:14;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;7325:14:28;;;;;;;;;;;;;;;;7317:28;;;;;;;7341:3;7317:28;;;7298:47;;7394:1;7385:10;;7380:706;7397:15;;7380:706;;7447:30;7466:10;7447:18;:30::i;:::-;7433:44;;7518:6;7512:1;7507:17;;;;7505:20;7491:34;;;;7554:30;7568:1;7577:6;7571:3;:12;7554:13;:30::i;:::-;7543:7;;;7539:45;;;;;-1:-1:-1;7637:27:28;;:18;:27::i;:::-;7626:7;;;7620:44;;-1:-1:-1;7724:6:28;;7720:170;;;7750:7;;;;;;:14;;;:23;;;7791:7;:36;;;7845:30;;;7720:170;7921:11;7930:1;7921:8;:11::i;:::-;7903:10;7914:3;7903:15;;;;;;;;;;:29;7977:15;;7968:8;;7977:19;;;-1:-1:-1;;7977:23:28;;7968:33;;;;;;;;;;;;;;7946:10;7961:3;7957:1;:7;7946:19;;;;;;;;;;;;;;;;;:55;;;;8045:13;;8060;;;;8034:40;;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;6:49;;8034:40:28;;;;;;;;8024:51;;8034:40;;;;;;8024:51;;;;8034:40;8024:51;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;;;;365:33;;8024:51:28;;;;;;;;;;8015:60;;-1:-1:-1;;;274:1;7414:3:28;;;;;7380:706;;;8095:7;;;:11;;;8136;8095:1;8136:8;:11::i;:::-;8124:23;;8116:32;;;;;;7115:1040;;;;;;;;;;;;:::o;6278:831::-;6400:16;;:::i;:::-;6457:15;;:::i;:::-;6522:6;6570:11;6735:8;6815:28;;:::i;:::-;6419;;;;;;;;;6437:3;6427:14;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;6427:14:28;;;;;;;;;;;;;;;;6419:28;;;;;;;6443:3;6419:28;;;6400:47;;6501:5;6491:16;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;;;;365:33;;6491:16:28;;;;;;;;;;6482:25;;-1:-1:-1;;;;;;6517:523:28;6534:15;;6517:523;;6584:30;6603:10;6584:18;:30::i;:::-;6570:44;;6655:6;6649:1;6644:17;;;;6642:20;6628:34;;;;6691:30;6705:1;6714:6;6708:3;:12;6691:13;:30::i;:::-;6680:7;;;6676:45;;;;;-1:-1:-1;6774:27:28;;:18;:27::i;:::-;6763:7;;;6757:44;;-1:-1:-1;6875:11:28;6763:1;6875:8;:11::i;:::-;6857:10;6868:3;6857:15;;;;;;;;;;:29;6931:15;;6922:8;;6931:19;;;-1:-1:-1;;6931:23:28;;6922:33;;;;;;;;;;;;;;6900:10;6915:3;6911:1;:7;6900:19;;;;;;;;;;;;;;;;;:55;;;;6999:13;;7014;;;;6988:40;;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;6:49;;6988:40:28;;;;;;;;6978:51;;6988:40;;;;;;6978:51;;;;6988:40;6978:51;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;;;;365:33;;6978:51:28;;;;;;;;;;6969:60;;-1:-1:-1;;;274:1;6551:3:28;;;;;6517:523;;;7049:7;;;:11;;;7090;7049:1;7090:8;:11::i;:::-;7078:23;;7070:32;;;;;;6278:831;;;;;;;;;;;:::o;2460:639:29:-;2520:8;;;;;2548:13;;;2540:22;;;;;;2604:8;;-1:-1:-1;2686:1:29;;-1:-1:-1;2666:132:29;2699:2;2689:7;:12;2666:132;;;2732:13;2746:2;:12;;;2732:27;;;;;;;;-1:-1:-1;;;2732:27:29;:32;;;2763:1;-1:-1:-1;;;2732:32:29;;;2728:59;;;2782:5;;2728:59;2703:9;;;;;2666:132;;;2836:13;2850:2;:12;;;2836:27;;;;;;;;-1:-1:-1;;;2836:27:29;-1:-1:-1;;;2830:34:29;;2825:40;;2807:58;;2887:1;2875:13;;2909:1;2903:7;;2898:154;2918:3;2912;:9;2898:154;;;2950:17;;;2949:24;2945:70;;3012:3;3002:7;2998:1;:11;:17;2991:24;;;;2945:70;2923:6;;;;;3029:12;;2898:154;;;3061:13;2460:639;;;;;;;;:::o;643:418::-;704:14;;:::i;:::-;720;;:::i;:::-;761:1;:8;;;754:3;:15;;:29;;;;;780:3;773;:10;;754:29;746:38;;;;;;;;794:13;;;:19;;;827:8;;823:155;;;873:1;851:24;;823:155;;;920:6;;-1:-1:-1;;951:3:29;:9;;;939:22;;938:28;929:38;920:47;906:61;;823:155;1003:8;;;;;:14;;;987:13;;;:30;1041:6;;:13;;;;;;;;1027:27;;643:418;:::o;2069:197::-;2125:13;2140:12;;:::i;:::-;2172:8;;;;2183:1;-1:-1:-1;2164:21:29;;;;;;-1:-1:-1;;2208:6:29;;2224:34;;;;;;;;;2232:6;;2208:13;2232:11;2224:34;;;2245:8;;;;-1:-1:-1;;2245:12:29;2224:34;;;;;;;2208:13;;;;2069:197::o;2129:150:28:-;2234:6;;2242:7;;;;;:14;;;;2258:12;;2223:48;;;;;;;;;;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;2223:48:28;;;;;;;;2213:59;;2187:7;;2223:48;;;2213:59;;;;;2223:48;2213:59;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;;;;365:33;;2213:59:28;;;;;;;;;;;;-1:-1:-1;;;;;2129:150:28:o;168:12153::-;;;;;;;;;;-1:-1:-1;168:12153:28;;;;;;;;:::o;:::-;;;;;;;;;;-1:-1:-1;168:12153:28;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;105:10:-1;168:12153:28;88:34:-1;-1:-1;168:12153:28;;;-1:-1:-1;;168:12153:28:o', 'source': "pragma solidity ^0.4.24;\n\nimport {D} from \"./data.sol\";\nimport {Utils} from \"./utils.sol\";\n\n/**\n MIT License\n Original author: chriseth\n Rewritten by: Wanseob Lim\n */\n\nlibrary PatriciaTree {\n    struct Tree {\n        // Mapping of hash of key to value\n        mapping(bytes32 => bytes) values;\n\n        // Particia tree nodes (hash to decoded contents)\n        mapping(bytes32 => D.Node) nodes;\n        // The current root hash, keccak256(node(path_M('')), path_M(''))\n        bytes32 root;\n        D.Edge rootEdge;\n    }\n\n    function get(Tree storage tree, bytes key) internal view returns (bytes) {\n        return getValue(tree, _findNode(tree, key));\n    }\n\n    function safeGet(Tree storage tree, bytes key) internal view returns (bytes value) {\n        bytes32 valueHash = _findNode(tree, key);\n        require(valueHash != bytes32(0));\n        value = getValue(tree, valueHash);\n        require(valueHash == keccak256(value));\n    }\n\n    function doesInclude(Tree storage tree, bytes key) internal view returns (bool) {\n        return doesIncludeHashedKey(tree, keccak256(key));\n    }\n\n    function doesIncludeHashedKey(Tree storage tree, bytes32 hashedKey) internal view returns (bool) {\n        bytes32 valueHash = _findNodeWithHashedKey(tree, hashedKey);\n        return (valueHash != bytes32(0));\n    }\n\n    function getValue(Tree storage tree, bytes32 valueHash) internal view returns (bytes) {\n        return tree.values[valueHash];\n    }\n\n    function getRootHash(Tree storage tree) internal view returns (bytes32) {\n        return tree.root;\n    }\n\n\n    function getNode(Tree storage tree, bytes32 hash) internal view returns (uint, bytes32, bytes32, uint, bytes32, bytes32) {\n        D.Node storage n = tree.nodes[hash];\n        return (\n        n.children[0].label.length, n.children[0].label.data, n.children[0].node,\n        n.children[1].label.length, n.children[1].label.data, n.children[1].node\n        );\n    }\n\n    function getRootEdge(Tree storage tree) internal view returns (uint, bytes32, bytes32) {\n        return (tree.rootEdge.label.length, tree.rootEdge.label.data, tree.rootEdge.node);\n    }\n\n    function edgeHash(D.Edge memory e) internal pure returns (bytes32) {\n        return keccak256(abi.encode(e.node, e.label.length, e.label.data));\n    }\n\n    // Returns the hash of the encoding of a node.\n    function hash(D.Node memory n) internal pure returns (bytes32) {\n        return keccak256(abi.encode(edgeHash(n.children[0]), edgeHash(n.children[1])));\n    }\n\n    // Returns the Merkle-proof for the given key\n    // Proof format should be:\n    //  - uint branchMask - bitmask with high bits at the positions in the key\n    //                    where we have branch nodes (bit in key denotes direction)\n    //  - bytes32[] hashes - hashes of sibling edges\n    function getProof(Tree storage tree, bytes key) internal view returns (uint branchMask, bytes32[] _siblings) {\n        return getProofWithHashedKey(tree, keccak256(key));\n    }\n\n    function getProofWithHashedKey(Tree storage tree, bytes32 hashedKey) internal view returns (uint branchMask, bytes32[] _siblings) {\n        D.Label memory k = D.Label(hashedKey, 256);\n        D.Edge memory e = tree.rootEdge;\n        bytes32[256] memory siblings;\n        uint length;\n        uint numSiblings;\n        while (true) {\n            D.Label memory prefix;\n            D.Label memory suffix;\n            (prefix, suffix) = Utils.splitCommonPrefix(k, e.label);\n            require(prefix.length == e.label.length);\n            if (suffix.length == 0) {\n                // Found it\n                break;\n            }\n            length += prefix.length;\n            branchMask |= uint(1) << (255 - length);\n            length += 1;\n            uint head;\n            D.Label memory tail;\n            (head, tail) = Utils.chopFirstBit(suffix);\n            siblings[numSiblings++] = edgeHash(tree.nodes[e.node].children[1 - head]);\n            e = tree.nodes[e.node].children[head];\n            k = tail;\n        }\n        if (numSiblings > 0)\n        {\n            _siblings = new bytes32[](numSiblings);\n            for (uint i = 0; i < numSiblings; i++)\n                _siblings[i] = siblings[i];\n        }\n    }\n\n    function getNonInclusionProof(Tree storage tree, bytes key) internal view returns (\n        bytes32 potentialSiblingLabel,\n        bytes32 potentialSiblingValue,\n        uint branchMask,\n        bytes32[] _siblings\n    ) {\n        return getNonInclusionProofWithHashedKey(tree, keccak256(key));\n    }\n\n    function getNonInclusionProofWithHashedKey(Tree storage tree, bytes32 hashedKey) internal view returns (\n        bytes32 potentialSiblingLabel,\n        bytes32 potentialSiblingValue,\n        uint branchMask,\n        bytes32[] _siblings\n    ){\n        uint length;\n        uint numSiblings;\n\n        // Start from root edge\n        D.Label memory label = D.Label(hashedKey, 256);\n        D.Edge memory e = tree.rootEdge;\n        bytes32[256] memory siblings;\n\n        while (true) {\n            // Find at edge\n            require(label.length >= e.label.length);\n            D.Label memory prefix;\n            D.Label memory suffix;\n            (prefix, suffix) = Utils.splitCommonPrefix(label, e.label);\n\n            // suffix.length == 0 means that the key exists. Thus the length of the suffix should be not zero\n            require(suffix.length != 0);\n\n            if (prefix.length >= e.label.length) {\n                // Partial matched, keep finding\n                length += prefix.length;\n                branchMask |= uint(1) << (255 - length);\n                length += 1;\n                uint head;\n                (head, label) = Utils.chopFirstBit(suffix);\n                siblings[numSiblings++] = edgeHash(tree.nodes[e.node].children[1 - head]);\n                e = tree.nodes[e.node].children[head];\n            } else {\n                // Found the potential sibling. Set data to return\n                potentialSiblingLabel = e.label.data;\n                potentialSiblingValue = e.node;\n                break;\n            }\n        }\n        if (numSiblings > 0)\n        {\n            _siblings = new bytes32[](numSiblings);\n            for (uint i = 0; i < numSiblings; i++)\n                _siblings[i] = siblings[i];\n        }\n    }\n\n    function verifyProof(bytes32 rootHash, bytes key, bytes value, uint branchMask, bytes32[] siblings) public pure {\n        D.Label memory k = D.Label(keccak256(key), 256);\n        D.Edge memory e;\n        e.node = keccak256(value);\n        for (uint i = 0; branchMask != 0; i++) {\n            uint bitSet = Utils.lowestBitSet(branchMask);\n            branchMask &= ~(uint(1) << bitSet);\n            (k, e.label) = Utils.splitAt(k, 255 - bitSet);\n            uint bit;\n            (bit, e.label) = Utils.chopFirstBit(e.label);\n            bytes32[2] memory edgeHashes;\n            edgeHashes[bit] = edgeHash(e);\n            edgeHashes[1 - bit] = siblings[siblings.length - i - 1];\n            e.node = keccak256(abi.encode(edgeHashes[0], edgeHashes[1]));\n        }\n        e.label = k;\n        require(rootHash == edgeHash(e));\n    }\n\n    function verifyNonInclusionProof(bytes32 rootHash, bytes key, bytes32 potentialSiblingLabel, bytes32 potentialSiblingValue, uint branchMask, bytes32[] siblings) public pure {\n        D.Label memory k = D.Label(keccak256(key), 256);\n        D.Edge memory e;\n        for (uint i = 0; branchMask != 0; i++) {\n            uint bitSet = Utils.lowestBitSet(branchMask);\n            branchMask &= ~(uint(1) << bitSet);\n            (k, e.label) = Utils.splitAt(k, 255 - bitSet);\n            uint bit;\n            (bit, e.label) = Utils.chopFirstBit(e.label);\n            bytes32[2] memory edgeHashes;\n            if (i == 0) {\n                e.label.length = bitSet;\n                e.label.data = potentialSiblingLabel;\n                e.node = potentialSiblingValue;\n            }\n            edgeHashes[bit] = edgeHash(e);\n            edgeHashes[1 - bit] = siblings[siblings.length - i - 1];\n            e.node = keccak256(abi.encode(edgeHashes[0], edgeHashes[1]));\n        }\n        e.label = k;\n        require(rootHash == edgeHash(e));\n    }\n\n    // TODO also return the proof\n    function insert(Tree storage tree, bytes key, bytes value) internal {\n        D.Label memory k = D.Label(keccak256(key), 256);\n        bytes32 valueHash = keccak256(value);\n        tree.values[valueHash] = value;\n        // keys.push(key);\n        D.Edge memory e;\n        if (tree.rootEdge.node == 0 && tree.rootEdge.label.length == 0)\n        {\n            // Empty Trie\n            e.label = k;\n            e.node = valueHash;\n        }\n        else\n        {\n            e = _insertAtEdge(tree, tree.rootEdge, k, valueHash);\n        }\n        tree.root = edgeHash(e);\n        tree.rootEdge = e;\n    }\n\n    function _insertAtNode(Tree storage tree, bytes32 nodeHash, D.Label key, bytes32 value) private returns (bytes32) {\n        require(key.length > 1);\n        D.Node memory n = tree.nodes[nodeHash];\n        uint head;\n        D.Label memory tail;\n        (head, tail) = Utils.chopFirstBit(key);\n        n.children[head] = _insertAtEdge(tree, n.children[head], tail, value);\n        return _replaceNode(tree, nodeHash, n);\n    }\n\n    function _insertAtEdge(Tree storage tree, D.Edge e, D.Label key, bytes32 value) private returns (D.Edge) {\n        require(key.length >= e.label.length);\n        D.Label memory prefix;\n        D.Label memory suffix;\n        (prefix, suffix) = Utils.splitCommonPrefix(key, e.label);\n        bytes32 newNodeHash;\n        if (suffix.length == 0) {\n            // Full match with the key, update operation\n            newNodeHash = value;\n        } else if (prefix.length >= e.label.length) {\n            // Partial match, just follow the path\n            newNodeHash = _insertAtNode(tree, e.node, suffix, value);\n        } else {\n            // Mismatch, so let us create a new branch node.\n            uint head;\n            D.Label memory tail;\n            (head, tail) = Utils.chopFirstBit(suffix);\n            D.Node memory branchNode;\n            branchNode.children[head] = D.Edge(value, tail);\n            branchNode.children[1 - head] = D.Edge(e.node, Utils.removePrefix(e.label, prefix.length + 1));\n            newNodeHash = _insertNode(tree, branchNode);\n        }\n        return D.Edge(newNodeHash, prefix);\n    }\n\n    function _insertNode(Tree storage tree, D.Node memory n) private returns (bytes32 newHash) {\n        bytes32 h = hash(n);\n        tree.nodes[h].children[0] = n.children[0];\n        tree.nodes[h].children[1] = n.children[1];\n        return h;\n    }\n\n    function _replaceNode(Tree storage tree, bytes32 oldHash, D.Node memory n) private returns (bytes32 newHash) {\n        delete tree.nodes[oldHash];\n        return _insertNode(tree, n);\n    }\n\n    function _findNode(Tree storage tree, bytes key) private view returns (bytes32) {\n        return _findNodeWithHashedKey(tree, keccak256(key));\n    }\n\n    function _findNodeWithHashedKey(Tree storage tree, bytes32 hashedKey) private view returns (bytes32) {\n        if (tree.rootEdge.node == 0 && tree.rootEdge.label.length == 0) {\n            return 0;\n        } else {\n            D.Label memory k = D.Label(hashedKey, 256);\n            return _findAtEdge(tree, tree.rootEdge, k);\n        }\n    }\n\n    function _findAtNode(Tree storage tree, bytes32 nodeHash, D.Label key) private view returns (bytes32) {\n        require(key.length > 1);\n        D.Node memory n = tree.nodes[nodeHash];\n        uint head;\n        D.Label memory tail;\n        (head, tail) = Utils.chopFirstBit(key);\n        return _findAtEdge(tree, n.children[head], tail);\n    }\n\n    function _findAtEdge(Tree storage tree, D.Edge e, D.Label key) private view returns (bytes32){\n        require(key.length >= e.label.length);\n        D.Label memory prefix;\n        D.Label memory suffix;\n        (prefix, suffix) = Utils.splitCommonPrefix(key, e.label);\n        if (suffix.length == 0) {\n            // Full match with the key, update operation\n            return e.node;\n        } else if (prefix.length >= e.label.length) {\n            // Partial match, just follow the path\n            return _findAtNode(tree, e.node, suffix);\n        } else {\n            // Mismatch, return empty bytes\n            return bytes32(0);\n        }\n    }\n}\n\n" }, 'RLPEncode': { 'contractName': 'RLPEncode', 'abi': [], 'bytecode': '0x604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f30073000000000000000000000000000000000000000030146080604052600080fd00a165627a7a72305820359f88c67c158bc4cdeeb50fbb88a11d61567d68266fa0f94ba98e2a01031e500029', 'deployedBytecode': '0x73000000000000000000000000000000000000000030146080604052600080fd00a165627a7a72305820359f88c67c158bc4cdeeb50fbb88a11d61567d68266fa0f94ba98e2a01031e500029', 'sourceMap': '111:7467:16:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24', 'deployedSourceMap': '111:7467:16:-;;;;;;;;', 'source': 'pragma solidity ^0.4.0;\n\n\n/**\n * @title RLPEncode\n * @dev A simple RLP encoding library.\n * @author Bakaoh\n */\nlibrary RLPEncode {\n    /*\n     * Internal functions\n     */\n\n    /**\n     * @dev RLP encodes a byte string.\n     * @param self The byte string to encode.\n     * @return The RLP encoded string in bytes.\n     */\n    function encodeBytes(bytes memory self) internal pure returns (bytes) {\n        bytes memory encoded;\n        if (self.length == 1 && uint(self[0]) <= 128) {\n            encoded = self;\n        } else {\n            encoded = concat(encodeLength(self.length, 128), self);\n        }\n        return encoded;\n    }\n\n    /**\n     * @dev RLP encodes a list of RLP encoded byte byte strings.\n     * @param self The list of RLP encoded byte strings.\n     * @return The RLP encoded list of items in bytes.\n     */\n    function encodeList(bytes[] memory self) internal pure returns (bytes) {\n        bytes memory list = flatten(self);\n        return concat(encodeLength(list.length, 192), list);\n    }\n\n    /**\n     * @dev RLP encodes a string.\n     * @param self The string to encode.\n     * @return The RLP encoded string in bytes.\n     */\n    function encodeString(string memory self) internal pure returns (bytes) {\n        return encodeBytes(bytes(self));\n    }\n\n    /** \n     * @dev RLP encodes an address.\n     * @param self The address to encode.\n     * @return The RLP encoded address in bytes.\n     */\n    function encodeAddress(address self) internal pure returns (bytes) {\n        bytes memory inputBytes;\n        assembly {\n            let m := mload(0x40)\n            mstore(add(m, 20), xor(0x140000000000000000000000000000000000000000, self))\n            mstore(0x40, add(m, 52))\n            inputBytes := m\n        }\n        return encodeBytes(inputBytes);\n    }\n\n    /** \n     * @dev RLP encodes a uint.\n     * @param self The uint to encode.\n     * @return The RLP encoded uint in bytes.\n     */\n    function encodeUint(uint self) internal pure returns (bytes) {\n        return encodeBytes(toBinary(self));\n    }\n\n    /** \n     * @dev RLP encodes an int.\n     * @param self The int to encode.\n     * @return The RLP encoded int in bytes.\n     */\n    function encodeInt(int self) internal pure returns (bytes) {\n        return encodeUint(uint(self));\n    }\n\n    /** \n     * @dev RLP encodes a bool.\n     * @param self The bool to encode.\n     * @return The RLP encoded bool in bytes.\n     */\n    function encodeBool(bool self) internal pure returns (bytes) {\n        bytes memory encoded = new bytes(1);\n        encoded[0] = (self ? bytes1(0x01) : bytes1(0x80));\n        return encoded;\n    }\n\n\n    /*\n     * Private functions\n     */\n\n    /**\n     * @dev Encode the first byte, followed by the `len` in binary form if `length` is more than 55.\n     * @param len The length of the string or the payload.\n     * @param offset 128 if item is string, 192 if item is list.\n     * @return RLP encoded bytes.\n     */\n    function encodeLength(uint len, uint offset) private pure returns (bytes) {\n        bytes memory encoded;\n        if (len < 56) {\n            encoded = new bytes(1);\n            encoded[0] = byte(len + offset);\n        } else {\n            uint lenLen;\n            uint i = 1;\n            while (len / i != 0) {\n                lenLen++;\n                i *= 256;\n            }\n\n            encoded = new bytes(lenLen + 1);\n            encoded[0] = byte(lenLen + offset + 55);\n            for(i = 1; i <= lenLen; i++) {\n                encoded[i] = byte((len / (256**(lenLen-i))) % 256);\n            }\n        }\n        return encoded;\n    }\n\n    /**\n     * @dev Encode integer in big endian binary form with no leading zeroes.\n     * @notice TODO: This should be optimized with assembly to save gas costs.\n     * @param _x The integer to encode.\n     * @return RLP encoded bytes.\n     */\n    function toBinary(uint _x) private pure returns (bytes) {\n        bytes memory b = new bytes(32);\n        assembly { \n            mstore(add(b, 32), _x) \n        }\n        for (uint i = 0; i < 32; i++) {\n            if (b[i] != 0) {\n                break;\n            }\n        }\n        bytes memory res = new bytes(32 - i);\n        for (uint j = 0; j < res.length; j++) {\n            res[j] = b[i++];\n        }\n        return res;\n    }\n\n    /**\n     * @dev Copies a piece of memory to another location.\n     * @notice From: https://github.com/Arachnid/solidity-stringutils/blob/master/src/strings.sol.\n     * @param _dest Destination location.\n     * @param _src Source location.\n     * @param _len Length of memory to copy.\n     */\n    function memcpy(uint _dest, uint _src, uint _len) private pure {\n        uint dest = _dest;\n        uint src = _src;\n        uint len = _len;\n\n        for(; len >= 32; len -= 32) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n            dest += 32;\n            src += 32;\n        }\n\n        uint mask = 256 ** (32 - len) - 1;\n        assembly {\n            let srcpart := and(mload(src), not(mask))\n            let destpart := and(mload(dest), mask)\n            mstore(dest, or(destpart, srcpart))\n        }\n    }\n\n    /**\n     * @dev Flattens a list of byte strings into one byte string.\n     * @notice From: https://github.com/sammayo/solidity-rlp-encoder/blob/master/RLPEncode.sol.\n     * @param _list List of byte strings to flatten.\n     * @return The flattened byte string.\n     */\n    function flatten(bytes[] memory _list) private pure returns (bytes) {\n        if (_list.length == 0) {\n            return new bytes(0);\n        }\n\n        uint len;\n        for (uint i = 0; i < _list.length; i++) {\n            len += _list[i].length;\n        }\n\n        bytes memory flattened = new bytes(len);\n        uint flattenedPtr;\n        assembly { flattenedPtr := add(flattened, 0x20) }\n\n        for(i = 0; i < _list.length; i++) {\n            bytes memory item = _list[i];\n            \n            uint listPtr;\n            assembly { listPtr := add(item, 0x20)}\n\n            memcpy(flattenedPtr, listPtr, item.length);\n            flattenedPtr += _list[i].length;\n        }\n\n        return flattened;\n    }\n\n    /**\n     * @dev Concatenates two bytes.\n     * @notice From: https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol.\n     * @param _preBytes First byte string.\n     * @param _postBytes Second byte string.\n     * @return Both byte string combined.\n     */\n    function concat(bytes memory _preBytes, bytes memory _postBytes) private pure returns (bytes) {\n        bytes memory tempBytes;\n\n        assembly {\n            tempBytes := mload(0x40)\n\n            let length := mload(_preBytes)\n            mstore(tempBytes, length)\n\n            let mc := add(tempBytes, 0x20)\n            let end := add(mc, length)\n\n            for {\n                let cc := add(_preBytes, 0x20)\n            } lt(mc, end) {\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                mstore(mc, mload(cc))\n            }\n\n            length := mload(_postBytes)\n            mstore(tempBytes, add(length, mload(tempBytes)))\n\n            mc := end\n            end := add(mc, length)\n\n            for {\n                let cc := add(_postBytes, 0x20)\n            } lt(mc, end) {\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                mstore(mc, mload(cc))\n            }\n\n            mstore(0x40, and(\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\n              not(31)\n            ))\n        }\n\n        return tempBytes;\n    }\n}\n' }, 'RLPReader': { 'contractName': 'RLPReader', 'abi': [], 'bytecode': '0x604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f30073000000000000000000000000000000000000000030146080604052600080fd00a165627a7a7230582029e2ce61dc90b2e8d621669fad3cd68de6ba1bf01712313e4e409c17f1e5a76f0029', 'deployedBytecode': '0x73000000000000000000000000000000000000000030146080604052600080fd00a165627a7a7230582029e2ce61dc90b2e8d621669fad3cd68de6ba1bf01712313e4e409c17f1e5a76f0029', 'sourceMap': '128:6528:30:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24', 'deployedSourceMap': '128:6528:30:-;;;;;;;;', 'source': '/*\n* @author Hamdi Allam hamdi.allam97@gmail.com\n* Please reach out with any questions or concerns\n*/\npragma solidity ^0.4.24;\n\nlibrary RLPReader {\n    uint8 constant STRING_SHORT_START = 0x80;\n    uint8 constant STRING_LONG_START  = 0xb8;\n    uint8 constant LIST_SHORT_START   = 0xc0;\n    uint8 constant LIST_LONG_START    = 0xf8;\n\n    uint8 constant WORD_SIZE = 32;\n\n    struct RLPItem {\n        uint len;\n        uint memPtr;\n    }\n\n    /*\n    * @param item RLP encoded bytes\n    */\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\n        if (item.length == 0) \n            return RLPItem(0, 0);\n\n        uint memPtr;\n        assembly {\n            memPtr := add(item, 0x20)\n        }\n\n        return RLPItem(item.length, memPtr);\n    }\n\n    /*\n    * @param item RLP encoded list in bytes\n    */\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory result) {\n        require(isList(item));\n\n        uint items = numItems(item);\n        result = new RLPItem[](items);\n\n        uint memPtr = item.memPtr + _payloadOffset(item.memPtr);\n        uint dataLen;\n        for (uint i = 0; i < items; i++) {\n            dataLen = _itemLength(memPtr);\n            result[i] = RLPItem(dataLen, memPtr); \n            memPtr = memPtr + dataLen;\n        }\n    }\n\n    /*\n    * Helpers\n    */\n\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\n    function isList(RLPItem memory item) internal pure returns (bool) {\n        uint8 byte0;\n        uint memPtr = item.memPtr;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < LIST_SHORT_START)\n            return false;\n        return true;\n    }\n\n    // @return number of payload items inside an encoded list.\n    function numItems(RLPItem memory item) internal pure returns (uint) {\n        uint count = 0;\n        uint currPtr = item.memPtr + _payloadOffset(item.memPtr);\n        uint endPtr = item.memPtr + item.len;\n        while (currPtr < endPtr) {\n           currPtr = currPtr + _itemLength(currPtr); // skip over an item\n           count++;\n        }\n\n        return count;\n    }\n\n    // @return entire rlp item byte length\n    function _itemLength(uint memPtr) internal pure returns (uint len) {\n        uint byte0;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < STRING_SHORT_START)\n            return 1;\n        \n        else if (byte0 < STRING_LONG_START)\n            return byte0 - STRING_SHORT_START + 1;\n\n        else if (byte0 < LIST_SHORT_START) {\n            assembly {\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\n                memPtr := add(memPtr, 1) // skip over the first byte\n                \n                /* 32 byte word size */\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\n                len := add(dataLen, add(byteLen, 1))\n            }\n        }\n\n        else if (byte0 < LIST_LONG_START) {\n            return byte0 - LIST_SHORT_START + 1;\n        } \n\n        else {\n            assembly {\n                let byteLen := sub(byte0, 0xf7)\n                memPtr := add(memPtr, 1)\n\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\n                len := add(dataLen, add(byteLen, 1))\n            }\n        }\n    }\n\n    // @return number of bytes until the data\n    function _payloadOffset(uint memPtr) internal pure returns (uint) {\n        uint byte0;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < STRING_SHORT_START) \n            return 0;\n        else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START))\n            return 1;\n        else if (byte0 < LIST_SHORT_START)  // being explicit\n            return byte0 - (STRING_LONG_START - 1) + 1;\n        else\n            return byte0 - (LIST_LONG_START - 1) + 1;\n    }\n\n    /** RLPItem conversions into data types **/\n\n    // @returns raw rlp encoding in bytes\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes) {\n        bytes memory result = new bytes(item.len);\n        \n        uint ptr;\n        assembly {\n            ptr := add(0x20, result)\n        }\n\n        copy(item.memPtr, ptr, item.len);\n        return result;\n    }\n\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\n        require(item.len == 1, "Invalid RLPItem. Booleans are encoded in 1 byte");\n        uint result;\n        uint memPtr = item.memPtr;\n        assembly {\n            result := byte(0, mload(memPtr))\n        }\n\n        return result == 0 ? false : true;\n    }\n\n    function toAddress(RLPItem memory item) internal pure returns (address) {\n        // 1 byte for the length prefix according to RLP spec\n        require(item.len <= 21, "Invalid RLPItem. Addresses are encoded in 20 bytes or less");\n\n        return address(toUint(item));\n    }\n\n    function toUint(RLPItem memory item) internal pure returns (uint) {\n        uint offset = _payloadOffset(item.memPtr);\n        uint len = item.len - offset;\n        uint memPtr = item.memPtr + offset;\n\n        uint result;\n        assembly {\n            result := div(mload(memPtr), exp(256, sub(32, len))) // shift to the correct location\n        }\n\n        return result;\n    }\n\n    function toBytes(RLPItem memory item) internal pure returns (bytes) {\n        uint offset = _payloadOffset(item.memPtr);\n        uint len = item.len - offset; // data length\n        bytes memory result = new bytes(len);\n\n        uint destPtr;\n        assembly {\n            destPtr := add(0x20, result)\n        }\n\n        copy(item.memPtr + offset, destPtr, len);\n        return result;\n    }\n\n\n    /*\n    * @param src Pointer to source\n    * @param dest Pointer to destination\n    * @param len Amount of memory to copy from the source\n    */\n    function copy(uint src, uint dest, uint len) internal pure {\n        // copy as many word sizes as possible\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n\n            src += WORD_SIZE;\n            dest += WORD_SIZE;\n        }\n\n        // left over bytes. Mask is used to remove unwanted bytes from the word\n        uint mask = 256 ** (WORD_SIZE - len) - 1;\n        assembly {\n            let srcpart := and(mload(src), not(mask)) // zero out src\n            let destpart := and(mload(dest), mask) // retrieve the bytes\n            mstore(dest, or(destpart, srcpart))\n        }\n    }\n}\n' }, 'ReducerUtil': { 'contractName': 'ReducerUtil', 'abi': [], 'bytecode': '0x604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f30073000000000000000000000000000000000000000030146080604052600080fd00a165627a7a72305820cde8eca3a526fbe06e69263ca1b7586a64ae4a0b1f766295e3985fea9137a3610029', 'deployedBytecode': '0x73000000000000000000000000000000000000000030146080604052600080fd00a165627a7a72305820cde8eca3a526fbe06e69263ca1b7586a64ae4a0b1f766295e3985fea9137a3610029', 'sourceMap': '94:2382:18:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24', 'deployedSourceMap': '94:2382:18:-;;;;;;;;', 'source': 'pragma solidity ^0.4.0;\nimport "../libs/bakaoh/solidity-rlp-encode/contracts/RLPEncode.sol";\n\nlibrary ReducerUtil {\n    using RLPEncode for bytes[];\n\n    struct RlpData {\n        bytes[] pairs;\n    }\n\n    function addBytes(RlpData memory obj, bytes key, bytes value) internal pure returns (RlpData memory newObj) {\n        newObj.pairs = _extend(obj.pairs);\n        newObj.pairs[newObj.pairs.length - 2] = RLPEncode.encodeBytes(key);\n        newObj.pairs[newObj.pairs.length - 1] = RLPEncode.encodeBytes(value);\n    }\n\n    function addString(RlpData memory obj, bytes key, string value) internal pure returns (RlpData memory newObj) {\n        newObj.pairs = _extend(obj.pairs);\n        newObj.pairs[newObj.pairs.length - 2] = RLPEncode.encodeBytes(key);\n        newObj.pairs[newObj.pairs.length - 1] = RLPEncode.encodeString(value);\n    }\n\n    function addAddress(RlpData memory obj, bytes key, address value) internal pure returns (RlpData memory newObj) {\n        newObj.pairs = _extend(obj.pairs);\n        newObj.pairs[newObj.pairs.length - 2] = RLPEncode.encodeBytes(key);\n        newObj.pairs[newObj.pairs.length - 1] = RLPEncode.encodeAddress(value);\n    }\n\n    function addUint(RlpData memory obj, bytes key, uint value) internal pure returns (RlpData memory newObj) {\n        newObj.pairs = _extend(obj.pairs);\n        newObj.pairs[newObj.pairs.length - 2] = RLPEncode.encodeBytes(key);\n        newObj.pairs[newObj.pairs.length - 1] = RLPEncode.encodeUint(value);\n    }\n\n    function addInt(RlpData memory obj, bytes key, int value) internal pure returns (RlpData memory newObj) {\n        newObj.pairs = _extend(obj.pairs);\n        newObj.pairs[newObj.pairs.length - 2] = RLPEncode.encodeBytes(key);\n        newObj.pairs[newObj.pairs.length - 1] = RLPEncode.encodeInt(value);\n    }\n\n    function addBool(RlpData memory obj, bytes key, bool value) internal pure returns (RlpData memory newObj) {\n        newObj.pairs = _extend(obj.pairs);\n        newObj.pairs[newObj.pairs.length - 2] = RLPEncode.encodeBytes(key);\n        newObj.pairs[newObj.pairs.length - 1] = RLPEncode.encodeBool(value);\n    }\n\n    function _extend(bytes[] memory pairs) private pure returns (bytes[] memory newPairs) {\n        newPairs = new bytes[](pairs.length + 2);\n        for (uint i = 0; i < newPairs.length - 2; i++) {\n            newPairs[i] = pairs[i];\n        }\n    }\n\n    function encode(RlpData memory obj) internal pure returns (bytes) {\n        return obj.pairs.encodeList();\n    }\n}\n' }, 'Roles': { 'contractName': 'Roles', 'abi': [], 'bytecode': '0x604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f30073000000000000000000000000000000000000000030146080604052600080fd00a165627a7a72305820f326f8ca5d88639d9d01cc5d9f69b7e49c118f6c290cbd8dd7a0ac743985bb320029', 'deployedBytecode': '0x73000000000000000000000000000000000000000030146080604052600080fd00a165627a7a72305820f326f8ca5d88639d9d01cc5d9f69b7e49c118f6c290cbd8dd7a0ac743985bb320029', 'sourceMap': '109:784:20:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24', 'deployedSourceMap': '109:784:20:-;;;;;;;;', 'source': "pragma solidity ^0.4.24;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an account access to this role\n   */\n  function add(Role storage role, address account) internal {\n    require(account != address(0));\n    require(!has(role, account));\n\n    role.bearer[account] = true;\n  }\n\n  /**\n   * @dev remove an account's access to this role\n   */\n  function remove(Role storage role, address account) internal {\n    require(account != address(0));\n    require(has(role, account));\n\n    role.bearer[account] = false;\n  }\n\n  /**\n   * @dev check if an account has this role\n   * @return bool\n   */\n  function has(Role storage role, address account)\n    internal\n    view\n    returns (bool)\n  {\n    require(account != address(0));\n    return role.bearer[account];\n  }\n}\n" }, 'SafeMath': { 'contractName': 'SafeMath', 'abi': [], 'bytecode': '0x604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f30073000000000000000000000000000000000000000030146080604052600080fd00a165627a7a723058203f91b09c481bb1b1834a7f2041ef95fc427e8b075bac2d596b08fc20c37e11b60029', 'deployedBytecode': '0x73000000000000000000000000000000000000000030146080604052600080fd00a165627a7a723058203f91b09c481bb1b1834a7f2041ef95fc427e8b075bac2d596b08fc20c37e11b60029', 'sourceMap': '117:1531:22:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24', 'deployedSourceMap': '117:1531:22:-;;;;;;;;', 'source': "pragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n" }, 'Secondary': { 'contractName': 'Secondary', 'abi': [{ 'inputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'constructor' }, { 'anonymous': false, 'inputs': [{ 'indexed': false, 'name': 'recipient', 'type': 'address' }], 'name': 'PrimaryTransferred', 'type': 'event' }, { 'constant': true, 'inputs': [], 'name': 'primary', 'outputs': [{ 'name': '', 'type': 'address' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': 'recipient', 'type': 'address' }], 'name': 'transferPrimary', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }], 'bytecode': '0x', 'deployedBytecode': '0x', 'sourceMap': '', 'deployedSourceMap': '', 'source': 'pragma solidity ^0.4.24;\n\n/**\n * @title Secondary\n * @dev A Secondary contract can only be used by its primary account (the one that created it)\n */\ncontract Secondary {\n  address private _primary;\n\n  event PrimaryTransferred(\n    address recipient\n  );\n\n  /**\n   * @dev Sets the primary account to the one that is creating the Secondary contract.\n   */\n  constructor() internal {\n    _primary = msg.sender;\n    emit PrimaryTransferred(_primary);\n  }\n\n  /**\n   * @dev Reverts if called from any account other than the primary.\n   */\n  modifier onlyPrimary() {\n    require(msg.sender == _primary);\n    _;\n  }\n\n  /**\n   * @return the address of the primary.\n   */\n  function primary() public view returns (address) {\n    return _primary;\n  }\n  \n  /**\n   * @dev Transfers contract to a new primary.\n   * @param recipient The address of new primary. \n   */\n  function transferPrimary(address recipient) public onlyPrimary {\n    require(recipient != address(0));\n    _primary = recipient;\n    emit PrimaryTransferred(_primary);\n  }\n}\n' }, 'StringUtil': { 'contractName': 'StringUtil', 'abi': [], 'bytecode': '0x604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f30073000000000000000000000000000000000000000030146080604052600080fd00a165627a7a72305820640236603d439e20fc036a156d536cd48cb1c202caac4b65a17ef08033f61fc90029', 'deployedBytecode': '0x73000000000000000000000000000000000000000030146080604052600080fd00a165627a7a72305820640236603d439e20fc036a156d536cd48cb1c202caac4b65a17ef08033f61fc90029', 'sourceMap': '25:172:19:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24', 'deployedSourceMap': '25:172:19:-;;;;;;;;', 'source': 'pragma solidity ^0.4.0;\n\nlibrary StringUtil {\n    function equals(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n\n' }, 'TestingWrapper': { 'contractName': 'TestingWrapper', 'abi': [{ 'constant': true, 'inputs': [{ 'name': 'self', 'type': 'bytes' }], 'name': 'encodeBytes', 'outputs': [{ 'name': '', 'type': 'bytes' }], 'payable': false, 'stateMutability': 'pure', 'type': 'function' }, { 'constant': true, 'inputs': [{ 'name': 'self', 'type': 'bytes[]' }], 'name': 'encodeList', 'outputs': [{ 'name': '', 'type': 'bytes' }], 'payable': false, 'stateMutability': 'pure', 'type': 'function' }, { 'constant': true, 'inputs': [{ 'name': 'self', 'type': 'string' }], 'name': 'encodeString', 'outputs': [{ 'name': '', 'type': 'bytes' }], 'payable': false, 'stateMutability': 'pure', 'type': 'function' }, { 'constant': true, 'inputs': [{ 'name': 'self', 'type': 'address' }], 'name': 'encodeAddress', 'outputs': [{ 'name': '', 'type': 'bytes' }], 'payable': false, 'stateMutability': 'pure', 'type': 'function' }, { 'constant': true, 'inputs': [{ 'name': 'self', 'type': 'uint256' }], 'name': 'encodeUint', 'outputs': [{ 'name': '', 'type': 'bytes' }], 'payable': false, 'stateMutability': 'pure', 'type': 'function' }, { 'constant': true, 'inputs': [{ 'name': 'self', 'type': 'int256' }], 'name': 'encodeInt', 'outputs': [{ 'name': '', 'type': 'bytes' }], 'payable': false, 'stateMutability': 'pure', 'type': 'function' }, { 'constant': true, 'inputs': [{ 'name': 'self', 'type': 'bool' }], 'name': 'encodeBool', 'outputs': [{ 'name': '', 'type': 'bytes' }], 'payable': false, 'stateMutability': 'pure', 'type': 'function' }], 'bytecode': '0x608060405234801561001057600080fd5b50610a6e806100206000396000f3006080604052600436106100825763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166316163c89811461008757806375b8de15146100bd578063d30c0a64146100dd578063d32b1bea146100fd578063d93227e21461011d578063e334f32e1461013d578063e3ac07f51461015d575b600080fd5b34801561009357600080fd5b506100a76100a23660046108a2565b61017d565b6040516100b49190610948565b60405180910390f35b3480156100c957600080fd5b506100a76100d83660046108f5565b61018e565b3480156100e957600080fd5b506100a76100f83660046108f5565b610195565b34801561010957600080fd5b506100a7610118366004610847565b6101a0565b34801561012957600080fd5b506100a761013836600461086d565b6101ab565b34801561014957600080fd5b506100a76101583660046108c0565b6101b6565b34801561016957600080fd5b506100a76101783660046108c0565b6101bd565b6060610188826101c8565b92915050565b6060610188825b60606101888261024b565b60606101888261025e565b606061018882610299565b6060610188825b6060610188826102bc565b6040805160018082528183019092526060918291906020808301908038833901905050905082610218577f800000000000000000000000000000000000000000000000000000000000000061021e565b60f860020a5b81600081518110151561022d57fe5b906020010190600160f860020a031916908160001a90535092915050565b606061018861025983610311565b6102bc565b60408051741400000000000000000000000000000000000000008318601482015260348101909152606090610292816102bc565b9392505050565b6060806102a583610442565b90506102926102b6825160c0610551565b826106ac565b606080825160011480156102f0575060808360008151811015156102dc57fe5b016020015160f860020a9081900481020411155b156102fc575081610188565b61029261030b84516080610551565b846106ac565b60408051602080825281830190925260609182916000918391839180820161040080388339019050509350856020850152600092505b60208310156103a557838381518110151561035e57fe5b60209101015160f860020a90819004027fff00000000000000000000000000000000000000000000000000000000000000161561039a576103a5565b600190920191610347565b826020036040519080825280601f01601f1916602001820160405280156103d6578160200160208202803883390190505b509150600090505b81518110156104395783516001840193859181106103f857fe5b90602001015160f860020a900460f860020a02828281518110151561041957fe5b906020010190600160f860020a031916908160001a9053506001016103de565b50949350505050565b6060600080606060006060600087516000141561046f576040805160008152602081019091529650610546565b600094505b87518510156104a757878581518110151561048b57fe5b9060200190602002015151860195508480600101955050610474565b856040519080825280601f01601f1916602001820160405280156104d5578160200160208202803883390190505b509350602084019250600094505b87518510156105425787858151811015156104fa57fe5b90602001906020020151915060208201905061051883828451610727565b878581518110151561052657fe5b90602001906020020151518301925084806001019550506104e3565b8396505b505050505050919050565b60608060008060388610156105b557604080516001808252818301909252906020808301908038833901905050925084860160f860020a0283600081518110151561059857fe5b906020010190600160f860020a031916908160001a90535061069f565b5060015b80868115156105c457fe5b04156105d957600190910190610100026105b9565b816001016040519080825280601f01601f19166020018201604052801561060a578160200160208202803883390190505b50925084820160370160f860020a0283600081518110151561062857fe5b906020010190600160f860020a031916908160001a905350600190505b81811161069f576101008183036101000a8781151561066057fe5b0481151561066a57fe5b0660f860020a02838281518110151561067f57fe5b906020010190600160f860020a031916908160001a905350600101610645565b8293505b50505092915050565b6060806040519050835180825260208201818101602087015b818310156106dd5780518352602092830192016106c5565b50855184518101855292509050808201602086015b8183101561070a5780518352602092830192016106f2565b509551919091011594909401601f01601f19166040529392505050565b82828260005b6020821061074f578251845260209384019390920191601f199091019061072d565b50905182516020929092036101000a6000190180199091169116179052505050565b600061029282356109cd565b6000601f8201831361078e57600080fd5b81356107a161079c82610980565b610959565b81815260209384019390925082018360005b838110156107df57813586016107c988826107f5565b84525060209283019291909101906001016107b3565b5050505092915050565b600061029282356109e6565b6000601f8201831361080657600080fd5b813561081461079c826109a1565b9150808252602083016020830185838301111561083057600080fd5b6106a38382846109ee565b600061029282356109eb565b60006020828403121561085957600080fd5b60006108658484610771565b949350505050565b60006020828403121561087f57600080fd5b813567ffffffffffffffff81111561089657600080fd5b6108658482850161077d565b6000602082840312156108b457600080fd5b600061086584846107e9565b6000602082840312156108d257600080fd5b813567ffffffffffffffff8111156108e957600080fd5b610865848285016107f5565b60006020828403121561090757600080fd5b6000610865848461083b565b600061091e826109c9565b8084526109328160208601602086016109fa565b61093b81610a2a565b9093016020019392505050565b602080825281016102928184610913565b60405181810167ffffffffffffffff8111828210171561097857600080fd5b604052919050565b600067ffffffffffffffff82111561099757600080fd5b5060209081020190565b600067ffffffffffffffff8211156109b857600080fd5b506020601f91909101601f19160190565b5190565b73ffffffffffffffffffffffffffffffffffffffff1690565b151590565b90565b82818337506000910152565b60005b83811015610a155781810151838201526020016109fd565b83811115610a24576000848401525b50505050565b601f01601f1916905600a265627a7a723058209b4bee0233985ff020c645d7f85f845c03144259576f6091a763c38e40b86f506c6578706572696d656e74616cf50037', 'deployedBytecode': '0x6080604052600436106100825763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166316163c89811461008757806375b8de15146100bd578063d30c0a64146100dd578063d32b1bea146100fd578063d93227e21461011d578063e334f32e1461013d578063e3ac07f51461015d575b600080fd5b34801561009357600080fd5b506100a76100a23660046108a2565b61017d565b6040516100b49190610948565b60405180910390f35b3480156100c957600080fd5b506100a76100d83660046108f5565b61018e565b3480156100e957600080fd5b506100a76100f83660046108f5565b610195565b34801561010957600080fd5b506100a7610118366004610847565b6101a0565b34801561012957600080fd5b506100a761013836600461086d565b6101ab565b34801561014957600080fd5b506100a76101583660046108c0565b6101b6565b34801561016957600080fd5b506100a76101783660046108c0565b6101bd565b6060610188826101c8565b92915050565b6060610188825b60606101888261024b565b60606101888261025e565b606061018882610299565b6060610188825b6060610188826102bc565b6040805160018082528183019092526060918291906020808301908038833901905050905082610218577f800000000000000000000000000000000000000000000000000000000000000061021e565b60f860020a5b81600081518110151561022d57fe5b906020010190600160f860020a031916908160001a90535092915050565b606061018861025983610311565b6102bc565b60408051741400000000000000000000000000000000000000008318601482015260348101909152606090610292816102bc565b9392505050565b6060806102a583610442565b90506102926102b6825160c0610551565b826106ac565b606080825160011480156102f0575060808360008151811015156102dc57fe5b016020015160f860020a9081900481020411155b156102fc575081610188565b61029261030b84516080610551565b846106ac565b60408051602080825281830190925260609182916000918391839180820161040080388339019050509350856020850152600092505b60208310156103a557838381518110151561035e57fe5b60209101015160f860020a90819004027fff00000000000000000000000000000000000000000000000000000000000000161561039a576103a5565b600190920191610347565b826020036040519080825280601f01601f1916602001820160405280156103d6578160200160208202803883390190505b509150600090505b81518110156104395783516001840193859181106103f857fe5b90602001015160f860020a900460f860020a02828281518110151561041957fe5b906020010190600160f860020a031916908160001a9053506001016103de565b50949350505050565b6060600080606060006060600087516000141561046f576040805160008152602081019091529650610546565b600094505b87518510156104a757878581518110151561048b57fe5b9060200190602002015151860195508480600101955050610474565b856040519080825280601f01601f1916602001820160405280156104d5578160200160208202803883390190505b509350602084019250600094505b87518510156105425787858151811015156104fa57fe5b90602001906020020151915060208201905061051883828451610727565b878581518110151561052657fe5b90602001906020020151518301925084806001019550506104e3565b8396505b505050505050919050565b60608060008060388610156105b557604080516001808252818301909252906020808301908038833901905050925084860160f860020a0283600081518110151561059857fe5b906020010190600160f860020a031916908160001a90535061069f565b5060015b80868115156105c457fe5b04156105d957600190910190610100026105b9565b816001016040519080825280601f01601f19166020018201604052801561060a578160200160208202803883390190505b50925084820160370160f860020a0283600081518110151561062857fe5b906020010190600160f860020a031916908160001a905350600190505b81811161069f576101008183036101000a8781151561066057fe5b0481151561066a57fe5b0660f860020a02838281518110151561067f57fe5b906020010190600160f860020a031916908160001a905350600101610645565b8293505b50505092915050565b6060806040519050835180825260208201818101602087015b818310156106dd5780518352602092830192016106c5565b50855184518101855292509050808201602086015b8183101561070a5780518352602092830192016106f2565b509551919091011594909401601f01601f19166040529392505050565b82828260005b6020821061074f578251845260209384019390920191601f199091019061072d565b50905182516020929092036101000a6000190180199091169116179052505050565b600061029282356109cd565b6000601f8201831361078e57600080fd5b81356107a161079c82610980565b610959565b81815260209384019390925082018360005b838110156107df57813586016107c988826107f5565b84525060209283019291909101906001016107b3565b5050505092915050565b600061029282356109e6565b6000601f8201831361080657600080fd5b813561081461079c826109a1565b9150808252602083016020830185838301111561083057600080fd5b6106a38382846109ee565b600061029282356109eb565b60006020828403121561085957600080fd5b60006108658484610771565b949350505050565b60006020828403121561087f57600080fd5b813567ffffffffffffffff81111561089657600080fd5b6108658482850161077d565b6000602082840312156108b457600080fd5b600061086584846107e9565b6000602082840312156108d257600080fd5b813567ffffffffffffffff8111156108e957600080fd5b610865848285016107f5565b60006020828403121561090757600080fd5b6000610865848461083b565b600061091e826109c9565b8084526109328160208601602086016109fa565b61093b81610a2a565b9093016020019392505050565b602080825281016102928184610913565b60405181810167ffffffffffffffff8111828210171561097857600080fd5b604052919050565b600067ffffffffffffffff82111561099757600080fd5b5060209081020190565b600067ffffffffffffffff8211156109b857600080fd5b506020601f91909101601f19160190565b5190565b73ffffffffffffffffffffffffffffffffffffffff1690565b151590565b90565b82818337506000910152565b60005b83811015610a155781810151838201526020016109fd565b83811115610a24576000848401525b50505050565b601f01601f1916905600a265627a7a723058209b4bee0233985ff020c645d7f85f845c03144259576f6091a763c38e40b86f506c6578706572696d656e74616cf50037', 'sourceMap': '163:1939:17:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;163:1939:17;;;;;;;', 'deployedSourceMap': '163:1939:17:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1991:109;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1991:109:17;;;;;;;;;;;;;;;;;;;;;;;;;1745:106;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1745:106:17;;;;;;;;;1498:109;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1498:109:17;;;;;;;;;1240:118;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1240:118:17;;;;;;;;;704:119;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;704:119:17;;;;;;;;;968:122;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;968:122:17;;;;;;;;;386:119;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;386:119:17;;;;;;;;;1991:109;2043:5;2067:26;2088:4;2067:20;:26::i;:::-;2060:33;1991:109;-1:-1:-1;;1991:109:17:o;1745:106::-;1795:5;1819:25;1839:4;1498:109;1550:5;1574:26;1595:4;1574:20;:26::i;1240:118::-;1298:5;1322:29;1346:4;1322:23;:29::i;704:119::-;766:5;790:26;811:4;790:20;:26::i;968:122::-;1031:5;1055:28;1078:4;386:119;447:5;471:27;493:4;471:21;:27::i;2429:196:16:-;2523:12;;;2533:1;2523:12;;;;;;;;;2483:5;;;;2523:12;;;;;;;105:10:-1;2523:12:16;88:34:-1;136:17;;-1:-1;2523:12:16;2500:35;;2559:4;:34;;2581:12;2559:34;;;-1:-1:-1;;;2559:34:16;2545:7;2553:1;2545:10;;;;;;;;;;;;;;:49;-1:-1:-1;;;;;2545:49:16;;;;;;;;-1:-1:-1;2611:7:16;2429:196;-1:-1:-1;;2429:196:16:o;1934:112::-;1988:5;2012:27;2024:14;2033:4;2024:8;:14::i;:::-;2012:11;:27::i;1432:362::-;1580:4;1574:11;;1621:44;1617:55;;1612:2;1605:10;;1598:75;1706:2;1699:10;;1686:24;;;1492:5;;1764:23;1574:11;1764;:23::i;:::-;1757:30;1432:362;-1:-1:-1;;;1432:362:16:o;835:182::-;899:5;916:17;936:13;944:4;936:7;:13::i;:::-;916:33;;966:44;973:30;986:4;:11;999:3;973:12;:30::i;:::-;1005:4;966:6;:44::i;326:310::-;389:5;406:20;440:4;:11;455:1;440:16;:40;;;;;477:3;465:4;470:1;465:7;;;;;;;;;;;;;;-1:-1:-1;;;465:7:16;;;;;;460:13;:20;;440:40;436:170;;;-1:-1:-1;506:4:16;436:170;;;551:44;558:30;571:4;:11;584:3;558:12;:30::i;:::-;590:4;551:6;:44::i;3841:438::-;3924:13;;;3934:2;3924:13;;;;;;;;;3890:5;;;;4018:6;;3890:5;;4018:6;;3924:13;;;17:15:-1;;105:10;3924:13:16;88:34:-1;136:17;;-1:-1;3924:13:16;3907:30;;3990:2;3985;3982:1;3978:10;3971:22;4027:1;4018:10;;4013:107;4034:2;4030:1;:6;4013:107;;;4061:1;4063;4061:4;;;;;;;;;;;;;;;-1:-1:-1;;;4061:4:16;;;;;:9;;;4057:53;;4090:5;;4057:53;4038:3;;;;;4013:107;;;4163:1;4158:2;:6;4148:17;;;;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;4148:17:16;;4129:36;;4189:1;4180:10;;4175:78;4196:3;:10;4192:1;:14;4175:78;;;4236:6;;4238:3;;;;4236:1;;:6;;;;;;;;;;;-1:-1:-1;;;4236:6:16;;-1:-1:-1;;;4236:6:16;4227:3;4231:1;4227:6;;;;;;;;;;;;;;:15;-1:-1:-1;;;;;4227:15:16;;;;;;;;-1:-1:-1;4208:3:16;;4175:78;;;-1:-1:-1;4269:3:16;3841:438;-1:-1:-1;;;;3841:438:16:o;5407:717::-;5468:5;5562:8;5585:6;5677:22;5726:17;5860;5915:12;5489:5;:12;5505:1;5489:17;5485:67;;;5529:12;;;5539:1;5529:12;;;;;;;;;-1:-1:-1;5522:19:16;;5485:67;5594:1;5585:10;;5580:87;5601:5;:12;5597:1;:16;5580:87;;;5641:5;5647:1;5641:8;;;;;;;;;;;;;;;;;;:15;5634:22;;;;5615:3;;;;;;;5580:87;;;5712:3;5702:14;;;;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;5702:14:16;;5677:39;;5795:4;5784:9;5780:20;5764:36;;5820:1;5816:5;;5812:279;5827:5;:12;5823:1;:16;5812:279;;;5880:5;5886:1;5880:8;;;;;;;;;;;;;;;;;;5860:28;;5973:4;5967;5963:15;5952:26;;5993:42;6000:12;6014:7;6023:4;:11;5993:6;:42::i;:::-;6065:5;6071:1;6065:8;;;;;;;;;;;;;;;;;;:15;6049:31;;;;5841:3;;;;;;;5812:279;;;6108:9;6101:16;;5407:717;;;;;;;;;;:::o;2948:641::-;3015:5;3032:20;3188:11;3213:6;3072:2;3066:3;:8;3062:497;;;3100:12;;;3110:1;3100:12;;;;;;;;;;;;;;;;105:10:-1;3100:12:16;88:34:-1;136:17;;-1:-1;3100:12:16;3090:22;;3150:6;3144:3;:12;-1:-1:-1;;;3139:18:16;3126:7;3134:1;3126:10;;;;;;;;;;;;;;:31;-1:-1:-1;;;;;3126:31:16;;;;;;;;;3062:497;;;-1:-1:-1;3222:1:16;3237:88;3250:1;3244:3;:7;;;;;;;;:12;3237:88;;3276:8;;;;;3307:3;3302:8;3237:88;;;3359:6;3368:1;3359:10;3349:21;;;;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;3349:21:16;;3339:31;;3411:6;3402;:15;3420:2;3402:20;-1:-1:-1;;;3397:26:16;3384:7;3392:1;3384:10;;;;;;;;;;;;;;:39;-1:-1:-1;;;;;3384:39:16;;;;;;;;;3445:1;3441:5;;3437:112;3448:11;;;3437:112;;3530:3;3523:1;3516:6;:8;3510:3;:15;3503:3;:23;;;;;;;;3502:31;;;;;;;;-1:-1:-1;;;3497:37:16;3484:7;3492:1;3484:10;;;;;;;;;;;;;;:50;-1:-1:-1;;;;;3484:50:16;;;;;;;;-1:-1:-1;3461:3:16;;3437:112;;;3575:7;3568:14;;2948:641;;;;;;;;:::o;6415:1161::-;6502:5;6519:22;6594:4;6588:11;6575:24;;6633:9;6627:16;6674:6;6663:9;6656:25;6720:4;6709:9;6705:20;6757:6;6753:2;6749:15;6825:4;6814:9;6810:20;6778:220;6852:3;6848:2;6845:11;6778:220;;;6974:9;;6963:21;;6889:4;6881:13;;;;6917;6778:220;;;-1:-1:-1;7022:17:16;;7082:16;;7070:29;;7052:48;;7022:17;-1:-1:-1;7120:3:16;-1:-1:-1;7143:15:16;;;7220:4;7204:21;;7172:221;7247:3;7243:2;7240:11;7172:221;;;7369:9;;7358:21;;7284:4;7276:13;;;;7312;7172:221;;;-1:-1:-1;7471:16:16;;7459:29;;;;7452:37;7443:47;;;;7515:2;7439:56;-1:-1:-1;;7420:112:16;7414:4;7407:126;7560:9;6415:1161;-1:-1:-1;;;6415:1161:16:o;4581:547::-;4666:5;4692:4;4717;4654:9;4732:164;4745:2;4738:9;;4732:164;;4814:10;;4801:24;;4860:2;4852:10;;;;4876:9;;;;-1:-1:-1;;4749:9:16;;;;4732:164;;;-1:-1:-1;4991:10:16;;5046:11;;4926:2;:8;;;;4918:3;:17;-1:-1:-1;;4918:21:16;5003:9;;4987:26;;;5042:22;;5090:21;5077:35;;-1:-1:-1;;;4958:164:16:o;5:118:-1:-;;72:46;110:6;97:20;72:46;;146:693;;261:4;249:17;;245:27;-1:-1;235:2;;286:1;283;276:12;235:2;323:6;310:20;345:85;360:69;422:6;360:69;;;345:85;;;458:21;;;502:4;490:17;;;;336:94;;-1:-1;515:14;;490:17;610:1;595:238;620:6;617:1;614:13;595:238;;;703:3;690:17;682:6;678:30;727:42;765:3;753:10;727:42;;;715:55;;-1:-1;793:4;784:14;;;;812;;;;;642:1;635:9;595:238;;;599:14;228:611;;;;;;;;847:112;;911:43;946:6;933:20;911:43;;967:432;;1057:4;1045:17;;1041:27;-1:-1;1031:2;;1082:1;1079;1072:12;1031:2;1119:6;1106:20;1141:60;1156:44;1193:6;1156:44;;1141:60;1132:69;;1221:6;1214:5;1207:21;1257:4;1249:6;1245:17;1290:4;1283:5;1279:16;1325:3;1316:6;1311:3;1307:16;1304:25;1301:2;;;1342:1;1339;1332:12;1301:2;1352:41;1386:6;1381:3;1376;1352:41;;1856:116;;1922:45;1959:6;1946:20;1922:45;;2555:241;;2659:2;2647:9;2638:7;2634:23;2630:32;2627:2;;;2675:1;2672;2665:12;2627:2;2710:1;2727:53;2772:7;2752:9;2727:53;;;2717:63;2621:175;-1:-1;;;;2621:175;2803:387;;2937:2;2925:9;2916:7;2912:23;2908:32;2905:2;;;2953:1;2950;2943:12;2905:2;2988:31;;3039:18;3028:30;;3025:2;;;3071:1;3068;3061:12;3025:2;3091:83;3166:7;3157:6;3146:9;3142:22;3091:83;;3197:235;;3298:2;3286:9;3277:7;3273:23;3269:32;3266:2;;;3314:1;3311;3304:12;3266:2;3349:1;3366:50;3408:7;3388:9;3366:50;;3439:345;;3552:2;3540:9;3531:7;3527:23;3523:32;3520:2;;;3568:1;3565;3558:12;3520:2;3603:31;;3654:18;3643:30;;3640:2;;;3686:1;3683;3676:12;3640:2;3706:62;3760:7;3751:6;3740:9;3736:22;3706:62;;3791:239;;3894:2;3882:9;3873:7;3869:23;3865:32;3862:2;;;3910:1;3907;3900:12;3862:2;3945:1;3962:52;4006:7;3986:9;3962:52;;4639:297;;4739:38;4771:5;4739:38;;;4794:6;4789:3;4782:19;4806:63;4862:6;4855:4;4850:3;4846:14;4839:4;4832:5;4828:16;4806:63;;;4901:29;4923:6;4901:29;;;4881:50;;;4894:4;4881:50;;4719:217;-1:-1;;;4719:217;4943:277;5069:2;5083:47;;;5054:18;;5144:66;5054:18;5196:6;5144:66;;5227:256;5289:2;5283:9;5315:17;;;5390:18;5375:34;;5411:22;;;5372:62;5369:2;;;5447:1;5444;5437:12;5369:2;5463;5456:22;5267:216;;-1:-1;5267:216;5490:263;;5654:18;5646:6;5643:30;5640:2;;;5686:1;5683;5676:12;5640:2;-1:-1;5715:4;5703:17;;;5733:15;;5577:176;5760:254;;5899:18;5891:6;5888:30;5885:2;;;5931:1;5928;5921:12;5885:2;-1:-1;6004:4;5975;5952:17;;;;-1:-1;;5948:33;5994:15;;5822:192;6552:91;6626:12;;6610:33;6650:128;6730:42;6719:54;;6702:76;6785:92;6858:13;6851:21;;6834:43;6884:78;6952:5;6935:27;7056:145;7137:6;7132:3;7127;7114:30;-1:-1;7193:1;7175:16;;7168:27;7107:94;7210:268;7275:1;7282:101;7296:6;7293:1;7290:13;7282:101;;;7363:11;;;7357:18;7344:11;;;7337:39;7318:2;7311:10;7282:101;;;7398:6;7395:1;7392:13;7389:2;;;7463:1;7454:6;7449:3;7445:16;7438:27;7389:2;7259:219;;;;;7486:97;7574:2;7554:14;-1:-1;;7550:28;;7534:49', 'source': 'pragma solidity ^0.4.0;\npragma experimental ABIEncoderV2;\n\nimport "./RLPEncode.sol";\n\n\n/**\n * @title TestingWrapper\n * @dev Wrapper for RLPEncode for testing.\n */\ncontract TestingWrapper {\n    /*\n     * Public functions\n     */\n    \n    /**\n     * @dev RLP encodes a byte string.\n     * @param self The byte string to encode.\n     * @return The RLP encoded string in bytes.\n     */\n    function encodeBytes(bytes memory self) public pure returns (bytes) {\n        return RLPEncode.encodeBytes(self);\n    }\n\n    /**\n     * @dev RLP encodes a list of RLP encoded byte byte strings.\n     * @param self The list of RLP encoded byte strings.\n     * @return The RLP encoded list of items in bytes.\n     */\n    function encodeList(bytes[] memory self) public pure returns (bytes) {\n        return RLPEncode.encodeList(self);\n    }\n\n    /**\n     * @dev RLP encodes a string.\n     * @param self The string to encode.\n     * @return The RLP encoded string in bytes.\n     */\n    function encodeString(string memory self) public pure returns (bytes) {\n        return RLPEncode.encodeString(self);\n    }\n\n    /** \n     * @dev RLP encodes an address.\n     * @param self The address to encode.\n     * @return The RLP encoded address in bytes.\n     */\n    function encodeAddress(address self) public pure returns (bytes) {\n        return RLPEncode.encodeAddress(self);\n    }\n\n    /** \n     * @dev RLP encodes a uint.\n     * @param self The uint to encode.\n     * @return The RLP encoded uint in bytes.\n     */\n    function encodeUint(uint self) public pure returns (bytes) {\n        return RLPEncode.encodeUint(self);\n    }\n\n    /** \n     * @dev RLP encodes an int.\n     * @param self The int to encode.\n     * @return The RLP encoded int in bytes.\n     */\n    function encodeInt(int self) public pure returns (bytes) {\n        return RLPEncode.encodeInt(self);\n    }\n\n    /** \n     * @dev RLP encodes a bool.\n     * @param self The bool to encode.\n     * @return The RLP encoded bool in bytes.\n     */\n    function encodeBool(bool self) public pure returns (bytes) {\n        return RLPEncode.encodeBool(self);\n    }\n}\n' }, 'Utils': { 'contractName': 'Utils', 'abi': [], 'bytecode': '0x604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f30073000000000000000000000000000000000000000030146080604052600080fd00a165627a7a72305820a6d581b512111971f1a9079461b86b3251a5da668753119e3e0eeeee374801c80029', 'deployedBytecode': '0x73000000000000000000000000000000000000000030146080604052600080fd00a165627a7a72305820a6d581b512111971f1a9079461b86b3251a5da668753119e3e0eeeee374801c80029', 'sourceMap': '133:3225:29:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24', 'deployedSourceMap': '133:3225:29:-;;;;;;;;', 'source': 'pragma solidity ^0.4.24;\n\n/**\n MIT License\n Original author: chriseth\n Refactored by Wanseob Lim\n */\n\nimport {D} from "./data.sol";\n\nlibrary Utils {\n    /// Returns a label containing the longest common prefix of `check` and `label`\n    /// and a label consisting of the remaining part of `label`.\n    function splitCommonPrefix(D.Label label, D.Label check) internal pure returns (D.Label prefix, D.Label labelSuffix) {\n        return splitAt(label, commonPrefix(check, label));\n    }\n    /// Splits the label at the given position and returns prefix and suffix,\n    /// i.e. prefix.length == pos and prefix.data . suffix.data == l.data.\n    function splitAt(D.Label l, uint pos) internal pure returns (D.Label prefix, D.Label suffix) {\n        require(pos <= l.length && pos <= 256);\n        prefix.length = pos;\n        if (pos == 0) {\n            prefix.data = bytes32(0);\n        } else {\n            prefix.data = l.data & ~bytes32((uint(1) << (256 - pos)) - 1);\n        }\n        suffix.length = l.length - pos;\n        suffix.data = l.data << pos;\n    }\n    /// Returns the length of the longest common prefix of the two labels.\n    function commonPrefix(D.Label a, D.Label b) internal pure returns (uint prefix) {\n        uint length = a.length < b.length ? a.length : b.length;\n        // TODO: This could actually use a "highestBitSet" helper\n        uint diff = uint(a.data ^ b.data);\n        uint mask = 1 << 255;\n        for (; prefix < length; prefix++)\n        {\n            if ((mask & diff) != 0)\n                break;\n            diff += diff;\n        }\n    }\n    /// Returns the result of removing a prefix of length `prefix` bits from the\n    /// given label (i.e. shifting its data to the left).\n    function removePrefix(D.Label l, uint prefix) internal pure returns (D.Label r) {\n        require(prefix <= l.length);\n        r.length = l.length - prefix;\n        r.data = l.data << prefix;\n    }\n    /// Removes the first bit from a label and returns the bit and a\n    /// label containing the rest of the label (i.e. shifted to the left).\n    function chopFirstBit(D.Label l) internal pure returns (uint firstBit, D.Label tail) {\n        require(l.length > 0);\n        return (uint(l.data >> 255), D.Label(l.data << 1, l.length - 1));\n    }\n    /// Returns the first bit set in the bitfield, where the 0th bit\n    /// is the least significant.\n    /// Throws if bitfield is zero.\n    /// More efficient the smaller the result is.\n    function lowestBitSet(uint bitfield) internal pure returns (uint bit) {\n        require(bitfield != 0);\n        bytes32 bitfieldBytes = bytes32(bitfield);\n        // First, find the lowest byte set\n        for (uint byteSet = 0; byteSet < 32; byteSet++) {\n            if (bitfieldBytes[31 - byteSet] != 0)\n                break;\n        }\n        uint singleByte = uint(uint8(bitfieldBytes[31 - byteSet]));\n        uint mask = 1;\n        for (bit = 0; bit < 256; bit ++) {\n            if ((singleByte & mask) != 0)\n                return 8 * byteSet + bit;\n            mask += mask;\n        }\n        assert(false);\n        return 0;\n    }\n    /// Returns the value of the `bit`th bit inside `bitfield`, where\n    /// the least significant is the 0th bit.\n    function bitSet(uint bitfield, uint bit) internal pure returns (uint) {\n        return (bitfield & (uint(1) << bit)) != 0 ? 1 : 0;\n    }\n}\n\n\n\n' } }
}
